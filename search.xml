<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Effective STL， 30 条有效使用 STL 的经验</title>
    <url>/2024/07/22/30%20%E6%9D%A1%E6%9C%89%E6%95%88%E4%BD%BF%E7%94%A8%20STL%20%E7%9A%84%E7%BB%8F%E9%AA%8C/</url>
    <content><![CDATA[<h1 id="Effective-STL，-30-条有效使用-STL-的经验"><a href="#Effective-STL，-30-条有效使用-STL-的经验" class="headerlink" title="Effective STL， 30 条有效使用 STL 的经验"></a>Effective STL， 30 条有效使用 STL 的经验</h1><p>最近看了一本书《Effective STL》，这本书内容比较老，但里面很多内容还是值得我们学习的。书里一共有 50 条有效使用 STL 的经验，这里整理出了 30 条自认为有用的条目分享给大家，希望对大家有所帮助，想了解具体内容的的朋友可以直接去看书哈。</p>
<span id="more"></span>

<p>以下是干货：</p>
<h3 id="1-慎重选择-STL-容器类型"><a href="#1-慎重选择-STL-容器类型" class="headerlink" title="1 慎重选择 STL 容器类型"></a><strong>1 慎重选择 STL 容器类型</strong></h3><p>a) 确保自己了解每个容器的使用场景，特定的场景选择合适的容器类型</p>
<p>b) 连续内存，支持下标访问，可考虑选择 vector</p>
<p>c) 频繁的在中间做插入或者删除操作，可考虑选择 list</p>
<p>d) 两者都有，可考虑使用 deque</p>
<h3 id="2-不要试图编写独立于容器类型的代码"><a href="#2-不要试图编写独立于容器类型的代码" class="headerlink" title="2 不要试图编写独立于容器类型的代码"></a><strong>2 不要试图编写独立于容器类型的代码</strong></h3><p>a) 不同容器有不同的成员函数，想独立于容器类型，只能取它们的交集</p>
<p>b) 然而，取交集意义不大</p>
<h3 id="3-确保容器中的对象拷贝正确而高效"><a href="#3-确保容器中的对象拷贝正确而高效" class="headerlink" title="3 确保容器中的对象拷贝正确而高效"></a><strong>3 确保容器中的对象拷贝正确而高效</strong></h3><p>a) 大家应该都知道，容器中存放的都是对象的拷贝，想要拷贝正确那就实现拷贝构造函数和拷贝赋值运算符</p>
<p>b) 想要更高效，可以使容器包含指针而不是对象，也可考虑智能指针</p>
<h3 id="4-调用-empty-而不是检查-size-是否为-0"><a href="#4-调用-empty-而不是检查-size-是否为-0" class="headerlink" title="4 调用 empty 而不是检查 size() 是否为 0"></a><strong>4 调用 empty 而不是检查 size() 是否为 0</strong></h3><p>a)empty 对所有的标准容器都是常数时间操作，而对一些 list 实现，size 耗费线性时间</p>
<h3 id="5-区间成员函数优先于与之对应的单元素成员函数"><a href="#5-区间成员函数优先于与之对应的单元素成员函数" class="headerlink" title="5 区间成员函数优先于与之对应的单元素成员函数"></a><strong>5 区间成员函数优先于与之对应的单元素成员函数</strong></h3><p>a) 写起来更方便，代码更少</p>
<p>b) 更能清晰的表达意图</p>
<p>c) 有些情况下可能更高效</p>
<h3 id="6-如果容器中包含了通过-new-操作创建的指针，切记在容器对象析构前将指针-delete-掉"><a href="#6-如果容器中包含了通过-new-操作创建的指针，切记在容器对象析构前将指针-delete-掉" class="headerlink" title="6 如果容器中包含了通过 new 操作创建的指针，切记在容器对象析构前将指针 delete 掉"></a><strong>6 如果容器中包含了通过 new 操作创建的指针，切记在容器对象析构前将指针 delete 掉</strong></h3><p>a) 其实就是为了避免资源泄漏</p>
<p>b) 可以考虑在容器中存储 shared_ptr</p>
<h3 id="6-慎重选择删除元素的方法"><a href="#6-慎重选择删除元素的方法" class="headerlink" title="6 慎重选择删除元素的方法"></a><strong>6 慎重选择删除元素的方法</strong></h3><p><strong>a) 要删除容器中有特定值的所有对象</strong></p>
<p>i. 如果容器是 vector、string 或 deque，则使用 erase-remove 习惯用法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">std::vector&lt;int&gt; v;</span><br><span class="line">v.erase(std::remove(v.begin(), v.end(), 5), v.end());</span><br></pre></td></tr></table></figure>

<p>ii. 如果容器是 list，则使用 list::remove</p>
<p>iii. 如果容器是一个标准关联容器，则使用它的 erase 成员函数</p>
<p><strong>b) 要删除容器中满足特定条件的所有对象</strong></p>
<p>i. 如果容器是 vector、string 或 deque，则使用 erase-remove_if 习惯用法</p>
<p>ii. 如果容器是 list，则使用 list::remove_if</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c.remove_if(c.begin(),c.end(),badValue);</span><br></pre></td></tr></table></figure>

<p>iii. 如果容器是一个标准关联容器，则使用 remove_copy_if 和 swap，或者写一个循环来遍历容器中的元素，记住当把迭代器传给 erase 时，要对它进行后缀递增</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">map&lt;string, int&gt; m;</span><br><span class="line">m.insert(pair&lt;string, int&gt;(&quot;aa&quot;, 1));</span><br><span class="line">m[&quot;a&quot;] = 1;</span><br><span class="line">m[&quot;b&quot;] = 2;</span><br><span class="line">m[&quot;c&quot;] = 3;</span><br><span class="line">m[&quot;d&quot;] = 4;</span><br><span class="line">​</span><br><span class="line">map&lt;string, int&gt; tmp_map;</span><br><span class="line">​</span><br><span class="line">cout &lt;&lt; m.size() &lt;&lt; endl; // 打印5</span><br><span class="line">// (a,1) (aa,1) (b,2) (c,3) (d,4)</span><br><span class="line">for_each(m.begin(), m.end(), [](const pair&lt;string, int&gt;&amp; pr) &#123; </span><br><span class="line">          cout &lt;&lt; &quot;(&quot; &lt;&lt; pr.first &lt;&lt; &quot;,&quot; &lt;&lt; pr.second &lt;&lt; &quot;) &quot;; &#125;);</span><br><span class="line">​</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">​</span><br><span class="line">int sz = 3;</span><br><span class="line">remove_copy_if(m.begin(), m.end(), inserter(tmp_map, tmp_map.end()),</span><br><span class="line">                  /*判断条件*/[sz](const pair&lt;string, int&gt;&amp; s) &#123;</span><br><span class="line">                                return s.second &gt;= sz;&#125; );</span><br><span class="line">m.swap(tmp_map);</span><br></pre></td></tr></table></figure>

<p><strong>c) 要在循环内部做某些操作</strong></p>
<p>i. 如果容器是一个标准序列容器，则写一个循环来遍历容器中的元素，记住每次调用 erase 时，要用它的返回值更新迭代器</p>
<p>ii. 如果容器是一个标准关联容器，则写一个循环来遍历容器中的元素，记住当把迭代器传给 erase 时，要对迭代器做后缀递增。</p>
<p><strong>d) 返回值更新迭代器示例</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for (auto i = c.begin(); i != c.end();) &#123; </span><br><span class="line">  if (xxx) &#123; </span><br><span class="line">    i = c.erase(i);</span><br><span class="line">  &#125; else ++i;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p><strong>e) 迭代器后缀递增示例</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for (auto i = c.begin(); i != c.end();) &#123;    </span><br><span class="line">  if (xxx) &#123;        </span><br><span class="line">    c.erase(i++);</span><br><span class="line">  &#125;else ++i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>f)（!!!）现在可以统一使用返回值更新迭代器方式</strong></p>
<p>经过测试，如果是关联容器，也可以使用返回值更新迭代的方式删除特定元素</p>
<h3 id="8-切勿对-STL-容器的线程安全性有不切实际的依赖"><a href="#8-切勿对-STL-容器的线程安全性有不切实际的依赖" class="headerlink" title="8 切勿对 STL 容器的线程安全性有不切实际的依赖"></a><strong>8 切勿对 STL 容器的线程安全性有不切实际的依赖</strong></h3><p>a) 书中原话是：当涉及 STL 容器和线程安全性时，你可以指望一个 STL 库允许多个线程同时读一个容器，以及多个线程对不同的容器做写入操作。你不能指望 STL 库会把你从手工同步控制中解脱出来，而且你不能依赖于任何线程支持。</p>
<p>b) 原文磨磨唧唧的，我就可以理解为 STL 不支持线程安全，想要线程安全，那自己加锁就完事儿了。</p>
<h3 id="9-vector-等容器考虑使用-reserve-来避免不必要的重新分配"><a href="#9-vector-等容器考虑使用-reserve-来避免不必要的重新分配" class="headerlink" title="9 vector 等容器考虑使用 reserve 来避免不必要的重新分配"></a><strong>9 vector 等容器考虑使用 reserve 来避免不必要的重新分配</strong></h3><p><strong>a) 这种动态扩容的容器每次扩容都会大体经历 4 步：</strong></p>
<p>i. 分配一块大小为当前容量的某个倍数的新内存。大多数实现中，vector 和 string 的容器每次以 2 的倍数增长</p>
<p>ii. 把容器的所有元素从旧的内存移动或者拷贝到新的内存中</p>
<p>iii. 如果有拷贝，析构掉旧内存中的对象</p>
<p>iv. 如果有拷贝，释放旧内存</p>
<p><strong>b) 明确 size()、capacity()、resize()、reserve() 四个成员函数的具体含义</strong></p>
<p><strong>c)reserve 能使重新分配的次数减少到最低限度，避免重新分配和迭代器失效带来的开销，两种方式：</strong></p>
<p>i. 若能明确知道或预计容器最终有多少元素，可使用 reverse，预留适当大小的空间</p>
<p>ii. 先预留足够大的空间，然后，当把所有数据都加入以后，再去除多余的空间。</p>
<h3 id="10-使用-swap-技巧除去多余的容量"><a href="#10-使用-swap-技巧除去多余的容量" class="headerlink" title="10 使用 swap 技巧除去多余的容量"></a><strong>10 使用 swap 技巧除去多余的容量</strong></h3><p>**a) vector&lt;** type&gt;(a).swap(a) vector<int>().swap(a);</p>
<p><strong>b) a.clear()</strong></p>
<p><strong>c) 以上两种都是清空容器的方法，swap 相对于 clear 一般更合适一些</strong></p>
<h3 id="11-避免使用-vector-存储-bool"><a href="#11-避免使用-vector-存储-bool" class="headerlink" title="11 避免使用 vector 存储 bool"></a><strong>11 避免使用 vector 存储 bool</strong></h3><p><strong>a) 有两点：</strong></p>
<p>i. 它不是一个 STL 容器，不能取元素的地址</p>
<p>ii. 它不存储 bool</p>
<p>b) 可以用 deque 和 bitset 来替代</p>
<h3 id="12-理解相等和等价的区别"><a href="#12-理解相等和等价的区别" class="headerlink" title="12 理解相等和等价的区别"></a><strong>12 理解相等和等价的区别</strong></h3><p><strong>a) 相等的概念基于 operator&#x3D;&#x3D;，即 a&#x3D;&#x3D;b，则为相等</strong></p>
<p><strong>b) 如果!(a &lt; b) &amp;&amp; !(b &lt; a)，则为等价</strong></p>
<h3 id="13-为包含指针的关联容器指定比较类型"><a href="#13-为包含指针的关联容器指定比较类型" class="headerlink" title="13 为包含指针的关联容器指定比较类型"></a><strong>13 为包含指针的关联容器指定比较类型</strong></h3><p><strong>a) 容器里面存储的都是指针，但是由于是关联容器，需要进行比较，但默认的比较（比较指针）一般不是我们想要的行为</strong></p>
<p><strong>b) 所以需要指定比较类型，自定义比较行为</strong></p>
<h3 id="14-总是让比较函数在等值情况下返回-false"><a href="#14-总是让比较函数在等值情况下返回-false" class="headerlink" title="14 总是让比较函数在等值情况下返回 false"></a><strong>14 总是让比较函数在等值情况下返回 false</strong></h3><p>a)<strong>直接看这个文章吧</strong><a href="https://mp.weixin.qq.com/s?__biz=MzkyODE5NjU2Mw==%5C&mid=2247491602%5C&idx=1%5C&sn=a9e4dd25cc35baf10b2508485b6dc550%5C&chksm=c21ed2aef5695bb869e6302ccbf2b2cbbf25f28e04c107408c7d60a9d611097ef8c588f4cde2%5C&scene=21#wechat_redirect">【线上问题】P1级公司故障，年终奖不保 (qq.com)</a></p>
<h3 id="15-切勿直接修改-set-或-multiset-中的键"><a href="#15-切勿直接修改-set-或-multiset-中的键" class="headerlink" title="15 切勿直接修改 set 或 multiset 中的键"></a><strong>15 切勿直接修改 set 或 multiset 中的键</strong></h3><p><strong>a) 如果改变了键，那么可能破坏该容器（顺序），再使用该容器可能导致不确定的结果</strong></p>
<p><strong>b) 为什么标题是切勿修改 set，而不是切勿修改 map 中的键呢？</strong></p>
<p>i. 因为 map 中的键是 const K，本来就不允许修改</p>
<h3 id="16-考虑用排序的-vector-替代关联容器"><a href="#16-考虑用排序的-vector-替代关联容器" class="headerlink" title="16 考虑用排序的 vector 替代关联容器"></a><strong>16 考虑用排序的 vector 替代关联容器</strong></h3><p>a) 在排序的 vector 中存储数据可能比在标准关联容器中存储同样的数据要耗费更少的内存。</p>
<p>b) 由于 Page Fault，通过二分搜索来查找一个排序的 vector 可能比查找一个标准关联容器要更快一些</p>
<p>c) 对于排序的 vector，最不利的地方在于它必须保持有序，这对 vector 来说，代价是很高的。所以，在查找操作几乎从不跟插入删除操作混在一起时，使用排序的 vector 才更合适。</p>
<h3 id="17当效率至关重要时，请在-map-operator-与-map-insert-之间谨慎做出选择"><a href="#17当效率至关重要时，请在-map-operator-与-map-insert-之间谨慎做出选择" class="headerlink" title="17当效率至关重要时，请在 map::operator[]与 map::insert 之间谨慎做出选择"></a><strong>17当效率至关重要时，请在 map::operator[]与 map::insert 之间谨慎做出选择</strong></h3><p>a) 当向 map 中添加元素时，优先选用 insert 而不是 operator[]</p>
<p>b) 当更新 map 中的值时，优先选用 operator[]</p>
<h3 id="18-iterator-优先于-const-iterator、reverse-iterator、const-reverse-iterator"><a href="#18-iterator-优先于-const-iterator、reverse-iterator、const-reverse-iterator" class="headerlink" title="18 iterator 优先于 const_iterator、reverse_iterator、const_reverse_iterator"></a><strong>18 iterator 优先于 const_iterator、reverse_iterator、const_reverse_iterator</strong></h3><p>a) 尽量用 iterator 来代替 const 或 reverse 型的迭代器</p>
<p>b)iterator 相对于其它更加实用</p>
<p>c) 很多参数都是 iterator，很少有其它</p>
<h3 id="19使用-distance-和-advance-将容器的-const-iterator-转换成-iterator"><a href="#19使用-distance-和-advance-将容器的-const-iterator-转换成-iterator" class="headerlink" title="19使用 distance 和 advance 将容器的 const_iterator 转换成 iterator"></a><strong>19使用 distance 和 advance 将容器的 const_iterator 转换成 iterator</strong></h3><p>Container d;ConstIter ci;Iter i(d.begin());advance(i, distance(i, ci));</p>
<h3 id="20对于逐个字符的输入-请考虑使用-istreambuf-iterator"><a href="#20对于逐个字符的输入-请考虑使用-istreambuf-iterator" class="headerlink" title="20对于逐个字符的输入, 请考虑使用 istreambuf_iterator"></a><strong>20对于逐个字符的输入, 请考虑使用 istreambuf_iterator</strong></h3><p>a)istreambuf_iterator 性能一般优于 istream_iterator</p>
<p>b)istreambuf_iterator 不会跳过任何字符</p>
<p>istream inputFile(“xxx.txt”);</p>
<p>string str(istreambuf_iterator<char>(inputFile), istreambuf_iterator<char>());</p>
<h3 id="21容器的插入-要确保目标空间足够大"><a href="#21容器的插入-要确保目标空间足够大" class="headerlink" title="21容器的插入, 要确保目标空间足够大"></a><strong>21容器的插入, 要确保目标空间足够大</strong></h3><p>a) 灵活使用 reverse 和 back_inserter、front_inserter 和 inserter 返回的迭代器。</p>
<h3 id="22-了解各种与排序有关的选择"><a href="#22-了解各种与排序有关的选择" class="headerlink" title="22 了解各种与排序有关的选择"></a><strong>22 了解各种与排序有关的选择</strong></h3><p><strong>a) 重点关注以下几项：</strong></p>
<p>i.partial_sort</p>
<p>ii.nth_element</p>
<p>iii.stable_sort</p>
<p>iv.sort</p>
<p>v.partition</p>
<p>vi.stable_partition</p>
<p><strong>b) 对排序算法的选择应该更多地基于所需要完成的功能，而不是算法的性能</strong></p>
<p><strong>c) 总结：</strong></p>
<p>i. 如果需要对 vector、string、deque 或者数组中的元素执行一次完全排序，那可以使用 sort 或者 stable_sort</p>
<p>ii. 如果有一个 vector、string、deque 或者数组，并且只需要对等价性最前面的 n 个元素进行排序，那可以使用 partial_sort</p>
<p>iii. 如果有一个 vector、string、deque 或者数组，并且需要找到第 n 个位置上的元素，或者，需要找到等价性最前面的 n 个元素但又不必对这 n 个元素进行排序，那么，nth_element 正是所需要的函数</p>
<p>iv. 如果需要将一个标准序列容器中的元素按照是否满足某个特定的条件区分开来，那么，partition 和 stable_partition 可能正是你所需要的</p>
<p>v. 如果你的数组在一个 list 中，那么你仍然可以调用 partition 和 stable_partition 算法，可以用 list::sort 来替代 sort 和 stable_sort 算法。</p>
<h3 id="23如果确实需要删除元素，则需要在-remove-这一类算法之后调用-erase"><a href="#23如果确实需要删除元素，则需要在-remove-这一类算法之后调用-erase" class="headerlink" title="23如果确实需要删除元素，则需要在 remove 这一类算法之后调用 erase"></a><strong>23如果确实需要删除元素，则需要在 remove 这一类算法之后调用 erase</strong></h3><p>a)erase-remove 这块应该大家都知道</p>
<p>b)list 是个例外，list 的 remove 就是 erase</p>
<p>c)remove 指针时注意释放掉对应的内存，防止内存泄漏</p>
<h3 id="24-了解哪些算法使用排序的区间作为参数"><a href="#24-了解哪些算法使用排序的区间作为参数" class="headerlink" title="24 了解哪些算法使用排序的区间作为参数"></a><strong>24 了解哪些算法使用排序的区间作为参数</strong></h3><p><strong>a) 某些算法为了性能考虑，需要使用排序的区间作为参数</strong></p>
<p><strong>b) 如果传递了没有排序的区间进去，会导致错误的结果</strong></p>
<p><strong>c) 要求排序区间的 STL 算法：</strong></p>
<p>i.binary_search</p>
<p>ii.lower_bound</p>
<p>iii.upper_bound</p>
<p>iv.equal_range</p>
<p>v.set_union</p>
<p>vi.set_intersection</p>
<p>vii.set_difference</p>
<p>viii.set_symmetric_difference</p>
<p>ix.merge</p>
<p>x.inplace_merge</p>
<p>xi.includes</p>
<p>d) 下面的算法不一定要求排序区间，但通常和排序区间一起使用</p>
<p>i.unique</p>
<p>ii.unique_copy</p>
<h3 id="25-通过-mismatch-或-lexicographical-compare-实现简单的忽略大小写的字符串比较"><a href="#25-通过-mismatch-或-lexicographical-compare-实现简单的忽略大小写的字符串比较" class="headerlink" title="25. 通过 mismatch 或 lexicographical_compare 实现简单的忽略大小写的字符串比较"></a><strong>25. 通过 mismatch 或 lexicographical_compare 实现简单的忽略大小写的字符串比较</strong></h3><p>a)mismatch 或 lexicographical_compare 更通用</p>
<p>b) 但 strcmp 在处理长字符串时可能更高效</p>
<h3 id="26-使用-accumulate-或者-for-each-进行区间统计"><a href="#26-使用-accumulate-或者-for-each-进行区间统计" class="headerlink" title="26 使用 accumulate 或者 for_each 进行区间统计"></a><strong>26 使用 accumulate 或者 for_each 进行区间统计</strong></h3><p>a)accumulate 会计算出一个区间的统计信息</p>
<p>b)for_each 是对一个区间的每个元素做一个操作</p>
<h3 id="27算法调用优先于手写的循环"><a href="#27算法调用优先于手写的循环" class="headerlink" title="27算法调用优先于手写的循环"></a><strong>27算法调用优先于手写的循环</strong></h3><p><strong>a) 大多数情况下，标准的 STL 肯定比我们自己手写的好一些，包括正确性以及性能和可维护性方面</strong></p>
<p><strong>b) 比如：</strong></p>
<p>i.min_element</p>
<p>ii.accumulate</p>
<p>iii.partition</p>
<p>iv.find</p>
<p>v.find_if</p>
<p>vi.for_each</p>
<p>vii.erase-remove</p>
<p>viii.transform</p>
<h3 id="28容器的成员函数优先于同名的算法"><a href="#28容器的成员函数优先于同名的算法" class="headerlink" title="28容器的成员函数优先于同名的算法"></a><strong>28容器的成员函数优先于同名的算法</strong></h3><p><strong>a) 关联容器提供了 count、find、lower_bound、upper_bound、equal_range</strong></p>
<p><strong>b)list 提供了 remove、remove_if、unique、sort、merge、reverse</strong></p>
<p><strong>c) 有两个原因：</strong></p>
<p>i. 成员函数通常与容器（特别是关联容器）结合得更加紧密</p>
<p>ii. 成员函数往往速度更快</p>
<h3 id="29正确区分-count、find、binary-search、lower-bound、upper-bound、equal-range"><a href="#29正确区分-count、find、binary-search、lower-bound、upper-bound、equal-range" class="headerlink" title="29正确区分 count、find、binary_search、lower_bound、upper_bound、equal_range"></a><strong>29正确区分 count、find、binary_search、lower_bound、upper_bound、equal_range</strong></h3><p><img src="https://mmbiz.qpic.cn/mmbiz_png/JeibBY5FJRBGd59vrcic9askGRPZFdnoy72pG5oTCZUqAZoibnpGj4E4iaqPxCBfcTRA2PGz3vxuhXfrAypicSN1pkA/640?wx_fmt=png"></p>
<h3 id="30考虑使用函数对象而不是函数作为-STL-算法的参数"><a href="#30考虑使用函数对象而不是函数作为-STL-算法的参数" class="headerlink" title="30考虑使用函数对象而不是函数作为 STL 算法的参数"></a><strong>30考虑使用函数对象而不是函数作为 STL 算法的参数</strong></h3><p>a) 现在一般都是使用 lambda 表达式作为 STL 算法参数</p>
<p>- EOF -</p>
<p>推荐阅读  点击标题可跳转</p>
<p>1、<a href="http://mp.weixin.qq.com/s?__biz=MzAxNDI5NzEzNg==%5C&mid=2651165473%5C&idx=1%5C&sn=e63fd504c3c362dc75abea90bda3faa8%5C&chksm=8064427eb713cb68d5c5f3bfd41c6c590b43184e2809322a73d96f84898da58cdeac558861ec%5C&scene=21#wechat_redirect">C++ STL 容器如何解决线程安全的问题？</a></p>
<p>2、<a href="http://mp.weixin.qq.com/s?__biz=MzAxNDI5NzEzNg==%5C&mid=2651162763%5C&idx=1%5C&sn=daa0252ac07f43edbf5110aa0d23d68a%5C&chksm=806459d4b713d0c21632a071be211689d4b65bb90bd07dc4aaa1b82124bc3dc059ece9feef26%5C&scene=21#wechat_redirect">为何某些公司不允许使用 C++ STL？</a></p>
<p>3、<a href="http://mp.weixin.qq.com/s?__biz=MzAxNDI5NzEzNg==%5C&mid=2651166504%5C&idx=1%5C&sn=75293ce7ba3f37a319a86f23e3a9dd9b%5C&chksm=80644677b713cf61a7aec4b415a8108fcc2b1cbda7a52ddd62b2dc2a2b6bbe6fb73cc5031fef%5C&scene=21#wechat_redirect">STL 中有哪些副作用或稍不注意会产生性能开销的地方？</a></p>
<p><a href="https://mp.weixin.qq.com/s/zGenVqpJ2L7jV7C-8ObYXQ">https://mp.weixin.qq.com/s/zGenVqpJ2L7jV7C-8ObYXQ</a></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>c++</category>
        <category>boost</category>
      </categories>
  </entry>
  <entry>
    <title>Boost 库编译指南</title>
    <url>/2024/07/22/Boost%E5%BA%93%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>Boost 库是为 C++语言标准库提供扩展的一些 C++程序库的总称，由 Boost 社区组织开发、维护。Boost 库可以与 C++标准库完美共同工作，并且为其提供扩展功能。</p>
<span id="more"></span>
<h3 id="下载boost库"><a href="#下载boost库" class="headerlink" title="下载boost库"></a>下载boost库</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1.下载</span><br><span class="line">wget https://dl.bintray.com/boostorg/release/1.64.0/source/boost_1_64_0.tar.gz</span><br><span class="line"></span><br><span class="line">2.解压</span><br><span class="line">tar zxvf boost_1_64_0.tar.gz</span><br><span class="line">cd boost_1_64_0.tar.gz</span><br><span class="line"></span><br><span class="line">3.配置</span><br><span class="line">./bootstrap.sh --with-libraries=all --with-toolset=gcc</span><br></pre></td></tr></table></figure>

<ul>
<li>–with-libraries指定编译哪些boost库，all的话就是全部编译，只想编译部分库的话就把库的命称写上，之间用 , 号分隔即可，可指定的库下面介绍。–with-toolset指定编译时使用哪种编译器，Linux下使用gcc即可，如果系统中安装了多个版本的gcc，在这里可以指定gcc的版本，比如–with-toolset&#x3D;gcc-4.4</li>
<li>boost中的常用的库有</li>
</ul>
<table>
<thead>
<tr>
<th>库名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>atomic</td>
<td>保证多线程的访问不会导致数据竞争</td>
</tr>
<tr>
<td>chrono</td>
<td>时间库</td>
</tr>
<tr>
<td>context</td>
<td></td>
</tr>
<tr>
<td>coroutine</td>
<td></td>
</tr>
<tr>
<td>time</td>
<td>时间库</td>
</tr>
<tr>
<td>exception</td>
<td></td>
</tr>
<tr>
<td>filesystem</td>
<td>可移植文件系统库</td>
</tr>
<tr>
<td>graph</td>
<td></td>
</tr>
<tr>
<td>iostreams</td>
<td></td>
</tr>
<tr>
<td>locale</td>
<td></td>
</tr>
<tr>
<td>log</td>
<td></td>
</tr>
<tr>
<td>math</td>
<td></td>
</tr>
<tr>
<td>mpi</td>
<td></td>
</tr>
<tr>
<td>program_options</td>
<td></td>
</tr>
<tr>
<td>python</td>
<td></td>
</tr>
<tr>
<td>random</td>
<td>随机数生成</td>
</tr>
<tr>
<td>regex</td>
<td>正则表达式库</td>
</tr>
<tr>
<td>serialization</td>
<td>序列化库</td>
</tr>
<tr>
<td>signals</td>
<td></td>
</tr>
<tr>
<td>system</td>
<td></td>
</tr>
<tr>
<td>test</td>
<td></td>
</tr>
<tr>
<td>thread</td>
<td>可移植C++线程库</td>
</tr>
<tr>
<td>wave</td>
<td></td>
</tr>
</tbody></table>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./b2</span><br><span class="line"></span><br><span class="line">To adjust configuration, edit &#x27;project-config.jam&#x27;.</span><br><span class="line">Further information:</span><br><span class="line"></span><br><span class="line">   - Command line help:</span><br><span class="line">     ./b2 --help</span><br><span class="line"></span><br><span class="line">   - Getting started guide: </span><br><span class="line">     http://www.boost.org/more/getting_started/unix-variants.html</span><br><span class="line"></span><br><span class="line">   - Boost.Build documentation:</span><br><span class="line">     http://www.boost.org/build/doc/html/index.html</span><br><span class="line"></span><br><span class="line">     //看到如上所示即成功</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1. 开始编译</span><br><span class="line">./b2 toolset=gcc </span><br><span class="line"></span><br><span class="line">sudo ./b2 install --prefix=/usr ##--prefix=/usr用来指定boost的安装目录，</span><br><span class="line">不加此参数的话默认的头文件在/usr/local/include/boost目录下，</span><br><span class="line">库文件在/usr/local/lib/目录下。</span><br><span class="line">这里把安装目录指定为--prefix=/usr</span><br><span class="line">则boost会直接安装到系统头文件目录和库文件目录下，可以省略配置环境变量。</span><br><span class="line">我这里把boost安装在/usr/local/boost目录下</span><br></pre></td></tr></table></figure>

<p>编译完成后需要配置下环境变量。否则在使用的时候会找到不头文件和库文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/profile</span><br><span class="line"></span><br><span class="line">添加以下几句</span><br><span class="line">export CPLUS_INCLUDE_PATH=/usr/local/boost/include/:$CPLUS_INCLUDE_PATH</span><br><span class="line">export LIBRARY_PATH=/usr/local/boost/lib/:$LIBRARY_PATH</span><br><span class="line">export LD_LIBRARY_PATH=/usr/local/boost/lib/:$LD_LIBRARY_PATH</span><br></pre></td></tr></table></figure>

<p>然后执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br><span class="line">sudo ldconfig </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
        <category>c++</category>
        <category>boost</category>
      </categories>
  </entry>
  <entry>
    <title>C++ CRTP</title>
    <url>/2024/07/22/C++%20CRTP/</url>
    <content><![CDATA[<p>C++ CRTP</p>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>CRTP的全程是 <code>Curiously Recurring Template Pattern</code> 中文翻译成 <code>奇异递归模板模式,</code> <strong>常用于实现编译时多态（静态多态），与运行时多态（通过虚函数实现）相对。这种模式通过基类模板和派生类的相互作用实现，允许在编译时进行方法的调用决议，从而提高效率</strong></p>
<span id="more"></span>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span>&#123; </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">interface</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 静态地调用派生类的方法</span></span><br><span class="line">        <span class="built_in">static_cast</span>&lt;T*&gt;(<span class="keyword">this</span>)-&gt;<span class="built_in">implementation</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">implementation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 基类的实现，可以被覆盖</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Base implementation&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base1</span>:<span class="keyword">public</span> Base&lt;Base1&gt; &#123;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">implementation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 派生类的具体实现</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Derived implementation&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="CRTP-优点"><a href="#CRTP-优点" class="headerlink" title="CRTP 优点"></a>CRTP 优点</h2><p>通过 <code>CRTP</code> 我们可以实现不依赖虚函数实现多态，这种方式没有虚函数的调用，解决了虚函数的开销，性能更好，同时，派生类没有实现某个必要的函数，编译器可以直接报错，提高代码安全性。</p>
<h2 id="CRTP-析构和删除"><a href="#CRTP-析构和删除" class="headerlink" title="CRTP 析构和删除"></a>CRTP 析构和删除</h2><p>在CRTP 中，我们通过将基类析构函数声明为虚函数，通过基类指针删除派生类对象时，会自动调用派生类的析构函数，进而确保派生类对象的资源得到正确释放</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">template&lt;typename T&gt;</span><br><span class="line">class Base &#123;</span><br><span class="line">public:</span><br><span class="line">    virtual ~Base() &#123;  // 将析构函数声明为虚函数</span><br><span class="line">        std::cout &lt;&lt; &quot;Base::~Base()&quot; &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class Derived : public Base&lt;Derived&gt; &#123;</span><br><span class="line">public:</span><br><span class="line">    ~Derived() override &#123;</span><br><span class="line">        std::cout &lt;&lt; &quot;Derived::~Derived()&quot; &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    Base&lt;Derived&gt;* b = new Derived; </span><br><span class="line">    delete b; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="CRTP-的实现"><a href="#CRTP-的实现" class="headerlink" title="CRTP 的实现"></a>CRTP 的实现</h2><h3 id="统计派生类数量"><a href="#统计派生类数量" class="headerlink" title="统计派生类数量"></a>统计派生类数量</h3><p>第一个例子是对象的注册管理，对于一个基类，假如我们要统计某个基类所有派生类的对象的数量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">// 基类模板</span><br><span class="line">template &lt;typename Derived&gt;</span><br><span class="line">class Counter &#123;</span><br><span class="line">private:</span><br><span class="line">    static int count;  // 用于统计派生类对象的数量</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    Counter() &#123;</span><br><span class="line">        ++count;  // 在每个派生类对象构造时增加计数</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Counter(const Counter&amp;) &#123;</span><br><span class="line">        ++count;  // 拷贝构造时也需要增加计数</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual ~Counter() &#123;&#125;  // 虚析构函数，确保派生类的析构函数被调用</span><br><span class="line"></span><br><span class="line">    static int getCount() &#123;</span><br><span class="line">        return count;  // 静态成员函数，返回创建的对象数量</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 初始化静态成员变量</span><br><span class="line">template &lt;typename Derived&gt;</span><br><span class="line">int Counter&lt;Derived&gt;::count = 0;</span><br><span class="line"></span><br><span class="line">// 派生类1</span><br><span class="line">class Cat : public Counter&lt;Cat&gt; &#123;</span><br><span class="line">    // 特定于Cat的成员和函数</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 派生类2</span><br><span class="line">class Dog : public Counter&lt;Dog&gt; &#123;</span><br><span class="line">    // 特定于Dog的成员和函数</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    Cat cat1;</span><br><span class="line">    Cat cat2;</span><br><span class="line">    Dog dog1;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; &quot;Number of Cats created: &quot; &lt;&lt; Cat::getCount() &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; &quot;Number of Dogs created: &quot; &lt;&lt; Dog::getCount() &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>分别打印2和1，基类 Counter 被设计为一个模板类，接受一个类型参数 Derived，这个类型参数指定了将要继承这个基类的派生类。在 Counter 类中，有一个静态成员变量 count：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> count;</span><br></pre></td></tr></table></figure>

<p>这个静态成员变量用于跟踪派生类的实例数量。关键点是，每个具体化的模板实例拥有自己的 count 变量。这意味着 Counter<Cat> 和 Counter<Dog> 分别拥有各自独立的 count 静态成员变量。<strong>这是因为模板在C++中的工作机制：每当模板被一个新的具体类型实例化时，其静态成员也会被复制一份，因此每种类型的 Counter 都有其自己的 count</strong></p>
<h3 id="通过CRTP来实现访问者模式"><a href="#通过CRTP来实现访问者模式" class="headerlink" title="通过CRTP来实现访问者模式"></a>通过CRTP来实现访问者模式</h3><p>CRTP（Curiously Recurring Template Pattern）可以用来在C++中实现访问者模式，特别是当你希望在编译时保持类型安全而不引入运行时的多态开销时。使用CRTP，我们可以让访问者直接调用适当类型的方法，而不是依赖虚函数。</p>
<p>访问者模式通常用于操作一个复杂对象结构（如复合模式），允许你对这些对象进行操作而无需修改它们的类。以下是如何结合CRTP和访问者模式的一个示例</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 前向声明</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteElementA</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteElementB</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问者基类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Visitor</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">visit</span><span class="params">(ConcreteElementA* element)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">visit</span><span class="params">(ConcreteElementB* element)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Visitor</span>() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 元素基类模板</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Element</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 接受访问者的方法，由具体元素实现</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">accept</span><span class="params">(Visitor* visitor)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Element</span>() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体元素A</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteElementA</span> : <span class="keyword">public</span> Element&lt;ConcreteElementA&gt; &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">accept</span><span class="params">(Visitor* visitor)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        visitor-&gt;<span class="built_in">visit</span>(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">operationA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;ConcreteElementA Operation.\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体元素B</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteElementB</span> : <span class="keyword">public</span> Element&lt;ConcreteElementB&gt; &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">accept</span><span class="params">(Visitor* visitor)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        visitor-&gt;<span class="built_in">visit</span>(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">operationB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;ConcreteElementB Operation.\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>最后，我们演示如何使用这些类：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ConcreteElementA elementA;</span><br><span class="line">    ConcreteElementB elementB;</span><br><span class="line">    ConcreteVisitor visitor;</span><br><span class="line"></span><br><span class="line">    elementA.<span class="built_in">accept</span>(&amp;visitor);</span><br><span class="line">    elementB.<span class="built_in">accept</span>(&amp;visitor);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
        <category>c++</category>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>C++ Pimpl</title>
    <url>/2024/07/22/C++%20Pimpl/</url>
    <content><![CDATA[<h2 id="编译期封装"><a href="#编译期封装" class="headerlink" title="编译期封装"></a>编译期封装</h2><p>如果程序从一个以前版本的库动态链接到新版本的库之后，能够继续正常运行，而不需要重新编译，那么我们就说这个库是二进制兼容的。<br>如果一个程序需要重新编译来运行一个新版本的库，但是不需要对程序的源代码进一步的修改，这个库就是源代码兼容的。<br>如果不确保版本之间的二进制兼容性，人们将被迫提供静态链接的二进制文件。静态二进制文件不好，因为它们浪费资源（尤其是内存），不能让程序从库中错误修正或扩展中受益。要保证二进制兼容性，就得尽量让类不包含私有变量<br>– <code>Pimpl</code>（Pointer to Implementation）意思为具体实现的指针，它通过一个私有的成员指针，将指针所指向的类的内部实现和数据进行隐藏。</p>
<span id="more"></span>  


<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>在看Qt源码时，Qt的源码中有大量的使用<code>Pimpl</code>,Qt的风格就保证了这一点，不信可以看QObject的源码，你会惊讶地发现它竟然只有一个成员变量QScopedPointer d_ptr;。QObject的大小是8,除了虚函数表指针需要的4个字节以外,另外的4个字节就是这个d_ptr。QObjectData是包含所有数据的结构体，这个结构体的大小可以随意改变而不会产生副作用，应用程序只使用相关的公有类即QObject，d_ptr就叫做d指针。其中源码中的d 指针和q 指针都是用<code>Pimpl</code>来实现的。其中具体实现的原理可以参考<a href="https://wiki.qt.io/D-Pointer" title="D指针的实现">D指针的实现</a>，参考Qt中的实现，我们来封装自己的。</p>
<p>global.h</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="type">static</span> <span class="keyword">inline</span> T*<span class="title">qGetPtrHelper</span><span class="params">(T* ptr)</span></span>&#123;<span class="keyword">return</span> ptr;&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Wrapper&gt; <span class="type">static</span> <span class="keyword">inline</span> <span class="keyword">typename</span> Wrapper::pointer <span class="title">qGetPtrHelper</span><span class="params">(<span class="type">const</span> Wrapper&amp; p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> p.<span class="built_in">get</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//reinterpret_cast &lt; new_type &gt; ( expression )</span></span><br><span class="line"><span class="comment">// 前置隐藏实现类  </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> C_CLASS_PRIVATE(Class) \     </span></span><br><span class="line">    <span class="keyword">inline</span> Class##<span class="function">Private* <span class="title">d_func</span><span class="params">()</span> <span class="keyword">noexcept</span>\</span></span><br><span class="line"><span class="function">    </span>&#123;<span class="keyword">return</span> <span class="built_in">reinterpret_cast</span>&lt;Class##Private*&gt;(<span class="built_in">qGetPtrHelper</span>(d_ptr));&#125; \</span><br><span class="line">    <span class="keyword">inline</span> <span class="type">const</span> Class##<span class="function">Private* <span class="title">d_func</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">noexcept</span> \</span></span><br><span class="line"><span class="function">    </span>&#123;<span class="keyword">return</span> <span class="built_in">reinterpret_cast</span>&lt;<span class="type">const</span> Class##Private* &gt;(<span class="built_in">qGetPtrHelper</span>(d_ptr));&#125;\</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">Class</span>##Private;</span><br><span class="line"></span><br><span class="line"><span class="comment">// noexcept  告诉编译器这段代码不会出现异常 不需要特殊优化处理</span></span><br><span class="line"><span class="comment">// 对外接口类</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> C_CLASS_PUBLIC(Class) \    </span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> Class* <span class="title">q_func</span><span class="params">()</span> <span class="keyword">noexcept</span> </span>&#123;<span class="keyword">return</span> <span class="built_in">static_cast</span>&lt;Class*&gt;(q_ptr);&#125; \</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">const</span> Class* <span class="title">q_func</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">noexcept</span> </span>&#123;<span class="keyword">return</span> <span class="built_in">static_cast</span>&lt;<span class="type">const</span> Class* &gt;(q_ptr);&#125;\</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">Class</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> C_P(Class) Class##Private* const d = d_func()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> C_Q(Class) Class* const q = q_func()</span></span><br></pre></td></tr></table></figure>

<p>product.h</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#pragma once</span><br><span class="line"></span><br><span class="line">#include &quot;global.h&quot;</span><br><span class="line">#include &lt;memory&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">class ProductPrivate;</span><br><span class="line"></span><br><span class="line">class Product</span><br><span class="line">&#123;</span><br><span class="line">    C_CLASS_PRIVATE(Product);</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    explicit Product(int num = 1);</span><br><span class="line">    ~Product();</span><br><span class="line">    string getName() const;</span><br><span class="line">    void setName(const string &amp;name);</span><br><span class="line">    float getPrice() const;</span><br><span class="line">    void setPrice(float price);</span><br><span class="line">    //int getNum()&#123; return num;&#125;;</span><br><span class="line"></span><br><span class="line">protected:</span><br><span class="line">    //int num = 5;</span><br><span class="line"></span><br><span class="line">protected:</span><br><span class="line">    // 定义实现类指针</span><br><span class="line">    std::unique_ptr&lt;ProductPrivate&gt; d_ptr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>product.cpp</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &quot;product.h&quot;</span><br><span class="line"></span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;memory&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">class ProductPrivate</span><br><span class="line">&#123;</span><br><span class="line">    C_CLASS_PUBLIC(Product)</span><br><span class="line">public:</span><br><span class="line">    ProductPrivate()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~ProductPrivate()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    string getName() const &#123; </span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bool setName(const string&amp; names)&#123;</span><br><span class="line">        this-&gt;name = names;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void printNum()&#123;</span><br><span class="line">        C_Q(Product);</span><br><span class="line">        //std::cout&lt;&lt;&quot;&quot;&lt;&lt;q-&gt;num;</span><br><span class="line">    &#125;</span><br><span class="line">    string name;</span><br><span class="line">    Product* q_ptr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Product::Product(int num)</span><br><span class="line">&#123;</span><br><span class="line">    d_ptr = make_unique&lt;ProductPrivate&gt;();</span><br><span class="line">    // 这里为了让对方可以使用自己的变量，将对方类中的q_ptr来指向自己</span><br><span class="line">    d_ptr-&gt;q_ptr = this; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">string Product::getName() const</span><br><span class="line">&#123;</span><br><span class="line">    C_P(const Product);</span><br><span class="line">    return d-&gt;getName();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Product::setName(const string &amp;name)</span><br><span class="line">&#123;</span><br><span class="line">    C_P(Product);</span><br><span class="line">    d-&gt;printNum();</span><br><span class="line">    d-&gt;setName(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">float Product::getPrice() const</span><br><span class="line">&#123;</span><br><span class="line">    // Q_D(const Product);</span><br><span class="line">    // return d-&gt;price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Product::setPrice(float price)</span><br><span class="line">&#123;</span><br><span class="line">    // Q_D(Product);</span><br><span class="line">    // d-&gt;price = price;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中，参考Qt中的实现，实现了<code>C_P</code>和<code>C_Q</code> ,下面是测试文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &quot;product.h&quot;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    Product * p = new Product();</span><br><span class="line">    p-&gt;setName(&quot;hello &quot;);</span><br><span class="line"></span><br><span class="line">    std::cout&lt;&lt;&quot; &quot;&lt;&lt;p-&gt;getName()&lt;&lt;std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以后在使用的时候，我们可以直接将global.h文件引入到我们自己的工程里面，然后使用<code>Pimpl</code>。<br>d指针的优点：  </p>
<ol>
<li>隐藏实现细节  </li>
<li>头文件中没有任何实现细节，可以作为API使用。  </li>
<li>由于原本在头文件的实现部分转移到了源文件，所以编译速度有所提高。  </li>
<li>实现二进制兼容性，避免重新编译</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
        <category>c++</category>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>C++ Poco库使用</title>
    <url>/2024/07/22/C++%20Poco%E5%BA%93%E7%9A%84%E7%BC%96%E8%AF%91%E5%92%8C%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="Poco-的编译和安装"><a href="#Poco-的编译和安装" class="headerlink" title="Poco 的编译和安装"></a>Poco 的编译和安装</h1><h2 id="ubuntu-下的安装和编译"><a href="#ubuntu-下的安装和编译" class="headerlink" title="ubuntu 下的安装和编译"></a>ubuntu 下的安装和编译</h2><ul>
<li>完整的安装需要下载MySql和OpenSSL</li>
<li>安装OpenSSL</li>
</ul>
<span id="more"></span>


<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1.sudo apt-get install openssl;</span><br><span class="line">2.sudo apt-get install libssl-dev;</span><br></pre></td></tr></table></figure>

<ul>
<li>安装完这两个才可以，只安装一个编译会报错</li>
<li>然后执行</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./configure --no-tests --no-samples  --prefix=/usr/local/Poco --static --shared</span><br></pre></td></tr></table></figure>

<ul>
<li>其中 &#x2F;usr&#x2F;local&#x2F;Poco为编译好后头文件和库的安装位置</li>
<li>然后 <code>make</code> <code>make install</code></li>
<li>到此 Poco 安装完成<br>  安装完成后可以去&#x2F;usr&#x2F;local&#x2F;Poco 下查看安装的库</li>
</ul>
<p>利用QT Creator编译程序时，在.pro文件中加入附加库<br>LIBS +&#x3D; -L &#x2F;usr&#x2F;local&#x2F;lib&#x2F; -lPocoFoundation -lPocoNet -lPocoUtil</p>
<p>这里自己需要哪个模块链接哪个模块</p>
<p>.&#x2F;configure –omit&#x3D;Data&#x2F;ODBC,Data&#x2F;MySQL,NetSSL_OpenSSL –prefix&#x3D;&#x2F;usr&#x2F;local 不编译OBDC MySQL 和NetSSL_OpenSSL .h文件和<br>库文件放在&#x2F;usr&#x2F;local 目录下。</p>
<h2 id="ARM版本的编译和安装"><a href="#ARM版本的编译和安装" class="headerlink" title="ARM版本的编译和安装"></a>ARM版本的编译和安装</h2><ul>
<li>编译安装Poco<br>  源码下载地址 <a href="https://pocoproject.org/releases/poco-1.7.8/poco-1.7.8-all.tar.gz" title="poco 下载地址">poco 下载地址</a></li>
<li>解压 <code>tar -xzvf poco-1.7.8-all.tar.gz</code><br>  <code>cd poco-1.7.8-all</code><br>  <code>./configure --config=ARM-Linux --no-tests --omit=Data,Crypto,NetSSL_OpenSSL --prefix=/home/ning/lib</code><br>  <code>make</code><br>  <code>make install</code><br>  到此Poco就交叉编译安装完成了。</li>
</ul>
<p>我用的ARM 环境是 AM335x</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>c++</category>
        <category>Poco</category>
      </categories>
  </entry>
  <entry>
    <title>C++ protobuf</title>
    <url>/2024/07/22/C++%20google%20protobuf%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h6 id="protobuf-的介绍一大堆，这里就不做详细的介绍了。"><a href="#protobuf-的介绍一大堆，这里就不做详细的介绍了。" class="headerlink" title="protobuf 的介绍一大堆，这里就不做详细的介绍了。"></a>protobuf 的介绍一大堆，这里就不做详细的介绍了。</h6><span id="more"></span>


<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>-从<a href="https://developers.google.com/protocol-buffers" title="官网">官网</a>直接下载protobuf 安装到本地<br>– ubuntu 安装方法<br>1. <code>sudo apt-get install autoconf automake libtool curl make g++ unzip</code> centos安装方式和ubuntu一样，下载安装上面的安装包就行<br>2. 编译安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/protocolbuffers/protobuf.git</span><br><span class="line">cd protobuf</span><br><span class="line">git submodule update --init --recursive</span><br><span class="line">./autogen.sh</span><br><span class="line">./configure  --prefix=/usr/local/protobuf   ##prefix 是配置编译目录,不配置会安装在默认的目录</span><br><span class="line"> make</span><br><span class="line"> make check</span><br><span class="line"> sudo make install</span><br><span class="line"> sudo ldconfig # 链接动态库.</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>如果配置了安装目录需要设置PATH<br> 在&#x2F;etc&#x2F;profile 文件中增加下列几项</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ vi /etc/profile</span><br><span class="line">export PATH=$PATH:/usr/local/protobuf/bin/</span><br><span class="line">export LIBRARY_PATH=/usr/local/protobuf/lib/:$LIBRARY_PATH</span><br><span class="line">export LD_LIBRARY_PATH=/usr/local/protobuf/lib/:$LD_LIBRARY_PATH</span><br><span class="line">export PKG_CONFIG_PATH=/usr/local/protobuf/lib/pkgconfig/</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>配置完PATH 使用source &#x2F;etc&#x2F;profile更新环境变量。有的linux需要重启。如果source &#x2F;etc&#x2F;profile没用就重启下。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ protoc --version</span><br><span class="line">$ libprotoc 3.13.0</span><br></pre></td></tr></table></figure>

<p>如果能正确显示出版本号就没问题。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>这里使用vscode编辑器</p>
<ul>
<li><p>定义自己的字段，文件后缀为.protoc<br>  <a href="https://isrootblog-1251140236.cos.ap-beijing.myqcloud.com/uPic/ciVQeB.png" title=".proto"><img src="https://isrootblog-1251140236.cos.ap-beijing.myqcloud.com/uPic/ciVQeB.png" alt=".proto" title=".proto"></a><br>  <strong>具体的文件内容说明请查看</strong><a href="https://developers.google.com/protocol-buffers/docs/overview">文档说明</a></p>
</li>
<li><p>使用protoc进行编译<br>  <code>protoc -I=./ --cpp_out=./ ./main.proto</code> main.proto 为刚才的.proto文件名称<br>  编译完成后会在当前目录看见两个后缀为.pb.cc 和.pb.h的文件，编写一个main 文件测试下<br>  <a href="https://isrootblog-1251140236.cos.ap-beijing.myqcloud.com/uPic/8hyxdn.png" title=".proto"><img src="https://isrootblog-1251140236.cos.ap-beijing.myqcloud.com/uPic/8hyxdn.png" alt=".proto" title=".proto"></a></p>
</li>
<li><p>使用g++ 编译<br>  <code>g++ -g -o main ./mian.cpp ./main.pb.cc -I/usr/local/protobuf/include -L/usr/local/protobuf/lib -lprotobuf -pthread</code></p>
</li>
</ul>
<h4 id="这里记录下自己的cmake-文件"><a href="#这里记录下自己的cmake-文件" class="headerlink" title="这里记录下自己的cmake 文件"></a>这里记录下自己的cmake 文件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 3.6.2)</span><br><span class="line"></span><br><span class="line">add_definitions(-std=c++11)</span><br><span class="line"># 设置头文件目录</span><br><span class="line">set(INC_DIR /usr/local/protobuf/include/)</span><br><span class="line"># 设置protobuf目录</span><br><span class="line">set(LIB_DIR /usr/local/protobuf/lib/)</span><br><span class="line"></span><br><span class="line">project(main)</span><br><span class="line"></span><br><span class="line">include_directories($&#123;INC_DIR&#125;)</span><br><span class="line"></span><br><span class="line">set(SRC_LIST main.cpp main.pb.cc)</span><br><span class="line"></span><br><span class="line">add_executable(main $&#123;SRC_LIST&#125;)</span><br><span class="line"></span><br><span class="line">target_link_libraries(main protobuf pthread)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
        <category>c++</category>
        <category>protobuf</category>
      </categories>
  </entry>
  <entry>
    <title>C++ List</title>
    <url>/2024/07/22/C++%20list%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<ul>
<li>遍历并且删除节点  <span id="more"></span>   


  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>   </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;   </span><br><span class="line">	<span class="type">int</span> a[<span class="number">12</span>] = &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">10</span>&#125;;   </span><br><span class="line">	<span class="function">list&lt;<span class="type">int</span>&gt; <span class="title">li</span><span class="params">(a, a + <span class="number">12</span>)</span></span>;   <span class="comment">//遍历删除值为5的节点   </span></span><br><span class="line">	<span class="keyword">for</span> (list&lt;<span class="type">int</span>&gt;:: iterator it = li.<span class="built_in">begin</span>(); it != li.<span class="built_in">end</span>();) &#123;   </span><br><span class="line">		<span class="keyword">if</span> (*it == <span class="number">5</span>)&#123;   </span><br><span class="line">			li.<span class="built_in">erase</span>(it++); <span class="comment">// 删除节点，并将 it 更新到下一个界面   </span></span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;   </span><br><span class="line">			++it;   </span><br><span class="line">		&#125;   </span><br><span class="line">	&#125;</span><br><span class="line">    <span class="keyword">for</span> (list&lt;<span class="type">int</span>&gt;:: iterator it = li.<span class="built_in">begin</span>(); it != li.<span class="built_in">end</span>(); ++it) &#123;   </span><br><span class="line">		cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;   </span><br><span class="line">	&#125;   </span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>c++</category>
        <category>STL</category>
      </categories>
  </entry>
  <entry>
    <title>C++ override 关键字</title>
    <url>/2024/07/22/C++%20override/</url>
    <content><![CDATA[<p><strong>override</strong> 字面意思为覆盖的<br>override 为C++11新增加的关键字，在C++11中 override 的作为为防止虚函数未被正确的调用，下面我们来看两段代码</p>
<span id="more"></span>  

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;memory&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">class Base</span><br><span class="line">&#123;</span><br><span class="line">    public:</span><br><span class="line">     virtual void functionA(int arg) const &#123; </span><br><span class="line">     cout &lt;&lt; &quot;This is Base::functionA&quot; &lt;&lt; endl;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;;</span><br><span class="line">class Derived : public Base</span><br><span class="line">&#123;</span><br><span class="line">    public:</span><br><span class="line">     virtual void functionA(long arg) const  &#123;</span><br><span class="line">    cout &lt;&lt; &quot;This is Derived::functionA&quot; &lt;&lt; endl; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    // Base pointer b points to a Derived class object.</span><br><span class="line">    shared_ptr&lt;Base&gt;b = make_shared&lt;Derived&gt;();</span><br><span class="line">    // Call virtual functionA through Base pointer.</span><br><span class="line">    b-&gt;functionA(99);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在main函数中，我们声明定义了Base类指针 b 指向了Derived,然后通过b指针调用了 functionA函数，按照对虚函数的理解，我们程序执行完以后应该打印<code>This is Derived::functionA&quot;</code>,但实际程序执行完后打印的是<code>This is Base::functionA</code>,这是因为两个函数有不同的形参，<strong>Derived类中的functionA函数只不过是对基类的functionA的函数的重载</strong>，如果想要正确的调用Derived类中的函数，我们需要在函数后面加上<strong>override</strong>关键字，<strong>override 关键字告诉编译器，该函数应覆盖基类中的函数。如果该函数实际上没有覆盖任何函数，则会导致编译器错误。</strong></p>
<pre><code>#include &lt;iostream&gt;
#include &lt;memory&gt;
using namespace std;

class Base
&#123;
       public:
           virtual void functionA(int arg) const &#123; 
           cout &lt;&lt; &quot;This is Base::functionA&quot; &lt;&lt; endl;
           &#125;
&#125;;
class Derived : public Base
&#123;
       public:
       // 注意 这里函数参数如果还是long 类型，编译器在编译的时候会报错
       virtual void functionA(int arg) const override &#123; 
       cout &lt;&lt; &quot;This is Derived::functionA&quot; &lt;&lt; endl; 
       &#125;
&#125;;
int main()
&#123;
    // Base pointer b points to a Derived class object.
    shared_ptr&lt;Base&gt;b = make_shared&lt;Derived&gt;();
    // Call virtual functionA through Base pointer.
    b-&gt;functionA(99);
    return 0;
&#125;
```override 字面意思为 覆盖的
override 为C++11新增加的关键字，在C++11中 override 的作为为防止虚函数未被正确的调用，下面我们来看两段代码

#include &lt;iostream&gt;
#include &lt;memory&gt;
using namespace std;

class Base
&#123;
    public:
     virtual void functionA(int arg) const &#123; 
     cout &lt;&lt; &quot;This is Base::functionA&quot; &lt;&lt; endl;
     &#125;
&#125;;
class Derived : public Base
&#123;
    public:
     virtual void functionA(long arg) const  &#123;
    cout &lt;&lt; &quot;This is Derived::functionA&quot; &lt;&lt; endl; 
    &#125;
&#125;;
int main()
&#123;
    // Base pointer b points to a Derived class object.
    shared_ptr&lt;Base&gt;b = make_shared&lt;Derived&gt;();
    // Call virtual functionA through Base pointer.
    b-&gt;functionA(99);
    return 0;
&#125;
在main函数中，我们声明定义了Base类指针 b 指向了Derived,然后通过b指针调用了 functionA函数，按照对虚函数的理解，我们程序执行完以后应该打印This is Derived::functionA&quot;,但实际程序执行完后打印的是This is Base::functionA,这是因为两个函数有不同的形参，Derived类中的functionA函数只不过是对基类的functionA的函数的重载，如果想要正确的调用Derived类中的函数，我们需要在函数后面加上override关键字，override 关键字告诉编译器，该函数应覆盖基类中的函数。如果该函数实际上没有覆盖任何函数，则会导致编译器错误。

#include &lt;iostream&gt;
#include &lt;memory&gt;
using namespace std;

class Base
&#123;
       public:
           virtual void functionA(int arg) const &#123; 
           cout &lt;&lt; &quot;This is Base::functionA&quot; &lt;&lt; endl;
           &#125;
&#125;;
class Derived : public Base
&#123;
       public:
       // 注意 这里函数参数如果还是long 类型，编译器在编译的时候会报错
       virtual void functionA(int arg) const override &#123; 
       cout &lt;&lt; &quot;This is Derived::functionA&quot; &lt;&lt; endl; 
       &#125;
&#125;;
int main()
&#123;
    // Base pointer b points to a Derived class object.
    shared_ptr&lt;Base&gt;b = make_shared&lt;Derived&gt;();
    // Call virtual functionA through Base pointer.
    b-&gt;functionA(99);
    return 0;
&#125;
</code></pre>
]]></content>
      <categories>
        <category>技术</category>
        <category>c++</category>
        <category>c++</category>
      </categories>
  </entry>
  <entry>
    <title>C++ Openssl</title>
    <url>/2024/07/22/C++%20%E4%BD%BF%E7%94%A8openssl%E8%BF%9B%E8%A1%8C%E5%8A%A0%E5%AF%86%E5%92%8Cbase64%E7%BC%96%E7%A0%81/</url>
    <content><![CDATA[<h1 id="C-使用openssl-实现加密和base64编码"><a href="#C-使用openssl-实现加密和base64编码" class="headerlink" title="C++ 使用openssl 实现加密和base64编码"></a>C++ 使用openssl 实现加密和base64编码</h1><span id="more"></span>  


<h2 id="加密函数"><a href="#加密函数" class="headerlink" title="加密函数"></a>加密函数</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 加密函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">encrypt</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *plaintext, <span class="type">int</span> plaintext_len, <span class="type">unsigned</span> <span class="type">char</span> *key,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="type">unsigned</span> <span class="type">char</span> *iv, <span class="type">unsigned</span> <span class="type">char</span> **ciphertext)</span> </span>&#123;</span><br><span class="line">    EVP_CIPHER_CTX *ctx;</span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">    <span class="type">int</span> ciphertext_len;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分配内存给密文</span></span><br><span class="line">    *ciphertext = (<span class="type">unsigned</span> <span class="type">char</span> *)<span class="built_in">malloc</span>(plaintext_len + AES_BLOCK_SIZE);</span><br><span class="line">    <span class="keyword">if</span> (*ciphertext == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建和初始化加密上下文</span></span><br><span class="line">    <span class="keyword">if</span>(!(ctx = <span class="built_in">EVP_CIPHER_CTX_new</span>())) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 如果数据不够16的倍数  是否进行填充</span></span><br><span class="line">    <span class="comment">// EVP_CIPHER_CTX_set_padding(ctx, 0);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化加密操作</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="number">1</span> != <span class="built_in">EVP_EncryptInit_ex</span>(ctx, <span class="built_in">EVP_aes_256_cbc</span>(), <span class="literal">NULL</span>, key, iv)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提供明文进行加密</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="number">1</span> != <span class="built_in">EVP_EncryptUpdate</span>(ctx, *ciphertext, &amp;len, plaintext, plaintext_len)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ciphertext_len = len;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 结束加密</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="number">1</span> != <span class="built_in">EVP_EncryptFinal_ex</span>(ctx, *ciphertext + len, &amp;len)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ciphertext_len += len;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清理</span></span><br><span class="line">    <span class="built_in">EVP_CIPHER_CTX_free</span>(ctx);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ciphertext_len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解密函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">decrypt</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *ciphertext, <span class="type">int</span> ciphertext_len, <span class="type">unsigned</span> <span class="type">char</span> *key,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="type">unsigned</span> <span class="type">char</span> *iv, <span class="type">unsigned</span> <span class="type">char</span> **plaintext)</span> </span>&#123;</span><br><span class="line">    EVP_CIPHER_CTX *ctx;</span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">    <span class="type">int</span> plaintext_len;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分配内存给明文</span></span><br><span class="line">    *plaintext = (<span class="type">unsigned</span> <span class="type">char</span> *)<span class="built_in">malloc</span>(ciphertext_len);</span><br><span class="line">    <span class="keyword">if</span> (*plaintext == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建和初始化解密上下文</span></span><br><span class="line">    <span class="keyword">if</span>(!(ctx = <span class="built_in">EVP_CIPHER_CTX_new</span>())) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// 如果数据不够16的倍数  是否进行填充</span></span><br><span class="line">    <span class="comment">// EVP_CIPHER_CTX_set_padding(ctx, 0);</span></span><br><span class="line">    <span class="comment">// 初始化解密操作</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="number">1</span> != <span class="built_in">EVP_DecryptInit_ex</span>(ctx, <span class="built_in">EVP_aes_256_cbc</span>(), <span class="literal">NULL</span>, key, iv)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提供密文进行解密</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="number">1</span> != <span class="built_in">EVP_DecryptUpdate</span>(ctx, *plaintext, &amp;len, ciphertext, ciphertext_len)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    plaintext_len = len;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 结束解密</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="number">1</span> != <span class="built_in">EVP_DecryptFinal_ex</span>(ctx, *plaintext + len, &amp;len)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    plaintext_len += len;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清理</span></span><br><span class="line">    <span class="built_in">EVP_CIPHER_CTX_free</span>(ctx);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> plaintext_len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="base64-编码和解码"><a href="#base64-编码和解码" class="headerlink" title="base64 编码和解码"></a>base64 编码和解码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Base64编码</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">base64_encode</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *input, <span class="type">int</span> length, <span class="type">char</span> **encoded)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 计算编码后的长度</span></span><br><span class="line">	<span class="comment">//在Base64编码中，每3个字节的二进制数据会被编码为4个Base64字符。</span></span><br><span class="line">	<span class="comment">//Base64编码的工作原理是将二进制数据分割成每组3个字节（也就是24位），然后这24位被分割成4组，每组6位。每组6位的数据对应一个Base64字符。</span></span><br><span class="line">	<span class="comment">//因此，如果你有n个字节的数据，那么你需要4 * ((n + 2) / 3)个字符来表示这些数据。+2是为了处理n不是3的倍数的情况，这样可以确保结果总是向上取整。</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 例如，如果你有10个字节的数据，那么你需要4 * ((10 + 2) / 3) = 16个Base64字符来表示这些数据。</span></span><br><span class="line">    <span class="type">int</span> encoded_length = <span class="number">4</span> * ((length + <span class="number">2</span>) / <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    *encoded = (<span class="type">char</span> *)<span class="built_in">malloc</span>(encoded_length + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (*encoded == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">EVP_EncodeBlock</span>((<span class="type">unsigned</span> <span class="type">char</span> *)*encoded, input, length);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> encoded_length; <span class="comment">// 返回编码后的长度</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Base64解码</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">base64_decode</span><span class="params">(<span class="type">char</span> *input, <span class="type">unsigned</span> <span class="type">char</span> **decoded, <span class="type">int</span> *decoded_length)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> length = <span class="built_in">strlen</span>(input);</span><br><span class="line">    *decoded = (<span class="type">unsigned</span> <span class="type">char</span> *)<span class="built_in">malloc</span>(length);</span><br><span class="line">    <span class="keyword">if</span> (*decoded == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    *decoded_length = <span class="built_in">EVP_DecodeBlock</span>(*decoded, (<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *)input, length);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 减去填充字符的数量</span></span><br><span class="line">    <span class="keyword">if</span> (input[length - <span class="number">1</span>] == <span class="string">&#x27;=&#x27;</span>) (*decoded_length)--;</span><br><span class="line">    <span class="keyword">if</span> (input[length - <span class="number">2</span>] == <span class="string">&#x27;=&#x27;</span>) (*decoded_length)--;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// 成功</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="测试程序"><a href="#测试程序" class="headerlink" title="测试程序"></a>测试程序</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int main() &#123;</span><br><span class="line">    // 原始字符串</span><br><span class="line">    unsigned char *original_string = (unsigned char *)&quot;中文例子&quot;;</span><br><span class="line">    unsigned char *ciphertext;</span><br><span class="line">    unsigned char *decryptedtext;</span><br><span class="line">    char *encoded;</span><br><span class="line">    unsigned char *decoded;</span><br><span class="line">    int decryptedtext_len, ciphertext_len, encoded_len, decoded_len;</span><br><span class="line"></span><br><span class="line">    // 密钥和初始化向量</span><br><span class="line">    // 这些通常是随机生成的，这里为了示例使用了固定值</span><br><span class="line">    unsigned char key[] = &quot;0123456789abcdef0123456789abcdef&quot;;</span><br><span class="line">    unsigned char iv[] = &quot;abcdef9876543210&quot;;</span><br><span class="line"></span><br><span class="line">    // 加密</span><br><span class="line">    ciphertext_len = encrypt(original_string, strlen((char *)original_string), key, iv, &amp;ciphertext);</span><br><span class="line"></span><br><span class="line">    // Base64编码</span><br><span class="line">    encoded_len = base64_encode(ciphertext, ciphertext_len, &amp;encoded);</span><br><span class="line"></span><br><span class="line">    // 将编码后的数据写入文件</span><br><span class="line">    FILE *file = fopen(&quot;encoded.txt&quot;, &quot;w&quot;);</span><br><span class="line">    if (file != NULL) &#123;</span><br><span class="line">        fwrite(encoded, sizeof(char), encoded_len, file);</span><br><span class="line">        fclose(file);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // // 从文件中读取编码后的数据</span><br><span class="line">    file = fopen(&quot;encoded.txt&quot;, &quot;r&quot;);</span><br><span class="line">    char read_encoded[1024];</span><br><span class="line">    if (file != NULL) &#123;</span><br><span class="line">        fread(read_encoded, sizeof(char), 1024, file);</span><br><span class="line">        fclose(file);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Base64解码</span><br><span class="line">    base64_decode(read_encoded, &amp;decoded, &amp;decoded_len);</span><br><span class="line"></span><br><span class="line">    // 解密</span><br><span class="line">    decryptedtext_len = decrypt(decoded, decoded_len, key, iv, &amp;decryptedtext);</span><br><span class="line"></span><br><span class="line">    // 输出原始字符串和解码后的字符串进行比较</span><br><span class="line">    printf(&quot;Original: %s\n&quot;, original_string);</span><br><span class="line">    printf(&quot;Decoded: %s\n&quot;, decryptedtext);</span><br><span class="line"></span><br><span class="line">    // 检查原始字符串和解码后的字符串是否相同</span><br><span class="line">    if (strncmp((char *)original_string, (char *)decryptedtext, decryptedtext_len) == 0) &#123;</span><br><span class="line">        printf(&quot;Success: Decrypted text is the same as the original text.\n&quot;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        printf(&quot;Failure: Decrypted text is not the same as the original text.\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 清理</span><br><span class="line">    free(ciphertext);</span><br><span class="line">    free(decryptedtext);</span><br><span class="line">    free(encoded);</span><br><span class="line">    free(decoded);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
        <category>c++</category>
        <category>Openssl</category>
      </categories>
  </entry>
  <entry>
    <title>C++多线程详解</title>
    <url>/2024/07/22/C++%20%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="C-多线程详解"><a href="#C-多线程详解" class="headerlink" title="C++多线程详解"></a>C++多线程详解</h1><p>1、多线程</p>
<p>传统的C++（C++11标准之前）中并没有引入线程这个概念，在C++11出来之前，如果我们想要在C++中实现多线程，需要借助操作系统平台提供的API，比如Linux的&lt;pthread.h&gt;，或者windows下的&lt;windows.h&gt; 。</p>
<span id="more"></span>  

<p>C++11提供了语言层面上的多线程，包含在头文件<thread>中。它解决了跨平台的问题，提供了管理线程、保护共享数据、线程间同步操作、原子操作等类。C++11 新标准中引入了5个头文件来支持多线程编程，如下图所示：</p>
<p><img src="https://isrootblog-1251140236.cos.ap-beijing.myqcloud.com/uPic/202310131729028.png" alt="image-20231013172916961"></p>
<h2 id="1-1、多进程与多线程"><a href="#1-1、多进程与多线程" class="headerlink" title="1.1、多进程与多线程"></a><strong>1.1、多进程与多线程</strong></h2><ul>
<li>多进程并发</li>
</ul>
<p>使用多进程并发是将一个应用程序划分为多个独立的进程（每个进程只有一个线程），这些独立的进程间可以互相通信，共同完成任务。由于操作系统对进程提供了大量的保护机制，以避免一个进程修改了另一个进程的数据，使用多进程比使用多线程更容易写出相对安全的代码。但是这也造就了多进程并发的两个缺点：</p>
<p>NaN. 在进程间的通信，无论是使用信号、套接字，还是文件、管道等方式，其使用要么比较复杂，要么就是速度较慢或者两者兼而有之。</p>
<p>NaN. 运行多个线程的开销很大，操作系统要分配很多的资源来对这些进程进行管理。</p>
<p>当多个进程并发完成同一个任务时，不可避免的是：<strong>操作同一个数据和进程间的相互通信</strong>，上述的两个缺点也就决定了多进程的并发并不是一个好的选择。所以就引入了多线程的并发。</p>
<ul>
<li>多线程并发</li>
</ul>
<p>多线程并发指的是在同一个进程中执行多个线程。</p>
<p>优点：</p>
<p>有操作系统相关知识的应该知道，线程是轻量级的进程，每个线程可以独立的运行不同的指令序列，但是线程不独立的拥有资源，依赖于创建它的进程而存在。也就是说，同一进程中的多个线程共享相同的地址空间，可以访问进程中的大部分数据，指针和引用可以在线程间进行传递。这样，同一进程内的多个线程能够很方便的进行数据共享以及通信，也就比进程更适用于并发操作。</p>
<p>缺点：</p>
<p>由于缺少操作系统提供的保护机制，在多线程共享数据及通信时，就需要程序员做更多的工作以保证对共享数据段的操作是以预想的操作顺序进行的，并且要极力的避免死锁(deadlock)。</p>
<h2 id="1-2、多线程理解"><a href="#1-2、多线程理解" class="headerlink" title="1.2、多线程理解"></a><strong>1.2、多线程理解</strong></h2><ul>
<li>单CPU内核的多个线程。</li>
</ul>
<p>一个时间片运行一个线程的代码，并不是真正意义的并行计算。</p>
<ul>
<li>多个cpu或者多个内核</li>
</ul>
<p>可以做到真正的并行计算。</p>
<h2 id="1-3、创建线程"><a href="#1-3、创建线程" class="headerlink" title="1.3、创建线程"></a><strong>1.3、创建线程</strong></h2><p>创建线程很简单，只需要把函数添加到线程当中即可。</p>
<ul>
<li>形式1：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">std::thread myThread ( thread_fun);</span><br><span class="line">//函数形式为void thread_fun()</span><br><span class="line">myThread.join();</span><br><span class="line">//同一个函数可以代码复用，创建多个线程</span><br></pre></td></tr></table></figure>

<ul>
<li>形式2：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">std::thread myThread ( thread_fun(100));</span><br><span class="line">myThread.join();</span><br><span class="line">//函数形式为void thread_fun(int x)</span><br><span class="line">//同一个函数可以代码复用，创建多个线程</span><br></pre></td></tr></table></figure>

<ul>
<li>形式3：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">std::thread (thread_fun,1).detach();</span><br><span class="line">//直接创建线程，没有名字</span><br><span class="line">//函数形式为void thread_fun(int x)</span><br></pre></td></tr></table></figure>

<ul>
<li>For Example</li>
</ul>
<p>使用g++编译下列代码的方式：</p>
<blockquote>
<p>g++ test.cc -o test -l pthread</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;thread&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">​</span><br><span class="line">void thread_1()</span><br><span class="line">&#123;</span><br><span class="line">    cout&lt;&lt;&quot;子线程1&quot;&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">​</span><br><span class="line">void thread_2(int x)</span><br><span class="line">&#123;</span><br><span class="line">    cout&lt;&lt;&quot;x:&quot;&lt;&lt;x&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;&quot;子线程2&quot;&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">​</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  thread first ( thread_1); // 开启线程，调用：thread_1()</span><br><span class="line">  thread second (thread_2,100); // 开启线程，调用：thread_2(100)</span><br><span class="line">  //thread third(thread_2,3);//开启第3个线程，共享thread_2函数。</span><br><span class="line">  std::cout &lt;&lt; &quot;主线程\n&quot;;</span><br><span class="line">​</span><br><span class="line">  first.join(); //必须说明添加线程的方式</span><br><span class="line">  second.join();</span><br><span class="line">  std::cout &lt;&lt; &quot;子线程结束.\n&quot;;//必须join完成</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-4、join与detach方式"><a href="#1-4、join与detach方式" class="headerlink" title="1.4、join与detach方式"></a><strong>1.4、join与detach方式</strong></h2><p>当线程启动后，一定要在和线程相关联的thread销毁前，确定以何种方式等待线程执行结束。比如上例中的join。</p>
<ul>
<li><p>detach方式，启动的线程自主在后台运行，当前的代码继续往下执行，不等待新线程结束。</p>
</li>
<li><p>join方式，等待启动的线程完成，才会继续往下执行。</p>
</li>
</ul>
<p>可以使用joinable判断是join模式还是detach模式。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">（1）join举例</span><br></pre></td></tr></table></figure>

<p>下面的代码，join后面的代码不会被执行，除非子线程结束。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;thread&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">void thread_1()</span><br><span class="line">&#123;</span><br><span class="line">  while(1)</span><br><span class="line">  &#123;</span><br><span class="line">  //cout&lt;&lt;&quot;子线程1111&quot;&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">void thread_2(int x)</span><br><span class="line">&#123;</span><br><span class="line">  while(1)</span><br><span class="line">  &#123;</span><br><span class="line">  //cout&lt;&lt;&quot;子线程2222&quot;&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    thread first ( thread_1); // 开启线程，调用：thread_1()</span><br><span class="line">    thread second (thread_2,100); // 开启线程，调用：thread_2(100)</span><br><span class="line">​</span><br><span class="line">    first.join(); // pauses until first finishes 这个操作完了之后才能destroyed</span><br><span class="line">    second.join(); // pauses until second finishes//join完了之后，才能往下执行。</span><br><span class="line">    while(1)</span><br><span class="line">    &#123;</span><br><span class="line">      std::cout &lt;&lt; &quot;主线程\n&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="（2）detach举例"><a href="#（2）detach举例" class="headerlink" title="（2）detach举例"></a><strong>（2）detach举例</strong></h3><p>下列代码中，主线程不会等待子线程结束。如果主线程运行结束，程序则结束。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;thread&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">​</span><br><span class="line">void thread_1()</span><br><span class="line">&#123;</span><br><span class="line">  while(1)</span><br><span class="line">  &#123;</span><br><span class="line">      cout&lt;&lt;&quot;子线程1111&quot;&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">​</span><br><span class="line">void thread_2(int x)</span><br><span class="line">&#123;</span><br><span class="line">    while(1)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;&quot;子线程2222&quot;&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">​</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    thread first ( thread_1);  // 开启线程，调用：thread_1()</span><br><span class="line">    thread second (thread_2,100); // 开启线程，调用：thread_2(100)</span><br><span class="line">​</span><br><span class="line">    first.detach();</span><br><span class="line">    second.detach();</span><br><span class="line">    for(int i = 0; i &lt; 10; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; &quot;主线程\n&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-5、this-thread"><a href="#1-5、this-thread" class="headerlink" title="1.5、this_thread"></a><strong>1.5、this_thread</strong></h2><p>this_thread是一个类，它有4个功能函数，具体如下：</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>函数</td>
<td>使用</td>
<td>说明</td>
</tr>
<tr>
<td>get_id</td>
<td>std::this_thread::get_id()</td>
<td>获取线程id</td>
</tr>
<tr>
<td>yield</td>
<td>std::this_thread::yield()</td>
<td>放弃线程执行，回到就绪状态</td>
</tr>
<tr>
<td>sleep_for</td>
<td>std::this_thread::sleep_for(std::chrono::seconds(1));</td>
<td>暂停1秒</td>
</tr>
<tr>
<td>sleep_until</td>
<td>如下</td>
<td>一分钟后执行吗，如下</td>
</tr>
</tbody></table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using std::chrono::system_clock;</span><br><span class="line">std::time_t tt = system_clock::to_time_t(system_clock::now());</span><br><span class="line">struct std::tm * ptm = std::localtime(&amp;tt);</span><br><span class="line">cout &lt;&lt; &quot;Waiting for the next minute to begin...\n&quot;;</span><br><span class="line">++ptm-&gt;tm_min; //加一分钟</span><br><span class="line">ptm-&gt;tm_sec = 0; //秒数设置为0//暂停执行，到下一整分执行</span><br><span class="line">this_thread::sleep_until(system_clock::from_time_t(mktime(ptm)));</span><br></pre></td></tr></table></figure>

<p>2、mutex</p>
<p>mutex头文件主要声明了与互斥量(mutex)相关的类。mutex提供了4种互斥类型，如下表所示。</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
<tr>
<td>类型</td>
<td>说明</td>
</tr>
<tr>
<td>std::mutex</td>
<td>最基本的 Mutex 类。</td>
</tr>
<tr>
<td>std::recursive_mutex</td>
<td>递归 Mutex 类。</td>
</tr>
<tr>
<td>std::time_mutex</td>
<td>定时 Mutex 类。</td>
</tr>
<tr>
<td>std::recursive_timed_mutex</td>
<td>定时递归 Mutex 类。</td>
</tr>
</tbody></table>
<p>std::mutex 是C++11 中最基本的互斥量，std::mutex 对象提供了独占所有权的特性——即不支持递归地对 std::mutex 对象上锁，而 std::recursive_lock 则可以递归地对互斥量对象上锁。</p>
<h2 id="2-1、lock与unlock"><a href="#2-1、lock与unlock" class="headerlink" title="2.1、lock与unlock"></a><strong>2.1、lock与unlock</strong></h2><p>mutex常用操作：</p>
<blockquote>
<ul>
<li><p>lock()：资源上锁</p>
</li>
<li><p>unlock()：解锁资源</p>
</li>
<li><p>trylock()：查看是否上锁，它有下列3种类情况：</p>
</li>
</ul>
<p>（1）未上锁返回false，并锁住；</p>
<p>（2）其他线程已经上锁，返回true；</p>
<p>（3）同一个线程已经对它上锁，将会产生死锁。</p>
</blockquote>
<p>死锁：是指两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程。</p>
<p>下面结合实例对lock和unlock进行说明。</p>
<p>同一个mutex变量上锁之后，一个时间段内，只允许一个线程访问它。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;  // std::cout</span><br><span class="line">#include &lt;thread&gt;  // std::thread</span><br><span class="line">#include &lt;mutex&gt;  // std::mutex</span><br><span class="line">​</span><br><span class="line">std::mutex mtx;  // mutex for critical section</span><br><span class="line">void print_block (int n, char c)</span><br><span class="line">&#123;</span><br><span class="line">// critical section (exclusive access to std::cout signaled by locking mtx):</span><br><span class="line">    mtx.lock();</span><br><span class="line">    for (int i=0; i&lt;n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">       std::cout &lt;&lt; c;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; &#x27;\n&#x27;;</span><br><span class="line">    mtx.unlock();</span><br><span class="line">&#125;</span><br><span class="line">int main ()</span><br><span class="line">&#123;</span><br><span class="line">    std::thread th1 (print_block,50,&#x27;&#x27;);//线程1：打印*</span><br><span class="line">    std::thread th2 (print_block,50,&#x27;$&#x27;);//线程2：打印$</span><br><span class="line">​</span><br><span class="line">    th1.join();</span><br><span class="line">    th2.join();</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">**************************************************</span><br><span class="line">$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$</span><br></pre></td></tr></table></figure>

<p>如果是不同mutex变量，因为不涉及到同一资源的竞争，所以以下代码运行可</p>
<p>能会出现交替打印的情况，或者另一个线程可以修改共同的全局变量！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt; // std::cout</span><br><span class="line">#include &lt;thread&gt; // std::thread</span><br><span class="line">#include &lt;mutex&gt; // std::mutex</span><br><span class="line">​</span><br><span class="line">std::mutex mtx_1; // mutex for critical section</span><br><span class="line">std::mutex mtx_2;  // mutex for critical section</span><br><span class="line">int test_num = 1;</span><br><span class="line">​</span><br><span class="line">void print_block_1 (int n, char c)</span><br><span class="line">&#123;</span><br><span class="line">// critical section (exclusive access to std::cout signaled by locking mtx):</span><br><span class="line">    mtx_1.lock();</span><br><span class="line">    for (int i=0; i&lt;n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        //std::cout &lt;&lt; c;</span><br><span class="line">        test_num = 1;</span><br><span class="line">        std::cout&lt;&lt;test_num&lt;&lt;std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">        std::cout &lt;&lt; &#x27;\n&#x27;;</span><br><span class="line">    mtx_1.unlock();</span><br><span class="line">&#125;</span><br><span class="line">​</span><br><span class="line">void print_block_2 (int n, char c)</span><br><span class="line">&#123;// critical section (exclusive access to std::cout signaled by locking mtx):</span><br><span class="line">    mtx_2.lock();</span><br><span class="line">    test_num = 2;</span><br><span class="line">    for (int i=0; i&lt;n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">    //std::cout &lt;&lt; c;</span><br><span class="line">      test_num = 2;</span><br><span class="line">      std::cout&lt;&lt;test_num&lt;&lt;std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    mtx_2.unlock();</span><br><span class="line">&#125;</span><br><span class="line">​</span><br><span class="line">int main ()</span><br><span class="line">&#123;</span><br><span class="line">    std::thread th1 (print_block_1,10000,&#x27;*&#x27;);</span><br><span class="line">    std::thread th2 (print_block_2,10000,&#x27;$&#x27;);</span><br><span class="line">​</span><br><span class="line">    th1.join();</span><br><span class="line">    th2.join();</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.2、lock_guard</p>
<p>创建lock_guard对象时，它将尝试获取提供给它的互斥锁的所有权。当控制流离开lock_guard对象的作用域时，lock_guard析构并释放互斥量。</p>
<p>lock_guard的特点：</p>
<ul>
<li><p>创建即加锁，作用域结束自动析构并解锁，无需手工解锁</p>
</li>
<li><p>不能中途解锁，必须等作用域结束才解锁</p>
</li>
<li><p>不能复制</p>
</li>
</ul>
<p>代码举例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;thread&gt;</span><br><span class="line">#include &lt;mutex&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">int g_i = 0;</span><br><span class="line">std::mutex g_i_mutex;  // protects g_i，用来保护g_i</span><br><span class="line">​</span><br><span class="line">void safe_increment()</span><br><span class="line">&#123;</span><br><span class="line">    const std::lock_guard&lt;std::mutex&gt; lock(g_i_mutex);</span><br><span class="line">    ++g_i;</span><br><span class="line">    std::cout &lt;&lt; std::this_thread::get_id() &lt;&lt; &quot;: &quot; &lt;&lt; g_i &lt;&lt; &#x27;\n&#x27;;// g_i_mutex自动解锁&#125;int main()&#123;</span><br><span class="line">    std::cout &lt;&lt; &quot;main id: &quot; &lt;&lt;std::this_thread::get_id()&lt;&lt;std::endl;</span><br><span class="line">    std::cout &lt;&lt; &quot;main: &quot; &lt;&lt; g_i &lt;&lt; &#x27;\n&#x27;;</span><br><span class="line">​</span><br><span class="line">    std::thread t1(safe_increment);</span><br><span class="line">    std::thread t2(safe_increment);</span><br><span class="line">​</span><br><span class="line">    t1.join();</span><br><span class="line">    t2.join();</span><br><span class="line">​</span><br><span class="line">    std::cout &lt;&lt; &quot;main: &quot; &lt;&lt; g_i &lt;&lt; &#x27;\n&#x27;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<p>NaN. 该程序的功能为，每经过一个线程，g_i 加1。</p>
<p>NaN. 因为涉及到共同资源g_i ，所以需要一个共同mutex：g_i_mutex。</p>
<p>NaN. main线程的id为1，所以下次的线程id依次加1。</p>
<h2 id="2-3、unique-lock"><a href="#2-3、unique-lock" class="headerlink" title="2.3、unique_lock"></a><strong>2.3、unique_lock</strong></h2><p>简单地讲，unique_lock 是 lock_guard 的升级加强版，它具有 lock_guard 的所有功能，同时又具有其他很多方法，使用起来更加灵活方便，能够应对更复杂的锁定需要。</p>
<p>unique_lock的特点：</p>
<ul>
<li><p>创建时可以不锁定（通过指定第二个参数为std::defer_lock），而在需要时再锁定</p>
</li>
<li><p>可以随时加锁解锁</p>
</li>
<li><p>作用域规则同 lock_grard，析构时自动释放锁</p>
</li>
<li><p>不可复制，可移动</p>
</li>
<li><p>条件变量需要该类型的锁作为参数（此时必须使用unique_lock）</p>
</li>
</ul>
<p>所有 lock_guard 能够做到的事情，都可以使用 unique_lock 做到，反之则不然。那么何时使lock_guard呢？很简单，需要使用锁的时候，首先考虑使用 lock_guard，因为lock_guard是最简单的锁。</p>
<p>下面是代码举例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;mutex&gt;</span><br><span class="line">#include &lt;thread&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">struct Box &#123;</span><br><span class="line">    explicit Box(int num) : num_things&#123;num&#125; &#123;&#125;</span><br><span class="line">    int num_things;</span><br><span class="line">    std::mutex m;</span><br><span class="line">&#125;;</span><br><span class="line">void transfer(Box &amp;from, Box &amp;to, int num)</span><br><span class="line">&#123;</span><br><span class="line">    // defer_lock表示暂时unlock，默认自动加锁</span><br><span class="line">    std::unique_lock&lt;std::mutex&gt; lock1(from.m, std::defer_lock);</span><br><span class="line">    std::unique_lock&lt;std::mutex&gt; lock2(to.m, std::defer_lock);//两个同时加锁</span><br><span class="line">    std::lock(lock1, lock2);//或者使用lock1.lock()</span><br><span class="line">​</span><br><span class="line">    from.num_things -= num;</span><br><span class="line">    to.num_things += num;//作用域结束自动解锁,也可以使用lock1.unlock()手动解锁</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    Box acc1(100);</span><br><span class="line">    Box acc2(50);</span><br><span class="line">​</span><br><span class="line">    std::thread t1(transfer, std::ref(acc1), std::ref(acc2), 10);</span><br><span class="line">    std::thread t2(transfer, std::ref(acc2), std::ref(acc1), 5);</span><br><span class="line">​</span><br><span class="line">    t1.join();</span><br><span class="line">    t2.join();</span><br><span class="line">    std::cout &lt;&lt; &quot;acc1 num_things: &quot; &lt;&lt; acc1.num_things &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; &quot;acc2 num_things: &quot; &lt;&lt; acc2.num_things &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<ul>
<li><p>该函数的作用是，从一个结构体中的变量减去一个num，加载到另一个结构体的变量中去。</p>
</li>
<li><p>std::mutex m;在结构体中，mutex不是共享的。但是只需要一把锁也能锁住，因为引用传递后，同一把锁传给了两个函数。</p>
</li>
<li><p>cout需要在join后面进行，要不然cout的结果不一定是最终算出来的结果。</p>
</li>
<li><p>std::ref 用于包装按引用传递的值。</p>
</li>
<li><p>std::cref 用于包装按const引用传递的值。</p>
</li>
</ul>
<p>3、condition_variable</p>
<p>condition_variable头文件有两个variable类，一个是condition_variable，另一个是condition_variable_any。condition_variable必须结合unique_lock使用。condition_variable_any可以使用任何的锁。下面以condition_variable为例进行介绍。</p>
<p>condition_variable条件变量可以阻塞（wait、wait_for、wait_until）调用的线程直到使用（notify_one或notify_all）通知恢复为止。condition_variable是一个类，这个类既有构造函数也有析构函数，使用时需要构造对应的condition_variable对象，调用对象相应的函数来实现上面的功能。</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
<tr>
<td>类型</td>
<td>说明</td>
</tr>
<tr>
<td>condition_variable</td>
<td>构建对象</td>
</tr>
<tr>
<td>析构</td>
<td>删除</td>
</tr>
<tr>
<td>wait</td>
<td>Wait until notified</td>
</tr>
<tr>
<td>wait_for</td>
<td>Wait for timeout or until notified</td>
</tr>
<tr>
<td>wait_until</td>
<td>Wait until notified or time point</td>
</tr>
<tr>
<td>notify_one</td>
<td>解锁一个线程，如果有多个，则未知哪个线程执行</td>
</tr>
<tr>
<td>notify_all</td>
<td>解锁所有线程</td>
</tr>
<tr>
<td>cv_status</td>
<td>这是一个类，表示variable 的状态，如下所示</td>
</tr>
</tbody></table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">enum class cv_status &#123; no_timeout, timeout &#125;;</span><br></pre></td></tr></table></figure>

<p>3.1、wait</p>
<p>当前线程调用 wait() 后将被阻塞(此时当前线程应该获得了锁（mutex），不妨设获得锁 lck)，直到另外某个线程调用 notify_* 唤醒了当前线程。</p>
<p>在线程被阻塞时，该函数会自动调用 lck.unlock() 释放锁，使得其他被阻塞在锁竞争上的线程得以继续执行。另外，一旦当前线程获得通知(notified，通常是另外某个线程调用 notify_* 唤醒了当前线程)，wait()函数也是自动调用 lck.lock()，使得lck的状态和 wait 函数被调用时相同。</p>
<p>代码示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;           // std::cout</span><br><span class="line">#include &lt;thread&gt;             // std::thread, std::this_thread::yield</span><br><span class="line">#include &lt;mutex&gt;              // std::mutex, std::unique_lock</span><br><span class="line">#include &lt;condition_variable&gt; // std::condition_variable</span><br><span class="line">​</span><br><span class="line">std::mutex mtx;</span><br><span class="line">std::condition_variable cv;</span><br><span class="line">int cargo = 0;</span><br><span class="line">bool shipment_available()</span><br><span class="line">&#123;</span><br><span class="line">    return cargo!=0;</span><br><span class="line">&#125;</span><br><span class="line">void consume (int n)</span><br><span class="line">&#123;</span><br><span class="line">    for (int i=0; i&lt;n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        std::unique_lock&lt;std::mutex&gt; lck(mtx);//自动上锁</span><br><span class="line">        //第二个参数为false才阻塞（wait），阻塞完即unlock，给其它线程资源</span><br><span class="line">        cv.wait(lck,shipment_available);// consume:</span><br><span class="line">        std::cout &lt;&lt; cargo &lt;&lt; &#x27;\n&#x27;;</span><br><span class="line">        cargo=0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main ()</span><br><span class="line">&#123;</span><br><span class="line">    std::thread consumer_thread (consume,10);</span><br><span class="line">    for (int i=0; i&lt;10; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        //每次cargo每次为0才运行。</span><br><span class="line">        while (shipment_available())  std::this_thread::yield();</span><br><span class="line">        std::unique_lock&lt;std::mutex&gt; lck(mtx);</span><br><span class="line">        cargo = i+1;</span><br><span class="line">        cv.notify_one();</span><br><span class="line">    &#125;</span><br><span class="line">​</span><br><span class="line">    consumer_thread.join();</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<p>NaN. 主线程中的while，每次在cargo&#x3D;0才运行。</p>
<p>NaN. 每次cargo被置为0，会通知子线程unblock(非阻塞)，也就是子线程可以继续往下执行。</p>
<p>NaN. 子线程中cargo被置为0后，wait又一次启动等待。也就是说shipment_available为false，则等待。</p>
<h2 id="3-2、wait-for"><a href="#3-2、wait-for" class="headerlink" title="3.2、wait_for"></a><strong>3.2、wait_for</strong></h2><p>与std::condition_variable::wait() 类似，不过 wait_for可以指定一个时间段，在当前线程收到通知或者指定的时间 rel_time 超时之前，该线程都会处于阻塞状态。而一旦超时或者收到了其他线程的通知，wait_for返回，剩下的处理步骤和 wait()类似。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">template &lt;class Rep, class Period&gt;</span><br><span class="line">  cv_status wait_for (unique_lock&lt;mutex&gt;&amp; lck,</span><br><span class="line">                      const chrono::duration&lt;Rep,Period&gt;&amp; rel_time);</span><br></pre></td></tr></table></figure>

<p>另外，wait_for 的重载版本的最后一个参数pred表示 wait_for的预测条件，只有当 pred条件为false时调用 wait()才会阻塞当前线程，并且在收到其他线程的通知后只有当 pred为 true时才会被解除阻塞。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">template &lt;class Rep, class Period, class Predicate&gt;</span><br><span class="line">    bool wait_for (unique_lock&lt;mutex&gt;&amp; lck,</span><br><span class="line">         const chrono::duration&lt;Rep,Period&gt;&amp; rel_time, Predicate pred);</span><br></pre></td></tr></table></figure>

<p>代码示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;           // std::cout</span><br><span class="line">#include &lt;thread&gt;             // std::thread</span><br><span class="line">#include &lt;chrono&gt;             // std::chrono::seconds</span><br><span class="line">#include &lt;mutex&gt;              // std::mutex, std::unique_lock</span><br><span class="line">#include &lt;condition_variable&gt; // std::condition_variable, std::cv_status</span><br><span class="line">​</span><br><span class="line">std::condition_variable cv;</span><br><span class="line">int value;</span><br><span class="line">void read_value()</span><br><span class="line">&#123;</span><br><span class="line">    std::cin &gt;&gt; value;</span><br><span class="line">    cv.notify_one();</span><br><span class="line">&#125;</span><br><span class="line">int main ()</span><br><span class="line">&#123;</span><br><span class="line">    std::cout &lt;&lt; &quot;Please, enter an integer (I&#x27;ll be printing dots): \n&quot;;</span><br><span class="line">    std::thread th (read_value);</span><br><span class="line">​</span><br><span class="line">    std::mutex mtx;</span><br><span class="line">    std::unique_lock&lt;std::mutex&gt; lck(mtx);</span><br><span class="line">    while (cv.wait_for(lck,std::chrono::seconds(1))==std::cv_status::timeout)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; &#x27;.&#x27; &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; &quot;You entered: &quot; &lt;&lt; value &lt;&lt; &#x27;\n&#x27;;</span><br><span class="line">​</span><br><span class="line">    th.join();</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>通知或者超时都会解锁，所以主线程会一直打印。</p>
</li>
<li><p>示例中只要过去一秒，就会不断的打印。</p>
</li>
</ul>
<p>4、线程池</p>
<h2 id="4-1、概念"><a href="#4-1、概念" class="headerlink" title="4.1、概念"></a><strong>4.1、概念</strong></h2><p>在一个程序中，如果我们需要多次使用线程，这就意味着，需要多次的创建并销毁线程。而创建并销毁线程的过程势必会消耗内存，线程过多会带来调动的开销，进而影响缓存局部性和整体性能。</p>
<p>线程的创建并销毁有以下一些缺点：</p>
<ul>
<li><p>创建太多线程，将会浪费一定的资源，有些线程未被充分使用。</p>
</li>
<li><p>销毁太多线程，将导致之后浪费时间再次创建它们。</p>
</li>
<li><p>创建线程太慢，将会导致长时间的等待，性能变差。</p>
</li>
<li><p>销毁线程太慢，导致其它线程资源饥饿。</p>
</li>
</ul>
<p>线程池维护着多个线程，这避免了在处理短时间任务时，创建与销毁线程的代价。</p>
<h2 id="4-2、线程池的实现"><a href="#4-2、线程池的实现" class="headerlink" title="4.2、线程池的实现"></a><strong>4.2、线程池的实现</strong></h2><p>因为程序边运行边创建线程是比较耗时的，所以我们通过池化的思想：在程序开始运行前创建多个线程，这样，程序在运行时，只需要从线程池中拿来用就可以了．大大提高了程序运行效率．</p>
<p>一般线程池都会有以下几个部分构成：</p>
<p>NaN. 线程池管理器（ThreadPoolManager）:用于创建并管理线程池，也就是线程池类</p>
<p>NaN. 工作线程（WorkThread）: 线程池中线程</p>
<p>NaN. 任务队列task: 用于存放没有处理的任务。提供一种缓冲机制。</p>
<p>NaN. append：用于添加任务的接口</p>
<p>线程池实现代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#ifndef _THREADPOOL_H</span><br><span class="line">#define _THREADPOOL_H</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;thread&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;stdexcept&gt;</span><br><span class="line">#include &lt;condition_variable&gt;</span><br><span class="line">#include &lt;memory&gt; //unique_ptr</span><br><span class="line">#include&lt;assert.h&gt;</span><br><span class="line">const int MAX_THREADS = 1000; //最大线程数目</span><br><span class="line">template &lt;typename T&gt;</span><br><span class="line">class threadPool</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    threadPool(int number = 1);//默认开一个线程</span><br><span class="line">    ~threadPool();</span><br><span class="line">    std::queue&lt;T &gt; tasks_queue; //任务队列</span><br><span class="line">    bool append(T *request);//往请求队列＜task_queue＞中添加任务&lt;T &gt;</span><br><span class="line">private:</span><br><span class="line">//工作线程需要运行的函数,不断的从任务队列中取出并执行</span><br><span class="line">    static void *worker(void arg);</span><br><span class="line">    void run();</span><br><span class="line">private:</span><br><span class="line">    std::vector&lt;std::thread&gt; work_threads; //工作线程</span><br><span class="line">​</span><br><span class="line">    std::mutex queue_mutex;</span><br><span class="line">    std::condition_variable condition;  //必须与unique_lock配合使用</span><br><span class="line">    bool stop;</span><br><span class="line">&#125;;//end class//构造函数，创建线程</span><br><span class="line">template &lt;typename T&gt;</span><br><span class="line">threadPool&lt;T&gt;::threadPool(int number) : stop(false)</span><br><span class="line">&#123;</span><br><span class="line">    if (number &lt;= 0 || number &gt; MAX_THREADS)</span><br><span class="line">        throw std::exception();</span><br><span class="line">    for (int i = 0; i &lt; number; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; &quot;created Thread num is : &quot; &lt;&lt; i &lt;&lt;std::endl;</span><br><span class="line">        work_threads.emplace_back(worker, this);</span><br><span class="line">        //添加线程</span><br><span class="line">        //直接在容器尾部创建这个元素，省去了拷贝或移动元素的过程。</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">template &lt;typename T&gt;</span><br><span class="line">inline threadPool&lt;T&gt;::~threadPool()</span><br><span class="line">&#123;</span><br><span class="line">    std::unique_lock&lt;std::mutex&gt; lock(queue_mutex);</span><br><span class="line">    stop = true;</span><br><span class="line">​</span><br><span class="line">    condition.notify_all();</span><br><span class="line">    for (auto &amp;ww : work_threads)</span><br><span class="line">        ww.join();//可以在析构函数中join</span><br><span class="line">&#125;</span><br><span class="line">//添加任务</span><br><span class="line">template &lt;typename T&gt;</span><br><span class="line">bool threadPool&lt;T&gt;::append(T *request)</span><br><span class="line">&#123;</span><br><span class="line">    //操作工作队列时一定要加锁，因为他被所有线程共享</span><br><span class="line">    queue_mutex.lock();//同一个类的锁</span><br><span class="line">    tasks_queue.push(request);</span><br><span class="line">    queue_mutex.unlock();</span><br><span class="line">    condition.notify_one();  //线程池添加进去了任务，自然要通知等待的线程</span><br><span class="line">    return true;</span><br><span class="line">&#125;//单个线程</span><br><span class="line">template &lt;typename T&gt;</span><br><span class="line">void threadPool&lt;T&gt;::worker(void *arg)</span><br><span class="line">&#123;</span><br><span class="line">    threadPool pool = (threadPool *)arg;</span><br><span class="line">    pool-&gt;run();//线程运行</span><br><span class="line">    return pool;</span><br><span class="line">&#125;</span><br><span class="line">template &lt;typename T&gt;</span><br><span class="line">void threadPool&lt;T&gt;::run()</span><br><span class="line">&#123;</span><br><span class="line">while (!stop)</span><br><span class="line">&#123;</span><br><span class="line">    std::unique_lock&lt;std::mutex&gt; lk(this-&gt;queue_mutex);</span><br><span class="line">    /*　unique_lock() 出作用域会自动解锁　/</span><br><span class="line">    this-&gt;condition.wait(lk, [this]</span><br><span class="line">    &#123;</span><br><span class="line">      return !this-&gt;tasks_queue.empty();</span><br><span class="line">    &#125;);//如果任务为空，则wait，就停下来等待唤醒//需要有任务，才启动该线程，不然就休眠</span><br><span class="line">    if (this-&gt;tasks_queue.empty())//任务为空，双重保障</span><br><span class="line">    &#123;</span><br><span class="line">        assert(0&amp;&amp;&quot;断了&quot;);//实际上不会运行到这一步，因为任务为空，wait就休眠了。</span><br><span class="line">        continue;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        T *request = tasks_queue.front();</span><br><span class="line">        tasks_queue.pop();</span><br><span class="line">        if (request)//来任务了，开始执行</span><br><span class="line">            request-&gt;process();</span><br><span class="line">          &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<ul>
<li><p>构造函数创建所需要的线程数</p>
</li>
<li><p>一个线程对应一个任务，任务随时可能完成，线程则可能休眠，所以任务用队列queue实现（线程数量有限），线程用采用wait机制。</p>
</li>
<li><p>任务在不断的添加，有可能大于线程数，处于队首的任务先执行。</p>
</li>
<li><p>只有添加任务(append)后，才开启线程condition.notify_one()。</p>
</li>
<li><p>wait表示，任务为空时，则线程休眠，等待新任务的加入。</p>
</li>
<li><p>添加任务时需要添加锁，因为共享资源。</p>
</li>
</ul>
<p>测试代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &quot;mythread.h&quot;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line">#include&lt;math.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">class Task</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    void process()</span><br><span class="line">&#123;</span><br><span class="line">        //cout &lt;&lt; &quot;run.........&quot; &lt;&lt; endl;//测试任务数量</span><br><span class="line">        long i=1000000;</span><br><span class="line">        while(i!=0)</span><br><span class="line">        &#123;</span><br><span class="line">            int j = sqrt(i);</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">int main(void)&#123;</span><br><span class="line">    threadPool&lt;Task&gt; pool(6);//6个线程，vector</span><br><span class="line">    std::string str;</span><br><span class="line">    while (1)</span><br><span class="line">    &#123;</span><br><span class="line">        Task *tt = new Task();//使用智能指针</span><br><span class="line">        pool.append(tt);//不停的添加任务，任务是队列queue，因为只有固定的线程数</span><br><span class="line">        cout&lt;&lt;&quot;添加的任务数量：&quot;&lt;&lt;pool.tasks_queue.size()&lt;&lt;endl;</span><br><span class="line">        delete tt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
        <category>c++</category>
        <category>Thread</category>
      </categories>
  </entry>
  <entry>
    <title>C++多线程创建</title>
    <url>/2024/07/22/C++%20%E7%BA%BF%E7%A8%8B%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h3 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h3><span id="more"></span>  
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">```C++  </span><br><span class="line">#inclue &lt;iostream&gt;  </span><br><span class="line">#include &lt;thread&gt;</span><br><span class="line"></span><br><span class="line">void hello()&#123;  </span><br><span class="line">std::cout&lt;&lt;&quot;hello thread&quot;&lt;&lt;std::endl;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;  </span><br><span class="line">std::thread t&#123;hello()&#125;;  </span><br><span class="line">t.join();  </span><br><span class="line">&#125;  </span><br><span class="line">// 为了避免解析错误 C++推荐使用多组括号或者统一初始化语法或者lambda表达式  </span><br><span class="line">1. std::thread t((hello()));  </span><br><span class="line">2. std::thread t&#123;hello()&#125;;  </span><br><span class="line">3. std::thread t(&#123;  </span><br><span class="line">	hello();  </span><br><span class="line">	&#125;)</span><br></pre></td></tr></table></figure>

<pre><code>C++  
class background_task&#123;  
public:  
void operator()() const &#123;  
do_something();  
do_something_else();  
&#125;  
&#125;

background_task f;  
std::thread my_threa&#123;f&#125;;  

“`C++  
#include  
#include //标准库中对C++线程的声明

void hello()&#123;  
std::cout&lt;&lt;“Hello Concurrent world\n”  
&#125;

int main()&#123;  
std::thread t(hello);  
t.join();  
&#125;

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">### 线程管理的基础</span><br><span class="line"></span><br><span class="line">每个程序至少有一个线程,为执行` main() ` 函数的线程，其余的线程有各自的入口函数。</span><br><span class="line"></span><br><span class="line">  #### 构造线程的对象</span><br><span class="line"></span><br><span class="line">```C++</span><br><span class="line">void do_some_work();</span><br><span class="line">std::thread my_thread(); </span><br><span class="line">&lt;/code&gt;&lt;/pre&gt;</span><br><span class="line"></span><br><span class="line">#### 启动线程对象</span><br><span class="line"></span><br><span class="line">&lt;pre&gt;&lt;code&gt;当把函数对象传入到线程构造函数的时候，需要避免语法解析上的错误。推荐做法如下：</span><br><span class="line">&lt;/code&gt;&lt;/pre&gt;</span><br><span class="line"></span><br><span class="line">```C++</span><br><span class="line">std::thread my_thread(background_task())</span><br><span class="line">// 上面的语法在C++语法解析的时候，编译器会将其解析成为函数的声明，而不是启动类型对象的定义</span><br><span class="line">// 因此建议使用多组括号，或者使用新的统一的初始化语法，或者使用lambda表达式</span><br><span class="line">std::thread my_thread((background_task()));</span><br><span class="line">std::thread my_thread&#123;background_task()&#125;;</span><br><span class="line">std::thread my_thread([]&#123;</span><br><span class="line">do_something();</span><br><span class="line">do_something_else();&#125;);</span><br><span class="line"></span><br><span class="line">  #### 线程对象停止时的动作</span><br><span class="line"></span><br><span class="line">    当线程自动停止的时候，会调用`std::terminate()`</span><br><span class="line"></span><br><span class="line">  ### 线程管理</span><br><span class="line"></span><br><span class="line">     使用 `join()` 等待线程结束。使用`detach()`将线程分离。</span><br><span class="line">&gt; 使用一个能够访问局部变量的函数去创建一个线程是非常糟糕的设计，因为如果线程中访问了一个创建者的局部变量，没有使用join()等待线程结束，有可能创建者运行结束后线程还在运行中，此时线程中使用的局部变量就会变成悬空变量。如以下的例子    使用一个能够访问局部变量的函数去创建一个线程是非常糟糕的设计，因为如果线程中访问了一个创建者的局部变量，没有使用join()等待线程结束，有可能创建者运行结束后线程还在运行中，此时线程中使用的局部变量就会变成悬空变量。如以下的例子：</span><br><span class="line"></span><br><span class="line">```C++</span><br><span class="line">struct func</span><br><span class="line">&#123;</span><br><span class="line">  int&amp; i;</span><br><span class="line">  func(int&amp; i_) : i(i_) &#123;&#125;</span><br><span class="line">  void operator() ()&#123;</span><br><span class="line">    for (unsigned j=0 ; j&lt;1000000 ; ++j)&#123;</span><br><span class="line">      do_something(i); // 1 潜在访问隐患：悬空引用</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br><span class="line">void oops()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  int some_local_state=0;</span><br><span class="line">  func my_func(some_local_state);</span><br><span class="line">  std::thread my_thread(my_func);</span><br><span class="line">  my_thread.detach(); // 2 不等待线程结束</span><br><span class="line">&#125; </span><br><span class="line">// 3 新线程可能还在运行</span><br><span class="line">&lt;/code&gt;&lt;/pre&gt;</span><br><span class="line"></span><br><span class="line">### 使用RAII等待线程结束</span><br><span class="line"></span><br><span class="line">```C++</span><br><span class="line">class thread_guard&#123;</span><br><span class="line">  std::thread &amp;t;</span><br><span class="line">  public:</span><br><span class="line">  explicit thread_guard(std::thread&amp; t_):</span><br><span class="line">  t(t_)&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">~thread_guard()&#123;</span><br><span class="line">    if(t.joinable())&#123;</span><br><span class="line">      t.join();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">thread_guard(thread_guard const&amp;)=delete;</span><br><span class="line">  thread_guard&amp; operator=(thread_guard const&amp;)=delete;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">struct func</span><br><span class="line">&#123;</span><br><span class="line">  int&amp; i;</span><br><span class="line">  func(int&amp; i_) : i(i_) &#123;&#125;</span><br><span class="line">  void operator() () &#123;</span><br><span class="line">    for (unsigned j=0 ; j&lt;1000000 ; ++j) &#123;</span><br><span class="line">    do_something(i); // 1 潜在访问隐患：悬空引用</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct func;</span><br><span class="line">void f()</span><br><span class="line">&#123;</span><br><span class="line">  int some_local_state=0;</span><br><span class="line">  func my_func(some_local_state);</span><br><span class="line">  std::thread t(my_func);</span><br><span class="line">  thread_guard g(t);</span><br><span class="line">  do_something_in_current_thread();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">### 线程标识</span><br><span class="line"></span><br><span class="line">线程标识类型为`std::thread::id` ，可以通过调用`std::thread` 对象成员函数 `get_id()`来调用，或者在当前线程中使用`std::this_thread::get_id()`来调用。</span><br><span class="line"></span><br><span class="line">### 向线程函数中传递参数</span><br><span class="line"></span><br><span class="line">``` cpp</span><br><span class="line">void f(int i, std::string const&amp; s);</span><br><span class="line">std::thread t(f, 3,&quot;hello&quot;);</span><br><span class="line">// 当传递一个非常量的引用的时候，std::thread的构造函数会无视函数期待的参数类型，并盲目的拷贝</span><br><span class="line">// 已提供的变量. 因此在传递引用的时候，最好使用std::ref()</span><br><span class="line">std::thread t(update_data_for_widget,w,std::ref(data));</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</code></pre>
]]></content>
      <categories>
        <category>技术</category>
        <category>c++</category>
        <category>Thread</category>
      </categories>
  </entry>
  <entry>
    <title>C++ 表驱动设计模式</title>
    <url>/2024/07/22/C++%20%E8%A1%A8%E9%A9%B1%E5%8A%A8%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>用表驱动替代冗长的逻辑语句，遵循元编程思想。</p>
<p>表驱动法(Table driven method)，是一种设计模式，可以用来代替复杂的if&#x2F;else或switch-case逻辑判断。</p>
<span id="more"></span>  
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>在C++ 中使用map配合std::function 来实现。以下为具体实现代码<br>.h 文件</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> SETBIT(x,y) x|=(1&lt;&lt;y) <span class="comment">//将X的第Y位置1</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CLRBIT(x,y) x&amp;=~(1&lt;&lt;y) <span class="comment">//将X的第Y位清0 </span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SETVALUE(x1,x2,x3) x1 &gt; 0? SETBIT(x2,x3):CLRBIT(x2,x3)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// 在头文件中定义函数指针</span></span><br><span class="line"><span class="keyword">typedef</span>  std::function&lt;<span class="type">void</span>(<span class="type">int</span> ,StatusValueS&amp; )&gt; paseFun;</span><br><span class="line"><span class="comment">// 定义存储key值和函数指针的map</span></span><br><span class="line">std::QMap&lt;QPair&lt;QString,QPair&lt;<span class="type">int</span>,MOXATYPE&gt; &gt;,paseFun&gt; drive_map_; <span class="comment">// 这里的key值如果需要判断的数值比较多可以不使用pair类型，使用结构体来定义</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>.cpp</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在cpp函数中初始化定义的drive_map_;</span></span><br><span class="line">drive_map_.<span class="built_in">insert</span>(QPair&lt;QString,QPair&lt;<span class="type">int</span>,MOXATYPE&gt; &gt;(moxa1,<span class="built_in">QPair</span>&lt;<span class="type">int</span>,MOXATYPE&gt;(<span class="number">0</span>,MOXATYPE::MOXA_DI)),[&amp;](<span class="type">int</span> flag,StatusValueS&amp; value)&#123; <span class="built_in">SETVALUE</span>(flag,value.carLine1,<span class="number">3</span>);&#125;);</span><br><span class="line"><span class="comment">// 我这里需要判断三个值是否同时满足，最开始的写成pair类型，其实写成结构体更加简单和清晰，后续函数里面只是做个位处理，所以写成lambda，并且使用宏定义。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 后续的判断 根据vector中存储的结构体中的值去调用对应的value值，即函数指针。</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> s: v)&#123;</span><br><span class="line">        QMap&lt;QPair&lt;QString,QPair&lt;<span class="type">int</span>,MOXATYPE&gt; &gt;,paseFun&gt;::iterator iter = drive_map_.<span class="built_in">begin</span>();</span><br><span class="line">        <span class="keyword">while</span> (iter != drive_map_.<span class="built_in">end</span>()) &#123;</span><br><span class="line"><span class="comment">//            qDebug()&lt;&lt;&quot;iter.key().first ==&quot;&lt;&lt;iter.key().first;</span></span><br><span class="line"><span class="comment">//            qDebug()&lt;&lt;&quot;s.ip  ==&quot;&lt;&lt;s.ip;</span></span><br><span class="line"><span class="comment">//            qDebug()&lt;&lt;&quot;iter.key().second  ==&quot;&lt;&lt;iter.key().second;</span></span><br><span class="line"><span class="comment">//            qDebug()&lt;&lt;&quot;s.io_num  ==&quot;&lt;&lt;s.io_num;</span></span><br><span class="line">            <span class="keyword">if</span>(iter.<span class="built_in">key</span>().first == s.ip &amp;&amp; iter.<span class="built_in">key</span>().second.first  == s.io_num &amp;&amp; iter.<span class="built_in">key</span>().second.second == <span class="built_in">static_cast</span>&lt;MOXATYPE&gt;(s.sigtype))&#123;</span><br><span class="line">                 iter.<span class="built_in">value</span>()(s.value,statusvalue);</span><br><span class="line">                 <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            ++iter;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
        <category>c++</category>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>C++ 宏定义</title>
    <url>/2024/07/22/C++%E5%AE%8F%E5%AE%9A%E4%B9%89%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="define-的基本用法"><a href="#define-的基本用法" class="headerlink" title="#define 的基本用法"></a>#define 的基本用法</h2><p><code>#define</code>是C语言中提供的宏定义命令，其主要目的是为程序员在编程时提供一定的方便，并能在一定程度上提高程序的运行效率，但学生在学习时往往不能 理解该命令的本质，总是在此处产生一些困惑，在编程时误用该命令，使得程序的运行与预期的目的不一致，或者在读别人写的程序时，把运行结果理解错误，这对 C语言的学习很不利。</p>
<span id="more"></span>  

<h3 id="define-命令剖析"><a href="#define-命令剖析" class="headerlink" title="# define 命令剖析"></a># define 命令剖析</h3><ul>
<li><p><code>#define</code>的概念<br>  <code>#define</code>命令是C语言中的一个宏定义命令，它用来将一个标识符定义为一个字符串，该标识符被称为宏名，被定义的字符串称为替换文本。<br>  该命令有两种格式：一种是简单的宏定义，另一种是带参数的宏定义。</p>
</li>
<li><p>简单的宏定义：</p>
<ul>
<li><p><code>#define &lt;宏名&gt; &lt;字符串&gt;</code> 例:<code>#define PI 3.1415926</code></p>
</li>
<li><p>带参数的宏定义 <code>#define &lt;宏名&gt; (&lt;参数表&gt;) &lt;宏体&gt;</code>例#define A(x) x&#96;</p>
</li>
</ul>
<p>  一个标识符被宏定义后，该标识符便是一个宏名。这时，在程序中出现的是宏名，在该程序被编译前，先将宏名用被定义的字符串替换，这称为宏替换，替换后才进行编译，宏替换是简单的替换。
  </p>
</li>
<li><p>宏替换发生的时机<br>  为了能够真正理解<code>#define</code>的作用，让我们来了解一下对C语言源程序的处理过程。当我们在一个集成的开发环境如Turbo C中将编写好的源程序进行编译时，实际经过了预处理、编译、汇编和连接几个过程。其中预处理器产生编译器的输出，它实现以下的功能：</p>
</li>
</ul>
<h5 id="1-文件包含"><a href="#1-文件包含" class="headerlink" title="1.文件包含"></a>1.文件包含</h5><h6 id="可以把源程序中的-include-扩展为文件正文，即把包含的-h文件找到并展开到-include-所在处。"><a href="#可以把源程序中的-include-扩展为文件正文，即把包含的-h文件找到并展开到-include-所在处。" class="headerlink" title="可以把源程序中的#include 扩展为文件正文，即把包含的.h文件找到并展开到#include 所在处。"></a>可以把源程序中的#include 扩展为文件正文，即把包含的.h文件找到并展开到#include 所在处。</h6><h5 id="2-条件编译"><a href="#2-条件编译" class="headerlink" title="2.条件编译"></a>2.条件编译</h5><h6 id="预处理器根据-if和-ifdef等编译命令及其后的条件，将源程序中的某部分包含进来或排除在外，通常把排除在外的语句转换成空行。"><a href="#预处理器根据-if和-ifdef等编译命令及其后的条件，将源程序中的某部分包含进来或排除在外，通常把排除在外的语句转换成空行。" class="headerlink" title="预处理器根据#if和#ifdef等编译命令及其后的条件，将源程序中的某部分包含进来或排除在外，通常把排除在外的语句转换成空行。"></a>预处理器根据#if和#ifdef等编译命令及其后的条件，将源程序中的某部分包含进来或排除在外，通常把排除在外的语句转换成空行。</h6><h5 id="3-宏展开"><a href="#3-宏展开" class="headerlink" title="3.宏展开"></a>3.宏展开</h5><h6 id="预处理器将源程序文件中出现的对宏的引用展开成相应的宏-定义，即本文所说的-define的功能，由预处理器来完成-预处理器将源程序文件中出现的对宏的引用展开成相应的宏-定义，即本文所说的-define的功能，由预处理器来完成。"><a href="#预处理器将源程序文件中出现的对宏的引用展开成相应的宏-定义，即本文所说的-define的功能，由预处理器来完成-预处理器将源程序文件中出现的对宏的引用展开成相应的宏-定义，即本文所说的-define的功能，由预处理器来完成。" class="headerlink" title="预处理器将源程序文件中出现的对宏的引用展开成相应的宏 定义，即本文所说的#define的功能，由预处理器来完成 预处理器将源程序文件中出现的对宏的引用展开成相应的宏 定义，即本文所说的#define的功能，由预处理器来完成。"></a>预处理器将源程序文件中出现的对宏的引用展开成相应的宏 定义，即本文所说的#define的功能，由预处理器来完成 预处理器将源程序文件中出现的对宏的引用展开成相应的宏 定义，即本文所说的#define的功能，由预处理器来完成。</h6><h6 id="经过预处理器处理的源程序与之前的源程序有所有不同，在这个阶段所进行的工作只是纯粹的替换与展开，没有任何计算功能，所以在学习-define命令时只要能真正理解这一点，这样才不会对此命令引起误解并误用。-经过预处理器处理的源程序与之前的源程序有所有不同，在这个阶段所进行的工作只是纯粹的替换与展开，没有任何计算功能，所以在学习-define命令时只要能真正理解这一点，这样才不会对此命令引起误解并误用。"><a href="#经过预处理器处理的源程序与之前的源程序有所有不同，在这个阶段所进行的工作只是纯粹的替换与展开，没有任何计算功能，所以在学习-define命令时只要能真正理解这一点，这样才不会对此命令引起误解并误用。-经过预处理器处理的源程序与之前的源程序有所有不同，在这个阶段所进行的工作只是纯粹的替换与展开，没有任何计算功能，所以在学习-define命令时只要能真正理解这一点，这样才不会对此命令引起误解并误用。" class="headerlink" title="经过预处理器处理的源程序与之前的源程序有所有不同，在这个阶段所进行的工作只是纯粹的替换与展开，没有任何计算功能，所以在学习#define命令时只要能真正理解这一点，这样才不会对此命令引起误解并误用。 经过预处理器处理的源程序与之前的源程序有所有不同，在这个阶段所进行的工作只是纯粹的替换与展开，没有任何计算功能，所以在学习#define命令时只要能真正理解这一点，这样才不会对此命令引起误解并误用。"></a>经过预处理器处理的源程序与之前的源程序有所有不同，在这个阶段所进行的工作只是纯粹的替换与展开，没有任何计算功能，所以在学习#define命令时只要能真正理解这一点，这样才不会对此命令引起误解并误用。 经过预处理器处理的源程序与之前的源程序有所有不同，在这个阶段所进行的工作只是纯粹的替换与展开，没有任何计算功能，所以在学习#define命令时只要能真正理解这一点，这样才不会对此命令引起误解并误用。</h6><h3 id="define使用中的常见问题解析"><a href="#define使用中的常见问题解析" class="headerlink" title="#define使用中的常见问题解析"></a><code>#define</code>使用中的常见问题解析</h3><ul>
<li>简单宏定义使用中出现的问题<br>  在简单宏定义的使用中，当替换文本所表示的字符串为一个表达式时，容易引起误解和误用。如下例：<code>#define N 2+2</code></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> N 2+2</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a=N*N;</span><br><span class="line"><span class="built_in">printf</span>(“%d”,a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 打印输出为 2+2*2+2 = 8</span></span><br><span class="line"><span class="comment">// 但我们实际想要结果为16 所以将#define 修改为 #define N (2+2) 可以避免出现运算符优先级的问题.</span></span><br></pre></td></tr></table></figure>

<h5 id="1-带参数的宏定义出现的问题"><a href="#1-带参数的宏定义出现的问题" class="headerlink" title="1. 带参数的宏定义出现的问题"></a>1. 带参数的宏定义出现的问题</h5><h6 id="在带参数的宏定义的使用中，极易引起误解。例如我们需要做个宏替换能求任何数的平方，这就需要使用参数，以便在程序中用实际参数来替换宏定义中的参数。一般容易写成如下形式：-define-area-x-x-x这在使用中是很容易出现问题的，看如下的程序-在带参数的宏定义的使用中，极易引起误解。例如我们需要做个宏替换能求任何数的平方，这就需要使用参数，以便在程序中用实际参数来替换宏定义中的参数。一般容易写成如下形式：-define-area-x-x-x这在使用中是很容易出现问题的，看如下的程序"><a href="#在带参数的宏定义的使用中，极易引起误解。例如我们需要做个宏替换能求任何数的平方，这就需要使用参数，以便在程序中用实际参数来替换宏定义中的参数。一般容易写成如下形式：-define-area-x-x-x这在使用中是很容易出现问题的，看如下的程序-在带参数的宏定义的使用中，极易引起误解。例如我们需要做个宏替换能求任何数的平方，这就需要使用参数，以便在程序中用实际参数来替换宏定义中的参数。一般容易写成如下形式：-define-area-x-x-x这在使用中是很容易出现问题的，看如下的程序" class="headerlink" title="在带参数的宏定义的使用中，极易引起误解。例如我们需要做个宏替换能求任何数的平方，这就需要使用参数，以便在程序中用实际参数来替换宏定义中的参数。一般容易写成如下形式：#define area(x) x*x这在使用中是很容易出现问题的，看如下的程序 在带参数的宏定义的使用中，极易引起误解。例如我们需要做个宏替换能求任何数的平方，这就需要使用参数，以便在程序中用实际参数来替换宏定义中的参数。一般容易写成如下形式：#define area(x) x*x这在使用中是很容易出现问题的，看如下的程序"></a>在带参数的宏定义的使用中，极易引起误解。例如我们需要做个宏替换能求任何数的平方，这就需要使用参数，以便在程序中用实际参数来替换宏定义中的参数。一般容易写成如下形式：<code>#define area(x) x*x</code>这在使用中是很容易出现问题的，看如下的程序 在带参数的宏定义的使用中，极易引起误解。例如我们需要做个宏替换能求任何数的平方，这就需要使用参数，以便在程序中用实际参数来替换宏定义中的参数。一般容易写成如下形式：<code>#define area(x) x*x</code>这在使用中是很容易出现问题的，看如下的程序</h6><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="type">int</span> y = <span class="built_in">area</span>(<span class="number">2</span><span class="number">+2</span>);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">将 宏展开替换为 area(2+2*2+2)  还是运算符优先级的问题，最好的写法将我们的参数给加上()</span></span><br><span class="line"><span class="comment">#define area(x) (x)*(x)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h6 id="要想能够真正使用好宏定义，那么在读别人的程序时，一定要记住先将程序中对宏的使用全部替换成它所代表的字符串，不要自作主张地添加任何其他符号，完全展开后再进行相应的计算，就不会写错运行结果。"><a href="#要想能够真正使用好宏定义，那么在读别人的程序时，一定要记住先将程序中对宏的使用全部替换成它所代表的字符串，不要自作主张地添加任何其他符号，完全展开后再进行相应的计算，就不会写错运行结果。" class="headerlink" title="要想能够真正使用好宏定义，那么在读别人的程序时，一定要记住先将程序中对宏的使用全部替换成它所代表的字符串，不要自作主张地添加任何其他符号，完全展开后再进行相应的计算，就不会写错运行结果。"></a>要想能够真正使用好宏定义，那么在读别人的程序时，一定要记住先将程序中对宏的使用全部替换成它所代表的字符串，不要自作主张地添加任何其他符号，完全展开后再进行相应的计算，就不会写错运行结果。</h6><h6 id="如果是自己编程使用宏替换，则在使用简单宏定义时，当字符串中不只一个符号时，加上括号表现出优先级，如果是带参数的宏定义，则要给宏体中的每个参数加上括号，并在整个宏体上再加一个括号。看到这里，不禁要问，用宏定义这么麻烦，这么容易出错，可不可以摒弃它，-那让我们来看一下在C语言中用宏定义的好处吧。"><a href="#如果是自己编程使用宏替换，则在使用简单宏定义时，当字符串中不只一个符号时，加上括号表现出优先级，如果是带参数的宏定义，则要给宏体中的每个参数加上括号，并在整个宏体上再加一个括号。看到这里，不禁要问，用宏定义这么麻烦，这么容易出错，可不可以摒弃它，-那让我们来看一下在C语言中用宏定义的好处吧。" class="headerlink" title="如果是自己编程使用宏替换，则在使用简单宏定义时，当字符串中不只一个符号时，加上括号表现出优先级，如果是带参数的宏定义，则要给宏体中的每个参数加上括号，并在整个宏体上再加一个括号。看到这里，不禁要问，用宏定义这么麻烦，这么容易出错，可不可以摒弃它， 那让我们来看一下在C语言中用宏定义的好处吧。"></a>如果是自己编程使用宏替换，则在使用简单宏定义时，当字符串中不只一个符号时，加上括号表现出优先级，如果是带参数的宏定义，则要给宏体中的每个参数加上括号，并在整个宏体上再加一个括号。看到这里，不禁要问，用宏定义这么麻烦，这么容易出错，可不可以摒弃它， 那让我们来看一下在C语言中用宏定义的好处吧。</h6><h3 id="宏定义的优点"><a href="#宏定义的优点" class="headerlink" title="宏定义的优点"></a>宏定义的优点</h3><h5 id="1-方便程序的修改"><a href="#1-方便程序的修改" class="headerlink" title="1. 方便程序的修改"></a>1. 方便程序的修改</h5><h6 id="使用简单宏定义可用宏代替一个在程序中经常使用的常量，这样在将该常量改变时，不用对整个程序进行修改，只修改宏定义的字符串即可，而且当常量比较长时，-我们可以用较短的有意义的标识符来写程序，这样更方便一些。我们所说的常量改变不是在程序运行期间改变，而是在编程期间的修改，举一个大家比较熟悉的例子，圆周率π是在数学上常用的一个值，有时我们会用3-14来表示，有时也会用3-1415926等，这要看计算所需要的精度，如果我们编制的一个程序中-要多次使用它，那么需要确定一个数值，在本次运行中不改变，但也许后来发现程序所表现的精度有变化，需要改变它的值，-这就需要修改程序中所有的相关数值，这会给我们带来一定的不便，但如果使用宏定义，使用一个标识符来代替，则在修改时只修改宏定义即可，还可以减少输入-3-1415926这样长的数值多次的情况，我们可以如此定义-define-pi-3-1415926，既减少了输入又便于修改-使用简单宏定义可用宏代替一个在程序中经常使用的常量，这样在将该常量改变时，不用对整个程序进行修改，只修改宏定义的字符串即可，而且当常量比较长时，-我们可以用较短的有意义的标识符来写程序，这样更方便一些。我们所说的常量改变不是在程序运行期间改变，而是在编程期间的修改，举一个大家比较熟悉的例子，圆周率π是在数学上常用的一个值，有时我们会用3-14来表示，有时也会用3-1415926等，这要看计算所需要的精度，如果我们编制的一个程序中-要多次使用它，那么需要确定一个数值，在本次运行中不改变，但也许后来发现程序所表现的精度有变化，需要改变它的值，-这就需要修改程序中所有的相关数值，这会给我们带来一定的不便，但如果使用宏定义，使用一个标识符来代替，则在修改时只修改宏定义即可，还可以减少输入-3-1415926这样长的数值多次的情况，我们可以如此定义-define-pi-3-1415926，既减少了输入又便于修改"><a href="#使用简单宏定义可用宏代替一个在程序中经常使用的常量，这样在将该常量改变时，不用对整个程序进行修改，只修改宏定义的字符串即可，而且当常量比较长时，-我们可以用较短的有意义的标识符来写程序，这样更方便一些。我们所说的常量改变不是在程序运行期间改变，而是在编程期间的修改，举一个大家比较熟悉的例子，圆周率π是在数学上常用的一个值，有时我们会用3-14来表示，有时也会用3-1415926等，这要看计算所需要的精度，如果我们编制的一个程序中-要多次使用它，那么需要确定一个数值，在本次运行中不改变，但也许后来发现程序所表现的精度有变化，需要改变它的值，-这就需要修改程序中所有的相关数值，这会给我们带来一定的不便，但如果使用宏定义，使用一个标识符来代替，则在修改时只修改宏定义即可，还可以减少输入-3-1415926这样长的数值多次的情况，我们可以如此定义-define-pi-3-1415926，既减少了输入又便于修改-使用简单宏定义可用宏代替一个在程序中经常使用的常量，这样在将该常量改变时，不用对整个程序进行修改，只修改宏定义的字符串即可，而且当常量比较长时，-我们可以用较短的有意义的标识符来写程序，这样更方便一些。我们所说的常量改变不是在程序运行期间改变，而是在编程期间的修改，举一个大家比较熟悉的例子，圆周率π是在数学上常用的一个值，有时我们会用3-14来表示，有时也会用3-1415926等，这要看计算所需要的精度，如果我们编制的一个程序中-要多次使用它，那么需要确定一个数值，在本次运行中不改变，但也许后来发现程序所表现的精度有变化，需要改变它的值，-这就需要修改程序中所有的相关数值，这会给我们带来一定的不便，但如果使用宏定义，使用一个标识符来代替，则在修改时只修改宏定义即可，还可以减少输入-3-1415926这样长的数值多次的情况，我们可以如此定义-define-pi-3-1415926，既减少了输入又便于修改" class="headerlink" title="使用简单宏定义可用宏代替一个在程序中经常使用的常量，这样在将该常量改变时，不用对整个程序进行修改，只修改宏定义的字符串即可，而且当常量比较长时， 我们可以用较短的有意义的标识符来写程序，这样更方便一些。我们所说的常量改变不是在程序运行期间改变，而是在编程期间的修改，举一个大家比较熟悉的例子，圆周率π是在数学上常用的一个值，有时我们会用3.14来表示，有时也会用3.1415926等，这要看计算所需要的精度，如果我们编制的一个程序中 要多次使用它，那么需要确定一个数值，在本次运行中不改变，但也许后来发现程序所表现的精度有变化，需要改变它的值， 这就需要修改程序中所有的相关数值，这会给我们带来一定的不便，但如果使用宏定义，使用一个标识符来代替，则在修改时只修改宏定义即可，还可以减少输入 3.1415926这样长的数值多次的情况，我们可以如此定义 #define pi 3.1415926，既减少了输入又便于修改 使用简单宏定义可用宏代替一个在程序中经常使用的常量，这样在将该常量改变时，不用对整个程序进行修改，只修改宏定义的字符串即可，而且当常量比较长时， 我们可以用较短的有意义的标识符来写程序，这样更方便一些。我们所说的常量改变不是在程序运行期间改变，而是在编程期间的修改，举一个大家比较熟悉的例子，圆周率π是在数学上常用的一个值，有时我们会用3.14来表示，有时也会用3.1415926等，这要看计算所需要的精度，如果我们编制的一个程序中 要多次使用它，那么需要确定一个数值，在本次运行中不改变，但也许后来发现程序所表现的精度有变化，需要改变它的值， 这就需要修改程序中所有的相关数值，这会给我们带来一定的不便，但如果使用宏定义，使用一个标识符来代替，则在修改时只修改宏定义即可，还可以减少输入 3.1415926这样长的数值多次的情况，我们可以如此定义 #define pi 3.1415926，既减少了输入又便于修改"></a>使用简单宏定义可用宏代替一个在程序中经常使用的常量，这样在将该常量改变时，不用对整个程序进行修改，只修改宏定义的字符串即可，而且当常量比较长时， 我们可以用较短的有意义的标识符来写程序，这样更方便一些。我们所说的常量改变不是在程序运行期间改变，而是在编程期间的修改，举一个大家比较熟悉的例子，圆周率π是在数学上常用的一个值，有时我们会用3.14来表示，有时也会用3.1415926等，这要看计算所需要的精度，如果我们编制的一个程序中 要多次使用它，那么需要确定一个数值，在本次运行中不改变，但也许后来发现程序所表现的精度有变化，需要改变它的值， 这就需要修改程序中所有的相关数值，这会给我们带来一定的不便，但如果使用宏定义，使用一个标识符来代替，则在修改时只修改宏定义即可，还可以减少输入 3.1415926这样长的数值多次的情况，我们可以如此定义 #define pi 3.1415926，既减少了输入又便于修改 使用简单宏定义可用宏代替一个在程序中经常使用的常量，这样在将该常量改变时，不用对整个程序进行修改，只修改宏定义的字符串即可，而且当常量比较长时， 我们可以用较短的有意义的标识符来写程序，这样更方便一些。我们所说的常量改变不是在程序运行期间改变，而是在编程期间的修改，举一个大家比较熟悉的例子，圆周率π是在数学上常用的一个值，有时我们会用3.14来表示，有时也会用3.1415926等，这要看计算所需要的精度，如果我们编制的一个程序中 要多次使用它，那么需要确定一个数值，在本次运行中不改变，但也许后来发现程序所表现的精度有变化，需要改变它的值， 这就需要修改程序中所有的相关数值，这会给我们带来一定的不便，但如果使用宏定义，使用一个标识符来代替，则在修改时只修改宏定义即可，还可以减少输入 3.1415926这样长的数值多次的情况，我们可以如此定义 #define pi 3.1415926，既减少了输入又便于修改</h6><h5 id="2-提高程序的运行效率"><a href="#2-提高程序的运行效率" class="headerlink" title="2. 提高程序的运行效率"></a>2. 提高程序的运行效率</h5><h6 id="使用带参数的宏定义可完成函数调用的功能，又能减少系统开销，提高运行效率。正如C语言中所讲，函数的使用可以使程序更加模块化，便于组织，而且可重复利用，但在发生函数调用时，需要保留调用函数的现场，以便子-函数执行结束后能返回继续执行，同样在子函数执行完后要恢复调用函数的现场，这都需要一定的时间，如果子函数执行的操作比较多，这种转换时间开销可以忽-略，但如果子函数完成的功能比较少，甚至于只完成一点操作，如一个乘法语句的操作，则这部分转换开销就相对较大了，但使用带参数的宏定义就不会出现这个问-题，因为它是在预处理阶段即进行了宏展开，在执行时不需要转换，即在当地执行。宏定义可完成简单的操作，但复杂的操作还是要由函数调用来完成，而且宏定义所占用的目标代码空间相对较大。所以在使用时要依据具体情况来决定是否使用宏定义。-使用带参数的宏定义可完成函数调用的功能，又能减少系统开销，提高运行效率。正如C语言中所讲，函数的使用可以使程序更加模块化，便于组织，而且可重复利用，但在发生函数调用时，需要保留调用函数的现场，以便子-函数执行结束后能返回继续执行，同样在子函数执行完后要恢复调用函数的现场，这都需要一定的时间，如果子函数执行的操作比较多，这种转换时间开销可以忽-略，但如果子函数完成的功能比较少，甚至于只完成一点操作，如一个乘法语句的操作，则这部分转换开销就相对较大了，但使用带参数的宏定义就不会出现这个问-题，因为它是在预处理阶段即进行了宏展开，在执行时不需要转换，即在当地执行。宏定义可完成简单的操作，但复杂的操作还是要由函数调用来完成，而且宏定义所占用的目标代码空间相对较大。所以在使用时要依据具体情况来决定是否使用宏定义。"><a href="#使用带参数的宏定义可完成函数调用的功能，又能减少系统开销，提高运行效率。正如C语言中所讲，函数的使用可以使程序更加模块化，便于组织，而且可重复利用，但在发生函数调用时，需要保留调用函数的现场，以便子-函数执行结束后能返回继续执行，同样在子函数执行完后要恢复调用函数的现场，这都需要一定的时间，如果子函数执行的操作比较多，这种转换时间开销可以忽-略，但如果子函数完成的功能比较少，甚至于只完成一点操作，如一个乘法语句的操作，则这部分转换开销就相对较大了，但使用带参数的宏定义就不会出现这个问-题，因为它是在预处理阶段即进行了宏展开，在执行时不需要转换，即在当地执行。宏定义可完成简单的操作，但复杂的操作还是要由函数调用来完成，而且宏定义所占用的目标代码空间相对较大。所以在使用时要依据具体情况来决定是否使用宏定义。-使用带参数的宏定义可完成函数调用的功能，又能减少系统开销，提高运行效率。正如C语言中所讲，函数的使用可以使程序更加模块化，便于组织，而且可重复利用，但在发生函数调用时，需要保留调用函数的现场，以便子-函数执行结束后能返回继续执行，同样在子函数执行完后要恢复调用函数的现场，这都需要一定的时间，如果子函数执行的操作比较多，这种转换时间开销可以忽-略，但如果子函数完成的功能比较少，甚至于只完成一点操作，如一个乘法语句的操作，则这部分转换开销就相对较大了，但使用带参数的宏定义就不会出现这个问-题，因为它是在预处理阶段即进行了宏展开，在执行时不需要转换，即在当地执行。宏定义可完成简单的操作，但复杂的操作还是要由函数调用来完成，而且宏定义所占用的目标代码空间相对较大。所以在使用时要依据具体情况来决定是否使用宏定义。" class="headerlink" title="使用带参数的宏定义可完成函数调用的功能，又能减少系统开销，提高运行效率。正如C语言中所讲，函数的使用可以使程序更加模块化，便于组织，而且可重复利用，但在发生函数调用时，需要保留调用函数的现场，以便子 函数执行结束后能返回继续执行，同样在子函数执行完后要恢复调用函数的现场，这都需要一定的时间，如果子函数执行的操作比较多，这种转换时间开销可以忽 略，但如果子函数完成的功能比较少，甚至于只完成一点操作，如一个乘法语句的操作，则这部分转换开销就相对较大了，但使用带参数的宏定义就不会出现这个问 题，因为它是在预处理阶段即进行了宏展开，在执行时不需要转换，即在当地执行。宏定义可完成简单的操作，但复杂的操作还是要由函数调用来完成，而且宏定义所占用的目标代码空间相对较大。所以在使用时要依据具体情况来决定是否使用宏定义。 使用带参数的宏定义可完成函数调用的功能，又能减少系统开销，提高运行效率。正如C语言中所讲，函数的使用可以使程序更加模块化，便于组织，而且可重复利用，但在发生函数调用时，需要保留调用函数的现场，以便子 函数执行结束后能返回继续执行，同样在子函数执行完后要恢复调用函数的现场，这都需要一定的时间，如果子函数执行的操作比较多，这种转换时间开销可以忽 略，但如果子函数完成的功能比较少，甚至于只完成一点操作，如一个乘法语句的操作，则这部分转换开销就相对较大了，但使用带参数的宏定义就不会出现这个问 题，因为它是在预处理阶段即进行了宏展开，在执行时不需要转换，即在当地执行。宏定义可完成简单的操作，但复杂的操作还是要由函数调用来完成，而且宏定义所占用的目标代码空间相对较大。所以在使用时要依据具体情况来决定是否使用宏定义。"></a>使用带参数的宏定义可完成函数调用的功能，又能减少系统开销，提高运行效率。正如C语言中所讲，函数的使用可以使程序更加模块化，便于组织，而且可重复利用，但在发生函数调用时，需要保留调用函数的现场，以便子 函数执行结束后能返回继续执行，同样在子函数执行完后要恢复调用函数的现场，这都需要一定的时间，如果子函数执行的操作比较多，这种转换时间开销可以忽 略，但如果子函数完成的功能比较少，甚至于只完成一点操作，如一个乘法语句的操作，则这部分转换开销就相对较大了，但使用带参数的宏定义就不会出现这个问 题，因为它是在预处理阶段即进行了宏展开，在执行时不需要转换，即在当地执行。宏定义可完成简单的操作，但复杂的操作还是要由函数调用来完成，而且宏定义所占用的目标代码空间相对较大。所以在使用时要依据具体情况来决定是否使用宏定义。 使用带参数的宏定义可完成函数调用的功能，又能减少系统开销，提高运行效率。正如C语言中所讲，函数的使用可以使程序更加模块化，便于组织，而且可重复利用，但在发生函数调用时，需要保留调用函数的现场，以便子 函数执行结束后能返回继续执行，同样在子函数执行完后要恢复调用函数的现场，这都需要一定的时间，如果子函数执行的操作比较多，这种转换时间开销可以忽 略，但如果子函数完成的功能比较少，甚至于只完成一点操作，如一个乘法语句的操作，则这部分转换开销就相对较大了，但使用带参数的宏定义就不会出现这个问 题，因为它是在预处理阶段即进行了宏展开，在执行时不需要转换，即在当地执行。宏定义可完成简单的操作，但复杂的操作还是要由函数调用来完成，而且宏定义所占用的目标代码空间相对较大。所以在使用时要依据具体情况来决定是否使用宏定义。</h6><h2 id="define中的三个特殊符号：-，-，"><a href="#define中的三个特殊符号：-，-，" class="headerlink" title="#define中的三个特殊符号：#，##，#@"></a><code>#define</code>中的三个特殊符号：<code>#</code>，<code>##</code>，<code>#@</code></h2><ol>
<li><code>#define Conn(x,y) x##y</code></li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">x#<span class="meta">#y表示什么？表示x连接y，举例说：</span></span><br><span class="line"><span class="type">int</span> n = <span class="built_in">Conn</span>(<span class="number">123</span>,<span class="number">456</span>); <span class="comment">/* 结果就是n=123456;*/</span></span><br><span class="line"><span class="type">char</span>* str = <span class="built_in">Conn</span>(<span class="string">&quot;asdf&quot;</span>, <span class="string">&quot;adf&quot;</span>); /结果就是 str = <span class="string">&quot;asdfadf&quot;</span>;/</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><code>#define ToChar(x) #@x</code></li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">#@x，其实就是给x加上单引号，结果返回是一个<span class="type">const</span> <span class="type">char</span></span><br><span class="line"><span class="type">char</span> a = <span class="built_in">ToChar</span>(<span class="number">1</span>);结果就是a=<span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">但是如果你的参数超过四个字符，编译器就给给你报错了！</span><br><span class="line">error C2015: too many characters in constant   ：P</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><code>#define ToString(x) #x</code></li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// #x 是给x 加上双引号</span></span><br><span class="line"><span class="comment">// 看下面一段返回字符串的代码</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Level</span>&#123;</span><br><span class="line">  DEBUG,</span><br><span class="line">  INFO,</span><br><span class="line">  WARN,</span><br><span class="line">  ERROR,</span><br><span class="line">  FATAL</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">const</span> <span class="type">char</span>* <span class="title">toString</span><span class="params">(Level level)</span>  </span>&#123;</span><br><span class="line">  string str;</span><br><span class="line">  <span class="keyword">switch</span> (level) &#123;</span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> XX(name) \</span></span><br><span class="line"><span class="meta">    case Level::name: \</span></span><br><span class="line"><span class="meta">      return #name;\</span></span><br><span class="line"><span class="meta">      break;</span></span><br><span class="line">    <span class="built_in">XX</span>(DEBUG);</span><br><span class="line">    <span class="built_in">XX</span>(INFO);</span><br><span class="line">    <span class="built_in">XX</span>(WARN);</span><br><span class="line">    <span class="built_in">XX</span>(ERROR);</span><br><span class="line">    <span class="built_in">XX</span>(FATAL);</span><br><span class="line">    <span class="meta">#<span class="keyword">undef</span> XX</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;unknow&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">  cout&lt;&lt;<span class="built_in">toString</span>(DEBUG);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出DEBUG,</span></span><br></pre></td></tr></table></figure>

<h2 id="常用的一些宏定义"><a href="#常用的一些宏定义" class="headerlink" title="常用的一些宏定义"></a>常用的一些宏定义</h2><ul>
<li>防止一个头文件被重复包含</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> BODYDEF_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BODYDEF_H </span></span><br><span class="line">...</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>得到一个field在结构体(struct)中的偏移量<br>  <code>#define OFFSETOF( type, field ) ( (size_t) &amp;(( type *) 0)-&gt; field )</code></li>
<li>得到一个结构体中field所占用的字节数<br>  <code>#define FSIZ( type, field ) sizeof( ((type *) 0)-&gt;field )</code></li>
<li>将一个字母转换为大写<br>  <code>#define UPCASE(c) ( ((c) &gt;= &#39;&#39;a&#39;&#39; &amp;&amp; (c) &lt;= &#39;&#39;z&#39;&#39;) ? ((c) - 0x20) : (c) )</code></li>
<li>判断字符是不是10进值的数字<br>  <code>#define DECCHK( c ) ((c) &gt;= &#39;&#39;0&#39;&#39; &amp;&amp; (c) &lt;= &#39;&#39;9&#39;&#39;)</code></li>
<li>判断字符是不是16进值的数字<br>  <code>#define HEXCHK( c ) ( ((c) &gt;= &#39;&#39;0&#39;&#39; &amp;&amp; (c) &lt;= &#39;&#39;9&#39;&#39;) ||((c) &gt;= &#39;&#39;A&#39;&#39; &amp;&amp; (c) &lt;= &#39;&#39;F&#39;&#39;) ||((c) &gt;= &#39;&#39;a&#39;&#39; &amp;&amp; (c) &lt;= &#39;&#39;f&#39;&#39;) )</code></li>
<li>防止溢出的一个方法<br>  <code>#define INC_SAT( val ) (val = ((val)+1 &gt; (val)) ? (val)+1 : (val))</code></li>
<li>返回数组元素的个数<br>  <code>#define ARR_SIZE( a ) ( sizeof( (a) ) / sizeof( (a[0]) ) )</code></li>
<li>使用一些宏跟踪调试<br>  ANSI标准说明了五个预定义的宏名。它们是:</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">__LINE__  行号</span><br><span class="line">__FILE__  </span><br><span class="line">__DATE__</span><br><span class="line">__TIME__</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
        <category>c++</category>
      </categories>
  </entry>
  <entry>
    <title>C++ Boa服务器使用</title>
    <url>/2024/07/22/Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BABOA%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<h2 id="BOA-服务器介绍"><a href="#BOA-服务器介绍" class="headerlink" title="BOA 服务器介绍"></a>BOA 服务器介绍</h2><p>BOA 是一个单任务的小型HTTP服务器，源代码开放，支持认证，CGI等功能，性能优越，适合在嵌入式系统中。</p>
<span id="more"></span>  
<h2 id="BOA服务器搭建"><a href="#BOA服务器搭建" class="headerlink" title="BOA服务器搭建"></a>BOA服务器搭建</h2><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>源码链接：<a href="http://www.boa.org/" title="BOA源码">BOA源码</a></p>
<h3 id="源码安装"><a href="#源码安装" class="headerlink" title="源码安装"></a>源码安装</h3><p>下载完成后在linux下直接解压<br><code>tar -xvf boa-0.94.13.tar.gz</code></p>
<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>首先需要安装两个解析工具<br><code>sudo apt-get install bison</code><br><code>sudo apt-get install flex</code></p>
<h3 id="准备编译"><a href="#准备编译" class="headerlink" title="准备编译"></a>准备编译</h3><p>我下载的BOA源码为<strong>boa-0.94.13.tar.gz</strong>,解压完成后的目录为boa-0.94.13,进入目录中的src文件中<br><code>cd boa-0.94.13/src</code><br>– 修改文件内容<br>修改src&#x2F;compat.h:<br><code>#define TIMEZONE_OFFSET(foo) foo##-&gt;tm_gmtoff</code><br>修改为<br><code>#define TIMEZONE_OFFSET(foo) (foo)-&gt;tm_gmtoff</code></p>
<ul>
<li><img src="http://isroot.cn/wp-content/uploads/2019/11/boa%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6.png" alt="将图片中的代码进行注释掉" title="将图片中的代码进行注释掉"></li>
</ul>
<h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><ul>
<li>在src目录下执行<br>  <code>.congfigure</code><br>  如果想指定编译完成后的目录请使用<code>--prefix</code><br>  例如:<code>./configure --prefix=/*你的目录*/</code><br>  我这里直接配置，并未指定目录</li>
<li>如果需要编译arm版本的boa服务器，在配置的时候使用<code>./configure --prefix=/*你的生成目录*/ --host=/*你的arm交叉编译器*/</code>,例如我的配置为<code>./configure --prefix=./install --host=arm-hisiv400-linux-gcc</code></li>
<li>执行<code>make</code>进行编译，如果未指定目录，编译完成后的可执行文件就在当前目录下</li>
</ul>
<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><ul>
<li>创建运行目录<code>sudo mkdir /etc/boa</code><br>  将boa-0.94.13目录下的boa.conf拷贝过去<br>  <code>sudo cp boa.conf /etc/boa</code></li>
<li>修改boa.conf配置文件<br>  修改内容为:</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#Group nogroup</span><br><span class="line">Group 0</span><br><span class="line">#AccessLog /var/log/boa/access_log</span><br><span class="line">#ScriptAlias /cgi-bin/ /usr/lib/cgi-bin/</span><br><span class="line">ScriptAlias /cgi-bin/ /var/www/cgi-bin/</span><br></pre></td></tr></table></figure>

<p>现在可以运行我们的程序了<br>如果make时未指定目录则在boa-0.94.13&#x2F;src目录下执行<code>sudo ./boa</code>。如果指定了目录则去指定的目录下执行<br>这时我们的boa服务器已经运行</p>
<h3 id="查看运行的服务器"><a href="#查看运行的服务器" class="headerlink" title="查看运行的服务器"></a>查看运行的服务器</h3><p>我们在&#x2F;var&#x2F;www目录下写个index.html文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;/&gt;</span><br><span class="line">&lt;title&gt;BOA服务器&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h2&gt;this is my boa server&lt;/h2&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
        <category>c++</category>
        <category>网络编程</category>
      </categories>
  </entry>
  <entry>
    <title>nfs 使用总结</title>
    <url>/2024/07/22/NFS%20%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="将文件从ubuntu拷贝到linux开发板"><a href="#将文件从ubuntu拷贝到linux开发板" class="headerlink" title="将文件从ubuntu拷贝到linux开发板"></a>将文件从ubuntu拷贝到linux开发板</h1><blockquote>
<p>要把文件拷贝到 linux开发板上（以海思开发板为例），通过网络传输，比如使用nfs，这个方法需要配置好网络。</p>
</blockquote>
<h2 id="使用nfs拷贝"><a href="#使用nfs拷贝" class="headerlink" title="使用nfs拷贝"></a><strong>使用nfs拷贝</strong></h2><p>要使用nfs服务，需要配置好nfs和ssh 使用这个命令安装nfs： <code>sudo apt-get install nfs-kernel-server rpcbind</code> nfs安装完成后创建一个nfs文件夹，后续需要通过nfs传输的文件都放在这个文件夹里。 接下来配置nfs，打开 &#x2F;etc&#x2F;exports 以后在后面添加如下所示内容：</p>
<span id="more"></span>  


<blockquote>
<p>nfs文件夹绝对地址 *(rw,sync,no_root_squash)</p>
</blockquote>
<p>例如：</p>
<blockquote>
<p>&#x2F;home&#x2F;xxx&#x2F;nfs *(rw,sync,no_root_squash)</p>
</blockquote>
<p>完成后重启nfs服务</p>
<p><code>sudo /etc/init.d/nfs-kernel-server restart</code></p>
<p>至此，nfs就配置完成了。</p>
<p>配置好nfs后，就可以使用nfs拷贝文件了。我使用的方法是将文件拷贝到nfs文件夹，直接将nfs文件夹通过网络挂载到开发板上，然后从nfs文件夹中直接复制所需的文件到开发板上,例如： <code>mount -t nfs -o nolock,nfsver=3 192.168.1.108:/home/xxx/linux/nfs /mnt</code></p>
<p>格式为</p>
<blockquote>
<p>mount -t nfs -o nolock,nfsvers&#x3D;3 Ubuntu系统对应的ip地址:nfs文件夹绝对地址 文件要挂载在开发板的地址</p>
</blockquote>
<p>挂载完成后进入对应的文件夹进行拷贝<code>cd /mnt</code></p>
<p>拷贝完成后，一样是使用umount卸载</p>
<p><code>umount /mnt</code></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>linux</category>
        <category>shell</category>
      </categories>
  </entry>
  <entry>
    <title>nodejs安装</title>
    <url>/2024/07/22/Nodejs%20%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><ul>
<li>在腾讯云服务器上安装node.js，使用源码安装的方式<br>  <code>wget https://nodejs.org/dist/v12.18.4/node-v12.18.4.tar.gz</code></li>
</ul>
<h4 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h4><ul>
<li>将下载的源码包解压到当先文件下<br>  <code>tar -xvf node-v12.18.4.tar.gz</code></li>
</ul>
<span id="more"></span>  

<h4 id="配置和编译"><a href="#配置和编译" class="headerlink" title="配置和编译"></a>配置和编译</h4><ul>
<li>进入目录<br>  <code>cd node-v12.8.4</code></li>
<li>配置安装目录<br>  <code>./configure --prefix=/usr/local/node</code><br>  configure 完成后提示gcc 版本过低，在centos 上升级gcc编译器,如果没有提示gcc版本则不用升级</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install -y centos-release-scl</span><br><span class="line">//这里安装gcc 8的版本</span><br><span class="line">yum install -y devtoolset-8-gcc devtoolset-8-gcc-c++</span><br><span class="line">//值得说明的是这些软件包可以同时安装，不会相互覆盖和冲突，也不会覆盖系统的版本。即可以在统中可同时存在gcc 6, gcc 7, gcc 8等多个版本。因为不会覆盖系统默认的gcc，使用这些软件的方法有四种：</span><br><span class="line">1.使用绝对路径；</span><br><span class="line">2.添加可执行文件路径到PATH环境变量；</span><br><span class="line">3.使用官方推荐的加载命令：scl enable devtoolset-x bash, x为要启用的版本;</span><br><span class="line">4.执行安装软件自带的脚本： source /opt/rh/devtoolset-x/enable，x为要启用的版本。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>进行编译<br>  <code>sudo make</code><br>  我在云服务器编译的，编译过程时间挺长的，慢慢等待吧.<br>  编译完成后<br>  <code>sudo make install</code></li>
</ul>
<h4 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h4><ul>
<li>安装完成后需要自己配置环境变量</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo  vim /etc/profile</span><br><span class="line">在PATH 那增加</span><br><span class="line">PATH=$PATH:/usr/local/node/bin</span><br></pre></td></tr></table></figure>

<p>重启设备</p>
<h4 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h4><p><a href="https://isrootblog-1251140236.cos.ap-beijing.myqcloud.com/uPic/ndDnRI.png" title="查看node版本"><img src="https://isrootblog-1251140236.cos.ap-beijing.myqcloud.com/uPic/ndDnRI.png" alt="查看node版本" title="查看node版本"></a></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>nodejs</category>
      </categories>
  </entry>
  <entry>
    <title>Posix线程</title>
    <url>/2024/07/22/Posix%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="Posix线程"><a href="#Posix线程" class="headerlink" title="Posix线程"></a>Posix线程</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a><strong>目录</strong></h2><ul>
<li><p><a href="#Pthread-API">Pthread API</a></p>
<ul>
<li><a href="#Pthread-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">Pthread 数据类型</a></li>
</ul>
</li>
<li><p><a href="#%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B">创建线程</a></p>
</li>
<li><p><a href="#%E7%BB%88%E6%AD%A2%E7%BA%BF%E7%A8%8B">终止线程</a></p>
</li>
<li><p><a href="#%E7%BA%BF%E7%A8%8BID">线程ID</a></p>
</li>
<li><p><a href="#%E8%BF%9E%E6%8E%A5joining%E5%B7%B2%E7%BB%88%E6%AD%A2%E7%9A%84%E7%BA%BF%E7%A8%8B">连接(joining)已终止的线程</a></p>
</li>
</ul>
<span id="more"></span>  

<h3 id="Pthread-API"><a href="#Pthread-API" class="headerlink" title="Pthread API"></a><strong>Pthread API</strong></h3><h4 id="Pthread-数据类型"><a href="#Pthread-数据类型" class="headerlink" title="Pthread 数据类型"></a>Pthread 数据类型</h4><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><strong>数据类型</strong></td>
<td><strong>描述</strong></td>
</tr>
<tr>
<td>pthread_t</td>
<td>线程ID</td>
</tr>
<tr>
<td>pthread_mutex_t</td>
<td>互斥对象(mutex_t)</td>
</tr>
<tr>
<td>pthread_mutexattr_t</td>
<td>互斥属性对象</td>
</tr>
<tr>
<td>pthread_cond_t</td>
<td>条件变量</td>
</tr>
<tr>
<td>pthread_condattr_t</td>
<td>条件变量的属性对象</td>
</tr>
<tr>
<td>pthread_key_t</td>
<td>线程特有数据的键</td>
</tr>
<tr>
<td>pthread_once_t</td>
<td>一次性初始化控制上下文</td>
</tr>
<tr>
<td>pthread_attr_t</td>
<td>线程的属性对象</td>
</tr>
</tbody></table>
<h3 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a><strong>创建线程</strong></h3><p>pthread 函数均以返回0表示成功，返回一正值表示失败。创建线程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;pthread.h&gt;</span><br><span class="line">int pthread_create(pthread_t * thread,const pthread_arr_t* arr,void*(*start)(void*),void* arg)</span><br><span class="line">​</span><br><span class="line">pthread_t *thread;</span><br><span class="line">int s;</span><br><span class="line">s = pthread_create(&amp;thread,NULL,func,&amp;arg);</span><br><span class="line">if(s != 0)&#123;</span><br><span class="line">  printf(&quot;线程创建失败&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>📌欲要保持程序可移植性，则在任何将要运行该应用的实现中，正常退出线程的返回值应不同于相应的PTHREAD_CANCELED值。</p>
</blockquote>
<h3 id="终止线程"><a href="#终止线程" class="headerlink" title="终止线程"></a><strong>终止线程</strong></h3><p>NaN. 线程 start 函数执行return 语句并返回指定值</p>
<p>NaN. 线程调用 <code>pthread_exit()</code></p>
<p>NaN. 调用 <code>pthread_cancel()</code> 取消线程</p>
<p>NaN. 任意线程调用了<code>exit()</code> 或者主线程执行了return 语句（在main()）主函数中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void pthread_exit(void * retval);</span><br><span class="line">// 参数retval 指定了线程的返回值，Retval 所指向的内容不应分配于线程栈中，因为线程终止后,将无法确定线程栈中的内容是否有效。</span><br><span class="line">​</span><br></pre></td></tr></table></figure>

<h3 id="线程ID"><a href="#线程ID" class="headerlink" title="线程ID"></a><strong>线程ID</strong></h3><p>线程ID会返回给<code>pthread_create()</code>的调用者，一个线程可以通过 <code>pthread_self()</code> 来获取自己的ID。</p>
<ul>
<li><p>不同的Pthreads函数利用线程ID来标识自己要操作的目标线程，这些函数包括<code>pthread_join()</code> <code>pthread_detach</code> <code>pthread_cancel</code> 和<code>pthread_kill</code> 等</p>
</li>
<li><p>在一些应用程序中，以特定线程的线程ID作为动态数据结构的标签，既可以用识别某个数据结构的创建者或者属主线程,又可以确定随后对该数据结构执行操作的具体线程</p>
</li>
</ul>
<p>函数<code>pthread_equal()</code> 可以检查两个线程ID是否相同</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int pthrad_equal(pthread_t t1,ptread_t t2);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>📌SUSv3并未要求将 pthread t实现为一个标量( scalar)类型,该类型也可以是一个结构 因此,下列显示线程D的代码实例并不具有可移植性(尽管该实例在包括 Linux在内的许多 实现上均可正常运行,而且有时在调试程序时还很实用)。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pthread_t thr;</span><br><span class="line">printf(Thread ID =%ld\n, (long) thr)</span><br><span class="line">/ WRONG! *</span><br></pre></td></tr></table></figure>

<h3 id="连接-joining-已终止的线程"><a href="#连接-joining-已终止的线程" class="headerlink" title="连接(joining)已终止的线程"></a><strong>连接(joining)已终止的线程</strong></h3><p>函数<code>pthread_join()</code>等待由thread标识的线程终止，</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>c++</category>
        <category>thread</category>
      </categories>
  </entry>
  <entry>
    <title>QtBase库安装和使用</title>
    <url>/2024/07/22/QtBase%20%E5%BA%93%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<ul>
<li>以前工作中用到的 Qt 比较多，对一些常用的 API 也比较熟悉，对比 std 来说，QString 比 std:: string 好用太多了。在做一个后台程序的时候，想着能不能把 Qt 的库搬过来用，但 Qt 库相对来说比较臃肿，想着怎么精简下，就有了这次的折腾记录。</li>
<li>Qt在github上有个<a href="https://github.com/qt/qtbase" title="qtBase">qtBase</a>里面只包含了Qt的基础东西,包含 QtCore,QWidget,gui,network等库。所以就把这个库clone 下来进行了编译和使用 。</li>
</ul>
<h3 id="下载和编译"><a href="#下载和编译" class="headerlink" title="下载和编译"></a>下载和编译</h3><span id="more"></span>  
<ul>
<li>下载<br>  <code>https://github.com/qt/qtbase.git</code><br>  我当时用的是5.12版本的 ，下载完成后记得切换成 5.12版本 <code>get checkout 5.12</code>,然后对比着<code>configure_help.tex</code> 文件把一些不太需要的库去掉了，写了个配置文件，这个配置只针对5.12版本，这个配置文件应该是有问题的，当时只想着精简，只留下个core，把所有能去掉的都去了，到后面使用出现了问题。配置文件如下，后续还需要更改再试,如果需要交叉编译，则需要配置platform等，<code>configure_help</code>里面有说明。这里我编译成静态库来使用。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">make clean</span></span><br><span class="line">echo &quot;------------- start-----------&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">配置编译目录</span></span><br><span class="line">./configure -prefix /usr/local/qt/ \</span><br><span class="line">-release \</span><br><span class="line">-static \</span><br><span class="line">-opensource \</span><br><span class="line">-confirm-license \</span><br><span class="line">-c++std 11 \</span><br><span class="line">-sqlite \</span><br><span class="line">-no-accessibility \</span><br><span class="line">-nomake tests \</span><br><span class="line">-no-gui \</span><br><span class="line">-no-widgets \</span><br><span class="line">-no-openssl \</span><br><span class="line">-no-journald \</span><br><span class="line">-no-syslog \</span><br><span class="line">-no-gif \</span><br><span class="line">-no-libpng \</span><br><span class="line">-no-libjpeg \</span><br><span class="line">-no-openssl \</span><br><span class="line">-no-libproxy \</span><br><span class="line">-eventfd \</span><br><span class="line">-inotify \</span><br><span class="line">-no-slog2 \</span><br><span class="line">-no-pps \</span><br><span class="line">-pkg-config \</span><br><span class="line">-nomake examples \</span><br><span class="line">-no-ico \</span><br><span class="line"></span><br><span class="line">echo &quot;---------make--------&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">gmake -j4 &amp;&amp; <span class="built_in">sudo</span> gmake install</span></span><br></pre></td></tr></table></figure>

<p>配置完成后用 gmake进行编译和安装就行。我这里安装到<code>/usr/local/qt</code> 目录下了。</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul>
<li>写一个简单的文件试了下</li>
</ul>
<p>main.cpp</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * @copyright: NING</span></span><br><span class="line"><span class="comment"> * @Date: 2021-09-14 09:33:48</span></span><br><span class="line"><span class="comment"> * @Author: WXN</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2021-09-14 17:25:07</span></span><br><span class="line"><span class="comment"> * @LastEditors:</span></span><br><span class="line"><span class="comment"> * @Description: </span></span><br><span class="line"><span class="comment"> * @FilePath: /qtProject/testlib/main.cpp</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QtCore/QObject&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QtCore/QString&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QtCore/QStringList&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QtCore/QVector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QtCore/QtDebug&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// class A:public QObject&#123;</span></span><br><span class="line"><span class="comment">//     Q_OBJECT</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     public:</span></span><br><span class="line"><span class="comment">//     void toemitString() &#123;</span></span><br><span class="line"><span class="comment">//         emit toBstring(&quot;hello B&quot;);</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     signals:</span></span><br><span class="line"><span class="comment">//     void toBstring(const QString&amp; str);</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// class B:public QObject&#123;</span></span><br><span class="line"><span class="comment">//     Q_OBJECT</span></span><br><span class="line"><span class="comment">//     public slots:</span></span><br><span class="line"><span class="comment">//     void recvAsignals(const QString&amp; str) &#123;</span></span><br><span class="line"><span class="comment">//         std::cout&lt;&lt;str.toStdString()&lt;&lt;std::endl;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span>**argv)</span> </span>&#123;</span><br><span class="line">    QString str = <span class="string">&quot;hello Qt&quot;</span>;</span><br><span class="line">    std::cout&lt;&lt;str.<span class="built_in">toStdString</span>()&lt;&lt;std::endl;</span><br><span class="line">    <span class="function">QStringList <span class="title">sstr</span><span class="params">(str)</span></span>;</span><br><span class="line">    std::cout&lt;&lt; sstr.<span class="built_in">indexOf</span>(<span class="string">&quot;Q&quot;</span>)&lt;&lt;std::endl;</span><br><span class="line">    QVector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line">    vec.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">    vec.<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line">    vec.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">    vec.<span class="built_in">push_back</span>(<span class="number">4</span>);</span><br><span class="line">    vec.<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    foreach(i,vec) &#123;</span><br><span class="line">        <span class="built_in">qDebug</span>()&lt;&lt;i;</span><br><span class="line">    &#125;</span><br><span class="line">    QMap&lt;QString,<span class="type">int</span>&gt; map;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// A a;</span></span><br><span class="line">    <span class="comment">// B b;</span></span><br><span class="line">    <span class="comment">//QObject::connect(&amp;a,SIGNAL(toBstring(const QString&amp;)),&amp;b,SLOT(recvAsignals(const QString&amp;)));</span></span><br><span class="line">    <span class="comment">//a.toemitString();</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>CmakeLists.txt</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 项目名称</span><br><span class="line">project(demo)</span><br><span class="line"># cmake最低版本, Qt5要求最低3.1</span><br><span class="line">cmake_minimum_required(VERSION 3.1)</span><br><span class="line"># 指定编译器这个可要可不要</span><br><span class="line">set (CMAKE_CXX_COMPILER &quot;/opt/rh/devtoolset-8/root/usr/bin/g++&quot;)</span><br><span class="line">set(CMAKE_CXX_FLAGS &quot;-std=c++11 -Wno-deprecated-declarations  -fPIC&quot;)</span><br><span class="line"></span><br><span class="line">set(PROJECT_GEN_DIR $&#123;CMAKE_CURRENT_SOURCE_DIR&#125;)</span><br><span class="line"></span><br><span class="line"># 设置自动生成moc文件,AUTOMOC打开可以省去QT5_WRAP_CPP命令</span><br><span class="line">#set(CMAKE_AUTOMOC ON)</span><br><span class="line">#set(CMAKE_AUTORCC ON)</span><br><span class="line">#set(CMAKE_AUTOUIC ON)</span><br><span class="line">#if(CMAKE_VERSION VERSION_LESS &quot;3.7.0&quot;)</span><br><span class="line">#    set(CMAKE_INCLUDE_CURRENT_DIR ON)</span><br><span class="line">#endif()</span><br><span class="line"></span><br><span class="line"># 查找Qt头文件和库目录</span><br><span class="line">#set(QT_STATIC_PATH &quot;/usr/local/qt/lib&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">find_package(Qt5 COMPONENTS Core)</span><br><span class="line">find_package(ZLIB)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#include_directories($&#123;QT_STATIC_PATH&#125;/include</span><br><span class="line">#$&#123;QT_STATIC_PATH&#125;/include/QtCore</span><br><span class="line">#)</span><br><span class="line"></span><br><span class="line">aux_source_directory(./main.cpp SRC_LIST)</span><br><span class="line"></span><br><span class="line">link_directories($&#123;QT_STATIC_PATH&#125;/lib</span><br><span class="line">)</span><br><span class="line">SET(QT_LIBS libQt5Bootstrap.a libQt5Core.a ZLIB::ZLIB)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">set(EXECUTABLE_OUTPUT_PATH $&#123;PROJECT_GEN_DIR&#125;/bin)</span><br><span class="line">add_executable(demo main.cpp)</span><br><span class="line">message(&quot;project name flags is $&#123;PROJECT_NAME&#125;&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">target_link_libraries($&#123;PROJECT_NAME&#125;  $&#123;QT_LIBS&#125;)</span><br></pre></td></tr></table></figure>

<p><code>main.cpp</code> 中注释的代码是编译不过的代码，经过几天的测试和研究发现，应该是qt的库还引用了别的库，在写cmake的时候需要把别的库也引用上才可以，因为在cmake中如果不链接<code>zlib</code>库则QString 也没法使用。  </p>
]]></content>
      <categories>
        <category>技术</category>
        <category>c++</category>
        <category>Qt</category>
      </categories>
  </entry>
  <entry>
    <title>Qt常见问题总结</title>
    <url>/2024/07/22/Qt%E8%8E%B7%E5%8F%96windows%20%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86%E5%91%98%E6%9D%83%E9%99%90%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>[[QT(qt)常见问题]]</p>
<h2 id="关注这个问题的原因"><a href="#关注这个问题的原因" class="headerlink" title="关注这个问题的原因"></a>关注这个问题的原因</h2><ul>
<li>在最新做的项目中，程序自动生成的日志文件在自己的电脑上可以生成，但到了我一同事的机器上就无法生成，查看打印发现是提示权限不够。</li>
</ul>
<span id="more"></span>  
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><ul>
<li><p>如果你的qtCreator配置的MSVC的编译器，直接在.por文件中添加 <code>QMAKE_LFLAGS += /MANIFESTUAC:\&quot;level=\&#39;requireAdministrator\&#39; uiAccess=\&#39;false\&#39;\&quot;</code><br>  重新编译，在需要获取的权限的系统中你的软件右下角会有个类似小盾牌一样的图片</p>
</li>
<li><p>如果你的qtCreator配置的是mingw32版本，则需要新建一个文件，名字为uac.manifest，文件内容如下:</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&#x27;1.0&#x27; encoding=&#x27;UTF-8&#x27; standalone=&#x27;yes&#x27;?&gt;</span><br><span class="line">&lt;assembly xmlns=&#x27;urn:schemas-microsoft-com:asm.v1&#x27; manifestVersion=&#x27;1.0&#x27;&gt;</span><br><span class="line">  &lt;trustInfo xmlns=&quot;urn:schemas-microsoft-com:asm.v3&quot;&gt;</span><br><span class="line">    &lt;security&gt;</span><br><span class="line">      &lt;requestedPrivileges&gt;</span><br><span class="line">        &lt;requestedExecutionLevel level=&#x27;requireAdministrator&#x27; uiAccess=&#x27;false&#x27; /&gt;</span><br><span class="line">      &lt;/requestedPrivileges&gt;</span><br><span class="line">    &lt;/security&gt;</span><br><span class="line">  &lt;/trustInfo&gt;</span><br><span class="line">&lt;/assembly&gt;</span><br></pre></td></tr></table></figure>

<p>将新建的这个文件和你的应用程序放在一起，打开VS自带的“开发人员命令提示”工具，切换到你的这个文件目录下，输入下面的命令<br><code>mt.exe -manifest &quot;uac.manifest&quot; -outputresource:&quot;example.exe&quot;;#1</code></p>
<p>mt.exe为vs自带的工具，如果不知道在哪，用Everything 搜索一下就可以了。”example.exe” 为应用程序的名称</p>
<ul>
<li>最近在使用 Qt 5.14的时候，QWidget 的背景图片无法加载出来，原因是主窗口使用 QWidget 的类。以前从没碰到过这种错误，在此做下记录</li>
</ul>
<h4 id="解决办法-1"><a href="#解决办法-1" class="headerlink" title="解决办法"></a>解决办法</h4><p>在QWidget窗口中重构paintEvent事件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void communication::paintEvent(QPaintEvent *event)</span><br><span class="line">&#123;</span><br><span class="line">   QStyleOption opt;</span><br><span class="line">   opt.init(this);</span><br><span class="line">   QPainter p(this);</span><br><span class="line">   style()-&gt;drawPrimitive(QStyle::PE_Widget, &amp;opt, &amp;p, this);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
        <category>c++</category>
        <category>Qt</category>
      </categories>
  </entry>
  <entry>
    <title>Scoop 使用</title>
    <url>/2024/07/22/Scoop%20%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Scoop-使用"><a href="#Scoop-使用" class="headerlink" title="Scoop 使用"></a>Scoop 使用</h1><blockquote>
<h2 id="Excerpt"><a href="#Excerpt" class="headerlink" title="Excerpt"></a><strong>Excerpt</strong></h2><p>「一行命令」搞定软件 Windows 软件安装卸载</p>
</blockquote>
<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h2><p><a href="https://p3terx.com/go/aHR0cHM6Ly9naXRodWIuY29tL2x1a2VzYW1wc29uL3Njb29w">Scoop</a> 是一个 Windows 包管理工具，类似于 Debian 的 <code>apt</code>、macOS 的 <code>homebrew</code>。它由开源社区驱动，体验可能是是目前所有 Windows 包管理工具中最好的。对开发者来说，包管理器能非常方便的部署开发环境，比如 Python 、Node.js 。而对于像博主这样的普通的计算机使用者来说，可以方便的安装一些常用软件，尤其是开源软件，免去了手动去官网下载的繁琐步骤，而且后续对软件进行升级只需要输入一行命令，非常便捷。</p>
<span id="more"></span>  
<h2 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a><strong>环境要求</strong></h2><ul>
<li><p>Windows 7 SP1 + &#x2F; Windows Server 2008+</p>
</li>
<li><p><a href="https://p3terx.com/go/aHR0cHM6Ly9ha2EubXMvd21mNWRvd25sb2Fk">PowerShell 5</a>（或更高版本，包括 <a href="https://p3terx.com/go/aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvcG93ZXJzaGVsbC9zY3JpcHRpbmcvaW5zdGFsbC9pbnN0YWxsaW5nLXBvd2Vyc2hlbGwtY29yZS1vbi13aW5kb3dzP3ZpZXc9cG93ZXJzaGVsbC02">PowerShell Core</a>）和 <a href="https://p3terx.com/go/aHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS9uZXQvZG93bmxvYWQ">.NET Framework 4.5</a>（或更高版本）</p>
</li>
<li><p>Windows 用户名为英文（Windows 用户环境变量中路径值不支持中文字符）</p>
</li>
<li><p><strong>正常、快速</strong>的访问 GitHub 并下载资源</p>
</li>
</ul>
<p>Scoop 默认使用普通用户权限，其本体和安装的软件默认会放在 <code>%USERPROFILE%\scoop</code>(即 <code>C:\Users\用户名\scoop</code>)，使用管理员权限进行全局安装 (<code>-g</code>) 的软件在 <code>C:\ProgramData\scoop</code>。如果有自定安装路径的需求，那么要提前设置好环境变量，否则后续再改不是一件容易的事情。</p>
<ul>
<li><p>打开 PowerShell</p>
</li>
<li><p>设置用户安装路径</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$env:SCOOP=&#x27;D:\Scoop&#x27;</span><br><span class="line">[Environment]::SetEnvironmentVariable(&#x27;SCOOP&#x27;, $env:SCOOP, &#x27;User&#x27;)</span><br></pre></td></tr></table></figure>

<ul>
<li>设置全局安装路径（需要管理员权限）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$env:SCOOP_GLOBAL=&#x27;D:\Scoop_Global&#x27;</span><br><span class="line">[Environment]::SetEnvironmentVariable(&#x27;SCOOP_GLOBAL&#x27;, $env:SCOOP_GLOBAL, &#x27;Machine&#x27;)</span><br></pre></td></tr></table></figure>

<ul>
<li>设置允许 PowerShell 执行本地脚本</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser</span><br></pre></td></tr></table></figure>

<ul>
<li>安装 Scoop</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">iwr -useb get.scoop.sh | iex</span><br></pre></td></tr></table></figure>

<ul>
<li>没安装过 Git 则需要安装。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scoop install git</span><br></pre></td></tr></table></figure>

<h2 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a><strong>基础使用</strong></h2><p>最基础的使用方法和其它包管理器类似，这里就不做赘述了，直接上命令列表：</p>
<ul>
<li><p><code>scoop search &lt;app&gt;</code> - 搜索软件</p>
</li>
<li><p><code>scoop install &lt;app&gt;</code> - 安装软件</p>
</li>
<li><p><code>scoop info &lt;app&gt;</code> - 查看软件详细信息</p>
</li>
<li><p><code>scoop list</code> - 查看已安装软件</p>
</li>
<li><p><code>scoop uninstall &lt;app&gt;</code> - 卸载软件，<code>-p</code>删除配置文件。</p>
</li>
<li><p><code>scoop update</code> - 更新 scoop 本体和软件列表</p>
</li>
<li><p><code>scoop update &lt;app&gt;</code> - 更新指定软件</p>
</li>
<li><p><code>scoop update *</code> - 更新所有已安装的软件</p>
</li>
<li><p><code>scoop checkup</code> - 检查 scoop 的问题并给出解决问题的建议</p>
</li>
<li><p><code>scoop help</code> - 查看命令列表</p>
</li>
<li><p><code>scoop help &lt;command&gt;</code> - 查看命令帮助说明</p>
</li>
</ul>
<h2 id="进阶使用"><a href="#进阶使用" class="headerlink" title="进阶使用"></a><strong>进阶使用</strong></h2><h3 id="添加-bucket"><a href="#添加-bucket" class="headerlink" title="添加 bucket"></a><strong>添加 bucket</strong></h3><p>所有的包管理器都会有相应的软件仓库 ，而 bucket 就是 Scoop 中的软件仓库。细心的你可能会发现 <code>scoop</code> 翻译为中文是 “舀”，而 <code>bucket</code> 是 “水桶”，所以安装软件可以理解为从水桶里舀水，似乎很形象的说。</p>
<p>Scoop 默认软件仓库（main bucket）软件数量是有限的，但是可以进行额外的添加。通过 <code>scoop bucket known</code> 命令可以查看官方认可的 bucket：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ scoop bucket known</span><br><span class="line">main</span><br><span class="line">extras</span><br><span class="line">versions</span><br><span class="line">nightlies</span><br><span class="line">nirsoft</span><br><span class="line">php</span><br><span class="line">nerd-fonts</span><br><span class="line">nonportable</span><br><span class="line">java</span><br><span class="line">games</span><br><span class="line">jetbrains</span><br></pre></td></tr></table></figure>

<p>以上官方认可的 bucket 可以通过下面这个命令直接添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scoop bucket add &lt;bucketname&gt;</span><br></pre></td></tr></table></figure>

<p><a href="https://p3terx.com/go/aHR0cHM6Ly9naXRodWIuY29tL2x1a2VzYW1wc29uL3Njb29wLWV4dHJhcw">extras</a> 涵盖了大部分因为种种原因不能被收录进主仓库的常用软件，这个是强推荐添加的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scoop bucket add extras</span><br></pre></td></tr></table></figure>

<p>比如博主经常会使用到的写盘工具 Rufus 就在 <code>extras</code> 这个仓库中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scoop install rufus</span><br></pre></td></tr></table></figure>

<p><a href="https://p3terx.com/go/aHR0cHM6Ly9naXRodWIuY29tL21hdHRoZXdqYmVyZ2VyL3Njb29wLW5lcmQtZm9udHM">nerd-fonts</a> 包含了美化终端时会用到的 Powerline 字体</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scoop bucket add nerd-fonts</span><br></pre></td></tr></table></figure>

<p>当添加 <code>nerd-fonts</code> 仓库后可以通过以下命令搜索到所有的字体：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scoop search &quot;-NF&quot;</span><br></pre></td></tr></table></figure>

<p>安装字体需要使用管理员权限：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo scoop install FiraCode-NF</span><br></pre></td></tr></table></figure>

<h4 id="第三方-bucket"><a href="#第三方-bucket" class="headerlink" title="第三方 bucket"></a>第三方 bucket</h4><p>添加第三方 bucket</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scoop bucket add &lt;bucketname&gt; https://github.com/xxx/xxx</span><br></pre></td></tr></table></figure>

<p>从第三方 bucket 中安装软件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scoop install &lt;bucketname&gt;/&lt;app&gt;</span><br></pre></td></tr></table></figure>

<h3 id="清理安装包缓存"><a href="#清理安装包缓存" class="headerlink" title="清理安装包缓存"></a><strong>清理安装包缓存</strong></h3><p>Scoop 会保留下载的安装包，对于卸载后又想再安装的情况，不需要重复下载。但长期累积会占用大量的磁盘空间，如果用不到就成了垃圾。这时可以使用 <code>scoop cache</code> 命令来清理。</p>
<ul>
<li><p><code>scoop cache show</code> - 显示安装包缓存</p>
</li>
<li><p><code>scoop cache rm &lt;app&gt;</code> - 删除指定应用的安装包缓存</p>
</li>
<li><p><code>scoop cache rm *</code> - 删除所有的安装包缓存</p>
</li>
</ul>
<p>如果你不希望安装和更新软件时保留安装包缓存，可以加上 <code>-k</code> 或 <code>--no-cache</code> 选项来禁用缓存：</p>
<ul>
<li><p><code>scoop install -k &lt;app&gt;</code></p>
</li>
<li><p><code>scoop update -k *</code></p>
</li>
</ul>
<h3 id="删除旧版本软件"><a href="#删除旧版本软件" class="headerlink" title="删除旧版本软件"></a><strong>删除旧版本软件</strong></h3><p>当软件被更新后 Scoop 还会保留软件的旧版本，更新软件后可以通过 <code>scoop cleanup</code> 命令进行删除。</p>
<ul>
<li><p><code>scoop cleanup &lt;app&gt;</code> - 删除指定软件的旧版本</p>
</li>
<li><p><code>scoop cleanup *</code> - 删除所有软件的旧版本</p>
</li>
</ul>
<p>与安装软件一样，删除旧版本软件的同时也可以清理安装包缓存，同样是加上 <code>-k</code> 选项。</p>
<ul>
<li><p><code>scoop cleanup -k &lt;app&gt;</code> - 删除指定软件的旧版本并清除安装包缓存</p>
</li>
<li><p><code>scoop cleanup -k *</code> - 删除所有软件的旧版本并清除安装包缓存</p>
</li>
</ul>
<h3 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a><strong>全局安装</strong></h3><p>全局安装就是给系统中的所有用户都安装，且环境变量是系统变量，对于需要设置系统变量的一些软件就需要全局安装，比如 Node.js、Python ，否则某些情况会出现无法找到命令的问题。</p>
<p>使用 <code>scoop install &lt;app&gt;</code> 命令加上 <code>-g</code> 或 <code>--global</code> 选项可对软件进行全局安装，全局安装需要管理员权限，所以需要提前以管理员权限运行的 PowerShell 。更简单的方式是先安装 <code>sudo</code>，然后用 <code>sudo</code> 命令来提权执行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scoop install sudo</span><br><span class="line">sudo scoop install -g &lt;app&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>达成在 Windows 上使用<code>sudo</code>的成就</p>
</blockquote>
<p>使用 <code>scoop list</code> 命令查看已装软件时，全局安装的软件末尾会有 <code>*global*</code> 标志。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">➜ scoop list</span><br><span class="line">Installed apps:</span><br><span class="line"></span><br><span class="line">  7zip 19.00</span><br><span class="line">  adb 30.0.0</span><br><span class="line">  aria2 1.35.0-1</span><br><span class="line">  busybox 3466-g53c09d0e1</span><br><span class="line">  CascadiaCode-NF 2.1.0 [nerd-fonts]</span><br><span class="line">  colortool 1904.29002</span><br><span class="line">  dark 3.11.2 *global*</span><br><span class="line">  ffmpeg 4.2.3</span><br><span class="line">  figlet 1.0-go</span><br><span class="line">  FiraCode-NF 2.1.0 [nerd-fonts]</span><br><span class="line">  git 2.26.2.windows.1 *global*</span><br><span class="line">  innounp 0.49</span><br><span class="line">  iperf3 3.1.3</span><br><span class="line">  lessmsi 1.6.91 *global*</span><br><span class="line">  lxrunoffline 3.4.1 [extras]</span><br><span class="line">  nano 4.9-4</span><br><span class="line">  neofetch 7.0.0</span><br><span class="line">  nodejs-lts 12.17.0 *global*</span><br><span class="line">  python 3.8.3 *global*</span><br><span class="line">  rclone 1.52.0</span><br><span class="line">  rufus 3.10 [extras]</span><br><span class="line">  screentogif 2.24.2 [extras]</span><br><span class="line">  sudo 0.2020.01.26</span><br></pre></td></tr></table></figure>

<p>此外对于全局软件的更新和卸载等其它操作，都需要加上 <code>-g</code> 选项：</p>
<ul>
<li><p><code>sudo scoop update -g *</code> - 更新所有软件（且包含全局软件）</p>
</li>
<li><p><code>sudo scoop uninstall -g &lt;app&gt;</code> - 卸载全局软件</p>
</li>
<li><p><code>sudo scoop uninstall -gp &lt;app&gt;</code> - 卸载全局软件（并删除配置文件）</p>
</li>
<li><p><code>sudo scoop cleanup -g *</code> - 删除所有全局软件的旧版本</p>
</li>
<li><p><code>sudo scoop cleanup -gk *</code> - 删除所有全局软件的旧版本（并清除安装包包缓存）</p>
</li>
</ul>
<h3 id="代理设置"><a href="#代理设置" class="headerlink" title="代理设置"></a><strong>代理设置</strong></h3><p>Scoop 默认使用的是系统代理，如果你想手动指定代理，可以输入下面的命令。需要注意的是只支持 http 协议。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scoop config proxy localhost:1080</span><br></pre></td></tr></table></figure>

<blockquote>
<p>设置完可以通过<code>scoop config proxy</code>查看。</p>
</blockquote>
<p>如果你想取消代理，那么输入下面的命令，这将会恢复使用系统代理。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scoop config rm proxy</span><br></pre></td></tr></table></figure>

<h3 id="开启多线程下载"><a href="#开启多线程下载" class="headerlink" title="开启多线程下载"></a><strong>开启多线程下载</strong></h3><p>使用 Scoop 安装 Aria2 后，Scoop 会自动调用 Aria2 进行多线程加速下载。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scoop install aria2</span><br></pre></td></tr></table></figure>

<p>使用 <code>scoop config</code> 命令可以对 Aria2 进行设置，比如 <code>scoop config aria2-enabled false</code> 可以禁止调用 Aria2 下载。以下是与 Aria2 有关的设置选项：</p>
<ul>
<li><p><code>aria2-enabled</code>: 开启 Aria2 下载，默认<code>true</code></p>
</li>
<li><p><code>aria2-retry-wait</code>: 重试等待秒数，默认<code>2</code></p>
</li>
<li><p><code>aria2-split</code>: 单任务最大连接数，默认<code>5</code></p>
</li>
<li><p><code>aria2-max-connection-per-server</code>: 单服务器最大连接数，默认<code>5</code> ，最大<code>16</code></p>
</li>
<li><p><code>aria2-min-split-size</code>: 最小文件分片大小，默认<code>5M</code></p>
</li>
</ul>
<p>博主在这里推荐以下优化设置，单任务最大连接数设置为 <code>32</code>，单服务器最大连接数设置为 <code>16</code>，最小文件分片大小设置为 <code>1M</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scoop config aria2-split 32</span><br><span class="line">scoop config aria2-max-connection-per-server 16</span><br><span class="line">scoop config aria2-min-split-size 1M</span><br></pre></td></tr></table></figure>

<h2 id="常用命令总结"><a href="#常用命令总结" class="headerlink" title="常用命令总结"></a><strong>常用命令总结</strong></h2><p>看到这里一定有很多小伙伴已经懵逼了，最后总结一波 Scoop 在日常使用中的常用命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 更新 scoop 及软件包列表</span><br><span class="line">scoop update</span><br><span class="line"></span><br><span class="line">## 安装软件 ##</span><br><span class="line"># 非全局安装（并禁止安装包缓存）</span><br><span class="line">scoop install -k &lt;app&gt;</span><br><span class="line"># 全局安装（并禁止安装包缓存）</span><br><span class="line">sudo scoop install -gk &lt;app&gt;</span><br><span class="line"></span><br><span class="line">## 卸载软件 ##</span><br><span class="line"># 卸载非全局软件（并删除配置文件）</span><br><span class="line">scoop uninstall -p &lt;app&gt;</span><br><span class="line"># 卸载全局软件（并删除配置文件）</span><br><span class="line">sudo scoop uninstall -gp &lt;app&gt;</span><br><span class="line"></span><br><span class="line">## 更新软件 ##</span><br><span class="line"># 更新所有非全局软件（并禁止安装包缓存）</span><br><span class="line">scoop update -k *</span><br><span class="line"># 更新所有软件（并禁止安装包缓存）</span><br><span class="line">sudo scoop update -gk *</span><br><span class="line"></span><br><span class="line">## 垃圾清理 ##</span><br><span class="line"># 删除所有旧版本非全局软件（并删除软件包缓存）</span><br><span class="line">scoop cleanup -k *</span><br><span class="line"># 删除所有旧版本软件（并删除软件包缓存）</span><br><span class="line">sudo scoop cleanup -gk *</span><br><span class="line"># 清除软件包缓存</span><br><span class="line">scoop cache rm *</span><br></pre></td></tr></table></figure>

<h2 id="尾巴"><a href="#尾巴" class="headerlink" title="尾巴"></a><strong>尾巴</strong></h2><p>Scoop 的使用方法和功能远不止上面提及的这些，但作为一个普通用户也只会用到一些基本的命令和功能。纵观全网也很少有人把基础功能都说明白，这也是在 0202 年咕鸽随便一搜一大把 Scoop 教程和笔记文章的情况下博主依然写这样一篇更加全面教程的原因。希望这篇教程对你有所帮助。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>Scoop 使用</title>
    <url>/2024/07/22/VCPKG%20%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="vcpkg使用"><a href="#vcpkg使用" class="headerlink" title="vcpkg使用"></a>vcpkg使用</h1><p>C++开源库 - 包管理工具Vcpkg安装使用教程</p>
<span id="more"></span>  
<p><strong>目录</strong></p>
<ul>
<li><p><a href="#_label0">一、编译开源库的传统方法</a></p>
</li>
<li><p><a href="#_label1">二、为什么要用Vcpkg</a></p>
</li>
<li><p><a href="#_label2">三、windows下安装Vcpkg</a></p>
</li>
<li><p><a href="#_label3">四、使用Vcpkg</a></p>
<ul>
<li><p><a href="#_label3_0">4.1 查看Vcpkg支持的开源库列表</a></p>
</li>
<li><p><a href="#_label3_1">4.2 指定编译某种架构的程序库</a></p>
</li>
<li><p><a href="#_label3_2">4.3 安装一个开源库</a></p>
</li>
<li><p><a href="#_label3_3">4.4 移除一个已经安装（编译）的开源库</a></p>
</li>
<li><p><a href="#_label3_4">4.5 列出已经安装的开源库</a></p>
</li>
<li><p><a href="#_label3_5">4.6 更新已经安装的开源库</a></p>
</li>
<li><p><a href="#_label3_6">4.7 导出已经安装的开源库</a></p>
</li>
<li><p><a href="#_label3_7">4.8 导入备份的开源库</a></p>
</li>
</ul>
</li>
<li><p><a href="#_label4">五、Vcpkg和Visual Studio的集成</a></p>
<ul>
<li><p><a href="#_label4_0">5.1 什么是集成？</a></p>
</li>
<li><p><a href="#_label4_1">5.2 集成到全局</a></p>
</li>
<li><p><a href="#_label4_2">5.3. 移除全局集成</a></p>
</li>
<li><p><a href="#_label4_3">5.4 集成到工程</a></p>
</li>
<li><p><a href="#_label4_4">5.5 测试使用</a></p>
</li>
<li><p><a href="#_label4_5">5.6 集成到CMake</a></p>
</li>
<li><p><a href="#_label4_6">5.7 集成静态库</a></p>
</li>
</ul>
</li>
<li><p><a href="#_label5">六、使用Vcpkg时的注意点</a></p>
</li>
<li><p><a href="#_label6">七、小结</a></p>
</li>
</ul>
<hr>
<h2 id="一、编译开源库的传统方法"><a href="#一、编译开源库的传统方法" class="headerlink" title="一、编译开源库的传统方法"></a><strong>一、编译开源库的传统方法</strong></h2><p>Windows 下开发 C&#x2F;C++ 程序，少不了编译开源的第三方库。比如用于网络连接的高性能库 libcurl、用于压缩解压的 zlib 等等。使用这些库开发极大的方便了程序员，使得我们不必重复造轮子。但是使用这些库必须要处理以下问题。</p>
<p>编译方式 由于这些开源库绝大部分都来源于 Linux 系统，导致其工程文件、编译系统都使用 gnu 系列工具，使得将其移植到 Windows 的 VC 开发环境下一直是难点。尽管最近几年很多开源库都支持了跨平台的 CMake，但是编译过程仍然复杂和多样化。</p>
<p>常见的编译方式有：</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><strong>编译方式</strong></td>
<td><strong>特点</strong></td>
<td><strong>举例</strong></td>
</tr>
<tr>
<td>configure、make</td>
<td>需要msys这样的unix环境才可以编译</td>
<td>ffmpeg</td>
</tr>
<tr>
<td>自定义编译工具</td>
<td>需要学习特定的编译命令和工具</td>
<td>openssl、boost</td>
</tr>
<tr>
<td>cmake</td>
<td>相对简单轻松</td>
<td>libcurl</td>
</tr>
<tr>
<td>VC工程文件</td>
<td>这种最简单，直接拿来即可编译</td>
<td></td>
</tr>
</tbody></table>
<p>编译类型 当了解了这些还不够，我们还需要考虑预先编译出哪种类型的开源库程序。比如：Debug还是Release、动态库还是静态库、MD还是MT、32位还是64位。光是这三种组合就有16种可能性。如果像libcurl这种还要考虑是否引用其他开源库的功能，那么编译类型的组合会更多。管理起来很麻烦。</p>
<p>工程目录设定 由于多样的编译类型，工程目录也必须仔细设定才能保证自己的软件项目能够正常编译。</p>
<h2 id="二、为什么要用Vcpkg"><a href="#二、为什么要用Vcpkg" class="headerlink" title="二、为什么要用Vcpkg"></a><strong>二、为什么要用Vcpkg</strong></h2><p>正是由于<strong>编译开源库的传统方法</strong>的缺陷，所以出现了 <strong>Vcpkg</strong>，优点如下：</p>
<ul>
<li><p>自动下载开源库源代码。</p>
</li>
<li><p>源码包的缓存管理和版本管理，可以升级版本。</p>
</li>
<li><p>轻松编译。</p>
</li>
<li><p>依赖关系检查（比如编译 libcurl，会自动下载 zlib、openssl 进行编译）。</p>
</li>
<li><p>无缝集成 Visual Studio，不需要设置库文件、头文件的所在目录，自动集成。</p>
</li>
<li><p>Visual Studio 全平台支持，不仅支持 Debug&#x2F;Release、x86&#x2F;x64 编译，还支持 UWP、ARM 平台的编译。</p>
</li>
</ul>
<h2 id="三、windows下安装Vcpkg"><a href="#三、windows下安装Vcpkg" class="headerlink" title="三、windows下安装Vcpkg"></a><strong>三、windows下安装Vcpkg</strong></h2><p>（1）由于官方建议把 vcpkg 目录放到 <code>C:\src\</code> 下，所以先创建再移动到该目录：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd c:/src</span><br></pre></td></tr></table></figure>

<p>（2）git 克隆官方的 git 仓库：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git clone https://github.com/microsoft/vcpkg</span><br></pre></td></tr></table></figure>

<p>（3）进入到仓库中，编译 Vcpkg：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd vcpkg</span><br><span class="line">$ ./bootstrap-vcpkg.bat</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li><p>Vcpkg 大量使用 psl 脚本，所以官方强烈推荐使用 PowerShell 而不是 CMD 命令行来执行各种操作。尽管在使用的时候兼容 CMD，但是在编译这一步，请使用 PowerShell，以下所有操作也如此。</p>
</li>
<li><p>如果下载失败，输出 <code>Downloading vcpkg.exe failed. Please check your internet connection, ...</code>，说明外网下载不稳定，需要尝试多次下载或梯子上网。</p>
</li>
</ul>
<p>成功后输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Downloading https://github.com/microsoft/vcpkg-tool/releases/download/2021-02-24-d67989bce1043b98092ac45996a8230a059a2d7e/vcpkg.exe -&gt; C:\src\vcpkg\vcpkg.exe</span><br><span class="line">Done.</span><br></pre></td></tr></table></figure>

<p>更详细可以参考 Vcpkg 的官方 git 地址：<a href="https://github.com/microsoft/vcpkg/blob/master/README_zh_CN.md">https://github.com/microsoft/vcpkg/blob/master/README_zh_CN.md</a></p>
<h2 id="四、使用Vcpkg"><a href="#四、使用Vcpkg" class="headerlink" title="四、使用Vcpkg"></a><strong>四、使用Vcpkg</strong></h2><h3 id="4-1-查看Vcpkg支持的开源库列表"><a href="#4-1-查看Vcpkg支持的开源库列表" class="headerlink" title="4.1 查看Vcpkg支持的开源库列表"></a><strong>4.1 查看Vcpkg支持的开源库列表</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ./vcpkg.exe search</span><br></pre></td></tr></table></figure>

<p>执行命令后，两三分钟后才显示出来支持的开源库列表，基本上常用的 C++ 开源库都支持。（使用 PowerShell 执行）</p>
<h3 id="4-2-指定编译某种架构的程序库"><a href="#4-2-指定编译某种架构的程序库" class="headerlink" title="4.2 指定编译某种架构的程序库"></a><strong>4.2 指定编译某种架构的程序库</strong></h3><p>如果不指定安装的架构，vcpkg 默认把开源库编译成 x86 的 Windows 版本的库。那 vcpkg 总共支持多少种架构呢？我们可以使用如下命令便知：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ./vcpkg.exe help triplet</span><br></pre></td></tr></table></figure>

<p>我们可以看到会列出如下清单：</p>
<ul>
<li><p>arm-uwp</p>
</li>
<li><p>arm-windows</p>
</li>
<li><p>arm64-uwp</p>
</li>
<li><p>arm64-windows</p>
</li>
<li><p>x64-uwp</p>
</li>
<li><p>x64-windows-static</p>
</li>
<li><p>x64-windows</p>
</li>
<li><p>x86-uwp</p>
</li>
<li><p>x86-windows-static</p>
</li>
<li><p>x86-windows</p>
</li>
</ul>
<p>这个清单以后随着版本的迭代还会再增加。vcpkg 不仅支持 x86 架构，还支持 arm 架构。注意：这里的 arm 架构特指类似于 surface 这种运行在 arm 处理器上的 Win10 平台，而并非我们传统意义上的 Linux 或 android 的 ARM 平台。</p>
<h3 id="4-3-安装一个开源库"><a href="#4-3-安装一个开源库" class="headerlink" title="4.3 安装一个开源库"></a><strong>4.3 安装一个开源库</strong></h3><p>那如果要安装编译某一个架构的开源库，我们该怎么写呢？我们只需要在需要安装的包后面指定相应的 triplet 即可。例如我们需要编译 64 位 Windows 版本的 jsoncpp，那么执行如下命令即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ./vcpkg.exe install jsoncpp:x64-windows</span><br></pre></td></tr></table></figure>

<p>看到<code>Installing package jsoncpp[core]:x64-windows... done</code>，则说明安装成功。</p>
<p>如果电脑中没有安装 CMake、7zip 等软件，Vcpkg 会自动下载 portable 版本的 CMake、7zip 等软件。但是由于各种原因，下载的网速很慢，所以建议先自行下载合适版本的对应软件。最好是下载最新版本的。实际测试发现，会先同时下载以下软件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">7zip-18.1.0-windows</span><br><span class="line">cmake-3.19.2-windows</span><br><span class="line">nuget-5.5.1-windows</span><br><span class="line">powershell-core-7.1.0-windows</span><br></pre></td></tr></table></figure>

<p>报错及解决办法</p>
<p>（1）在下载 powershell 时会下载不成功，提示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Failed to download from mirror set:</span><br><span class="line">https://github.com/PowerShell/PowerShell/releases/download/v7.1.0/PowerShell-7.1.0-win-x86.zip: WinHttpSendRequest() failed: 12002</span><br></pre></td></tr></table></figure>

<p>只能复制上面下载链接，发现手动下载正常，下载完成后拷贝 <code>PowerShell-7.1.0-win-x86.zip</code> 到 <code>C:\src\vcpkg\downloads</code> 目录下，然后再执行安装指令，会跳过下载这步直接开始解压 PowerShell 压缩包。</p>
<p>遇到下载其他依赖库的压缩包失败时，也可考虑使用这种手动下载的方法。</p>
<p>后面下载 <code>jsoncpp/archive/9059f5cad030ba11d37818847443a53918c327b1.tar.gz</code> 也不成功，采用上面方法后，修改名称为 <code>open-source-parsers-jsoncpp-9059f5cad030ba11d37818847443a53918c327b1.tar.gz</code>。</p>
<p>（2）缺少英文语言包，报错：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Warning: The following VS instances are excluded because the English language pack is unavailable.</span><br></pre></td></tr></table></figure>

<p>解决办法：到 VS 安装向导，修改安装，点语言包，勾选英语；安装即可。</p>
<h3 id="4-4-移除一个已经安装（编译）的开源库"><a href="#4-4-移除一个已经安装（编译）的开源库" class="headerlink" title="4.4 移除一个已经安装（编译）的开源库"></a><strong>4.4 移除一个已经安装（编译）的开源库</strong></h3><p>如果移除一个已经安装的开源库，那么执行 remove 指令即可。比如我们要移除 jsoncpp，那么执行命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ./vcpkg.exe remove jsoncpp</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong></p>
<p>这个时候只是移除了默认的 x86-winodws 版本的文件，如果有其他平台的版本需要移除，需要制定相应的 triplet。移除也只是移除了二进制程序库而已，源码包和解压缩的源码并没有删除。</p>
<p>如果想要一键移除“过时”的包，执行命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ./vcpkg.exe remove --outdated</span><br></pre></td></tr></table></figure>

<h3 id="4-5-列出已经安装的开源库"><a href="#4-5-列出已经安装的开源库" class="headerlink" title="4.5 列出已经安装的开源库"></a><strong>4.5 列出已经安装的开源库</strong></h3><p>执行 list 指令即可，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ./vcpkg.exe list</span><br></pre></td></tr></table></figure>

<p>假如前面安装了 jsoncpp，会输出：<code>jsoncpp:x64-windows 1.9.4 jsoncpp is an implementation of a JSON reader an...</code></p>
<h3 id="4-6-更新已经安装的开源库"><a href="#4-6-更新已经安装的开源库" class="headerlink" title="4.6 更新已经安装的开源库"></a><strong>4.6 更新已经安装的开源库</strong></h3><p>一般有两种更新方式。一个是 update 指令，可以显示可以升级的开源库的列表。另一个是 upgrade 的指令，会重新编译所有需要更新的包。</p>
<h3 id="4-7-导出已经安装的开源库"><a href="#4-7-导出已经安装的开源库" class="headerlink" title="4.7 导出已经安装的开源库"></a><strong>4.7 导出已经安装的开源库</strong></h3><p>有的时候，一个项目组中有很多人，不需要每个人都参与编译。一个人编译好所有开源库后到处给别人即可。有的时候也是出于备份的目的，也会导出已经安装的开源库。导出可以执行 export 指令。例如，我要导出 jsoncpp 库，那么执行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ./vcpkg.exe export jsoncpp --zip</span><br></pre></td></tr></table></figure>

<p>注意，导出时必须指定导出的包格式。vcpkg 支持 5 种导出包格式，有：</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><strong>参数</strong></td>
<td><strong>格式</strong></td>
</tr>
<tr>
<td>–raw</td>
<td>以不打包的目录格式导出</td>
</tr>
<tr>
<td>–nuget</td>
<td>以 nuget 包形式导出</td>
</tr>
<tr>
<td>–ifw</td>
<td>我也不知道这是啥格式</td>
</tr>
<tr>
<td>–zip</td>
<td>以 zip 压缩包形式导出</td>
</tr>
<tr>
<td>–7zip</td>
<td>以 7z 压缩包形式导出</td>
</tr>
</tbody></table>
<p>一般地，导出包的格式为：<code>vcpkg-export-&lt;日期&gt;-&lt;时间&gt;</code></p>
<p>默认情况下只会导出 x86-windows 的包，如果要导出所有包，那需要制定相应的 triplet。比如，如果同时导出 x86 和 x64 版本的 jsoncpp，那执行命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ./vcpkg.exe export jsoncpp:x86-windows jsoncpp:x64-windows --zip</span><br></pre></td></tr></table></figure>

<p>如果要指定输出目录和特定文件名，需使用 “–output&#x3D;” 参数。</p>
<h3 id="4-8-导入备份的开源库"><a href="#4-8-导入备份的开源库" class="headerlink" title="4.8 导入备份的开源库"></a><strong>4.8 导入备份的开源库</strong></h3><p>导入比较简单，执行 import 指令即可。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ./vcpkg.exe import xxx.7z</span><br></pre></td></tr></table></figure>

<h2 id="五、Vcpkg和Visual-Studio的集成"><a href="#五、Vcpkg和Visual-Studio的集成" class="headerlink" title="五、Vcpkg和Visual Studio的集成"></a><strong>五、Vcpkg和Visual Studio的集成</strong></h2><h3 id="5-1-什么是集成？"><a href="#5-1-什么是集成？" class="headerlink" title="5.1 什么是集成？"></a><strong>5.1 什么是集成？</strong></h3><p>上面我们已经安装了一些第三方库，那如何使用呢？常规情况下，我们需要设置 include 目录、lib 目录等，会有很多工作量。Vcpkg 提供了一套机制，可以全自动的适配目录，而开发者不需要关心已安装的库的目录在哪里，也不需要设置。这是 Vcpkg 的一大优势。</p>
<h3 id="5-2-集成到全局"><a href="#5-2-集成到全局" class="headerlink" title="5.2 集成到全局"></a><strong>5.2 集成到全局</strong></h3><p>“集成到全局” 适用于 Visual Studio 开发环境和 msbuild 命令行。执行命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ./vcpkg.exe integrate install</span><br></pre></td></tr></table></figure>

<p>当出现 <code>Applied user-wide integration for this vcpkg root.</code> 字样的时候，说明已经集成成功。这时候可以在任意的工程中使用安装好的第三方库。</p>
<h3 id="5-3-移除全局集成"><a href="#5-3-移除全局集成" class="headerlink" title="5.3. 移除全局集成"></a><strong>5.3. 移除全局集成</strong></h3><p>移除全局集成只要执行下列命令即可：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ./vcpkg.exe integrate remove</span><br></pre></td></tr></table></figure>

<h3 id="5-4-集成到工程"><a href="#5-4-集成到工程" class="headerlink" title="5.4 集成到工程"></a><strong>5.4 集成到工程</strong></h3><p>上面已经可以集成到全局，为什么还要 “集成到工程” 呢？因为在大部分情况下，我们不希望集成到全局，毕竟有很多第三方库我们希望自定义处理一下，或者干脆不想集成第三方库。那么集成到工程是最灵活的处理方式。也是工程级项目推荐的处理方式。</p>
<p>“集成到工程” 是整个 vcpkg 中最复杂的一项，它需要利用 Visual Studio 中的 nuget 插件来实现。我们接下来一步一步来说。</p>
<ol>
<li>生成配置</li>
</ol>
<p>执行命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ./vcpkg.exe integrate project</span><br></pre></td></tr></table></figure>

<p>这时候会在 <code>&lt;vcpkg_dir&gt;\scripts\buildsystems</code> 目录下，生成 nuget 配置文件。其中 <code>&lt;vcpkg_dir&gt;</code> 是指 vcpkg 实际所在目录。</p>
<ol start="2">
<li>基本配置</li>
</ol>
<p>打开 Visual Studio，点击菜单工具 -&gt; NuGet 包管理器 -&gt; 程序包管理器设置”，进入设置界面，点击 “程序包源”。</p>
<p>点击 “加号” 增加一个源。修改源的名字为 vcpkg。在“源”的选项中点击右侧的 “…” 选择 vcpkg 目录下的 “scripts\buildsystems” 目录，然后点击右侧的“更新按钮”。点击 “确定”，关闭设置对话框。</p>
<p>到此，全局性的设置已经完成，以后不必再重复设置了。</p>
<ol start="3">
<li>工程配置 用 Visual Studio 打开一个工程或解决方案。右键点击需要设置的工程，选择 “管理NuGet程序包”。在右上角的 “程序包源” 中选择刚刚设置的 “vcpkg”。这样在 “浏览” 选项卡中就可以看到 “vcpkg.H.Repos.vcpkg”。点击最右侧的 “安装”。这样就可以集成到某个工程了。</li>
</ol>
<h3 id="5-5-测试使用"><a href="#5-5-测试使用" class="headerlink" title="5.5 测试使用"></a><strong>5.5 测试使用</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;fstream&gt;</span><br><span class="line">#include &lt;cassert&gt;</span><br><span class="line">#include &quot;json/json.h&quot; // 直接就可以include，无需额外配置</span><br><span class="line"></span><br><span class="line">std::string createJson(void)</span><br><span class="line">&#123;</span><br><span class="line">    std::string jsonStr;</span><br><span class="line">    Json::Value root;</span><br><span class="line">    Json::StreamWriterBuilder writerBuilder;</span><br><span class="line">    std::ostringstream os;</span><br><span class="line">    // 设置默认无格式化的输出</span><br><span class="line">    writerBuilder.settings_[&quot;indentation&quot;] = &quot;&quot;;</span><br><span class="line">    root[&quot;Name&quot;] = &quot;Zhangsan&quot;;</span><br><span class="line">    root[&quot;Age&quot;] = 25;</span><br><span class="line">    // jsonWriter是智能指针, 当jsonWriter被析构时, 它所指向的对象(内存)也被自动释放</span><br><span class="line">    std::unique_ptr&lt;Json::StreamWriter&gt; jsonWriter(writerBuilder.newStreamWriter());</span><br><span class="line">    jsonWriter-&gt;write(root, &amp;os);</span><br><span class="line">    jsonStr = os.str();</span><br><span class="line"></span><br><span class="line">    return jsonStr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void saveJsonStringToFile(const char* file, std::string&amp; jsonStr)</span><br><span class="line">&#123;</span><br><span class="line">    std::ofstream ofs;</span><br><span class="line">    ofs.open(file);</span><br><span class="line">    assert(ofs.is_open());</span><br><span class="line">    ofs &lt;&lt; jsonStr;</span><br><span class="line">    ofs.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    std::string jsonStr;</span><br><span class="line">    jsonStr = createJson();</span><br><span class="line">    saveJsonStringToFile(&quot;./test.json&quot;, jsonStr);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>jsoncpp 的更多使用请参考：<a href="https://blog.csdn.net/cfl927096306/article/details/105102843/">新版jsoncpp的一些基本用法</a></p>
<p>到此，就可以在 VS 上随意使用 jsoncpp 库了，在 exe 生成目录下也发现了 <code>jsoncpp.dll</code>。</p>
<h3 id="5-6-集成到CMake"><a href="#5-6-集成到CMake" class="headerlink" title="5.6 集成到CMake"></a><strong>5.6 集成到CMake</strong></h3><p>最新的 Visual Studio 2015、2017 和 2019 大力支持 CMake 工程，所以对 cmake 的支持当然不能少。在 cmake 中集成只要在 cmake 文件中加入下面这句话即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-DCMAKE_TOOLCHAIN_FILE=&lt;vcpkg_dir&gt;/scripts/buildsystems/vcpkg.cmake</span><br></pre></td></tr></table></figure>

<p>其中 <code>&lt;vcpkg_dir&gt;</code> 是指 vcpkg 实际所在目录。</p>
<h3 id="5-7-集成静态库"><a href="#5-7-集成静态库" class="headerlink" title="5.7 集成静态库"></a><strong>5.7 集成静态库</strong></h3><p>Vcpkg 默认编译链接的是动态库，如果要链接静态库，目前还没有简便的方法。需要做如下操作</p>
<p>NaN. 用文本方式打开 vcxproj 工程文件。</p>
<p>NaN. 在 xml 的段里面增加如下两句话即可：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;VcpkgTriplet&gt;x86-windows-static&lt;/VcpkgTriplet&gt;</span><br><span class="line">&lt;VcpkgEnabled&gt;true&lt;/VcpkgEnabled&gt;</span><br></pre></td></tr></table></figure>

<p>在 CMake 中集成静态库，需要额外指令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmake .. -DCMAKE_TOOLCHAIN_FILE=.../vcpkg.cmake -DVCPKG_TARGET_TRIPLET=x86-windows-static</span><br></pre></td></tr></table></figure>

<h2 id="六、使用Vcpkg时的注意点"><a href="#六、使用Vcpkg时的注意点" class="headerlink" title="六、使用Vcpkg时的注意点"></a><strong>六、使用Vcpkg时的注意点</strong></h2><ul>
<li><p>Vcpkg 仅支持 Visual Studio 2015 update 3 及以上版本，究其原因，很可能和 C++11 的支持度以及集成原理有关系。</p>
</li>
<li><p>目前 Vcpkg 编译静态库，默认只支持 MT 模式。</p>
</li>
</ul>
<h2 id="七、小结"><a href="#七、小结" class="headerlink" title="七、小结"></a><strong>七、小结</strong></h2><p>Vcpkg 目前还在不断的完善中，但不可否认，它已经极大的减少了我们在项目启动时，准备第三方库的时间。提高了工作效率。按照时髦的话来说，就是避免了重复造轮子。目前 Vcpkg 已经集成了上百个常用的开源库，而且数量还在不停增长。毕竟是微软旗下的开源项目，质量还是可以得到保障的，完全可以在工业级项目中得以使用。源代码托管在 github上，github 社区很活跃，有兴趣的朋友也可以参与进来。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>读书摘抄</title>
    <url>/2024/07/22/kindle%20%E8%AF%BB%E4%B9%A6%E6%91%98%E6%8A%84/</url>
    <content><![CDATA[<p>《对于为何要学习某种东西抱有疑问，本是理所当然。唯有疑问解除了，才会产生求知的欲望，才能走上理解数学本质之路。》(摘自由东野圭吾(Higashino Keigo), 刘子倩撰写的《嫌疑人 X 的献身》)</p>
<p>《自以为是永远都是大敌，本可看到的东西也会因此视而不见。”》(摘自由 东野圭吾(Higashino Keigo), 刘子倩 撰写的《嫌疑人X的献身》)</p>
<span id="more"></span>  


<p>《他提到的创造性思维技巧中的一个叫作“假面具”。按照这个方法，如果你想解决一个问题，可以从它的对立面着手思考，看会有什么创意迸发出来。举个简单的例子：如果想盖一座摩天大楼，就反过来想如果造一座深入地下的建筑会怎样。这样做可以强迫大脑拓宽思路，看到更多的可能性，进而激发更多创意。》(摘自由 斯蒂芬·盖斯, 桂君 撰写的《微习惯（1天1个俯卧撑、1天读1页书……每天只做一点点的无负担习惯策略，简单到不可能失败的自我管理法则！）》)</p>
<p>《数学归纳法依赖于这样一个事实：任意一个自然数r都有一个后继的自然数r＋1，而且我们所求的自然数n可以从1开始经过这样的有限步骤而达到．》(摘自由 R·柯朗H·罗宾, I·斯图尔特, 左平, 张饴慈 撰写的《什么是数学：对思想和方法的基本研究(中文版第三版)》)</p>
<p>《大多数人如果能给更多事情一个机会的话，他们的问题都能解决。》(摘自由 加·泽文, 孙仲旭, 李玉瑶 撰写的《岛上书店（每个人的生命中，都有无比艰难的那一年，将人生变得美好而辽阔。现象级全球畅销书！） (读客全球顶级畅销小说文库 137)》)</p>
<p>《一旦一个人在乎一件事，就发现自己不得不开始在乎一切事。》(摘自由 加·泽文, 孙仲旭, 李玉瑶 撰写的《岛上书店（每个人的生命中，都有无比艰难的那一年，将人生变得美好而辽阔。现象级全球畅销书！） (读客全球顶级畅销小说文库 137)》)</p>
<p>《生活中每一桩糟糕事，几乎都是时机不当的结果，每件好事，都是时机恰到好处的结果。”》(摘自由 加·泽文, 孙仲旭, 李玉瑶 撰写的《岛上书店（每个人的生命中，都有无比艰难的那一年，将人生变得美好而辽阔。现象级全球畅销书！） (读客全球顶级畅销小说文库 137)》)</p>
<p>《然而就是因为独来独往，才让我们以为自己不值得被爱。有一天，你不知道是什么时候，你会驱车上路。有一天，你不知道是什么时候，你会遇到他（她）。你会被爱，因为你今生第一次真正不再孤单。你会选择不再孤单下去。”》(摘自由 加·泽文, 孙仲旭, 李玉瑶 撰写的《岛上书店（每个人的生命中，都有无比艰难的那一年，将人生变得美好而辽阔。现象级全球畅销书！） (读客全球顶级畅销小说文库 137)》)</p>
<p>《胆小鬼连幸福都会害怕，碰到棉花都会受伤，有时还会被幸福所伤。》(摘自由 太宰治, 烨伊 撰写的《人间失格 (太宰治灵魂深处无助的生命绝唱 献给迷茫中挣扎的人)》)</p>
<p>《“俗话说‘金钱散尽，情缘两断’。其实人们对这句话的解释是颠倒的。并不是说男人的钱一用光，就会被女人甩掉。而是说男人一旦没有钱，就会意志消沉，变得颓废窝囊，连笑都没力气》(摘自由 太宰治, 烨伊 撰写的《人间失格 (太宰治灵魂深处无助的生命绝唱 献给迷茫中挣扎的人)》)</p>
<p>《人性有多矛盾；我不知道，真诚中有多少虚伪，高尚中有多少卑鄙，或者，邪恶中有多少善良。》(摘自由 毛姆, 高更, 作家榜经典, 徐淳刚 撰写的《月亮与六便士(大星文化出品，全新未删节畅销冠军！荣获2017豆瓣阅读总榜第1名！纸质书电子书销量突破100万册 (作家榜经典文库)》)</p>
<p>《生活不过是一场混乱，充满了种种的荒谬和污秽，只能引人发笑，未免乐极生悲》(摘自由 毛姆, 高更, 作家榜经典, 徐淳刚 撰写的《月亮与六便士(大星文化出品，全新未删节畅销冠军！荣获2017豆瓣阅读总榜第1名！纸质书电子书销量突破100万册） (作家榜经典文库)》)</p>
<p>《然而就是因为独来独往，才让我们以为自己不值得被爱。有一天，你不知道是什么时候，你会驱车上路。有一天，你不知道是什么时候，你会遇到他（她）。你会被爱，因为你今生第一次真正不再孤单。你会选择不再孤单下去。”》(摘自由 加·泽文, 孙仲旭, 李玉瑶 撰写的《岛上书店（每个人的生命中，都有无比艰难的那一年，将人生变得美好而辽阔。现象级全球畅销书！） (读客全球顶级畅销小说文库 137)》)</p>
<p>《一个人内心已动，就必然心不在焉，心不在焉的人必然会失败。》(摘自由 度阴山 撰写的《知行合一王阳明(1472-1529)</p>
<p>《非要在平时有克制的能力，在自己的良知上用全功，把自己锻造成一个泰山压顶色不变，麋鹿在眼前而目不转的人，才能不动心。”》(摘自由 度阴山 撰写的《知行合一王阳明(1472-1529)</p>
<p>《你的意念所到之处，正确的就知道正确，错误的就知道错误，不可能有丝毫的隐瞒。只要你不去欺骗良知，真真切切地依循着良知去做，如此就能存善，如此就能除恶。此处是何等的稳当快乐！这些就是格物的真正秘诀，致知的实在功夫。若不仰仗这些真机，如何去格物？关于这点，我也是近年才领悟得如此清楚明白的。一开始，我还怀疑仅凭良知肯定会有不足，但经过仔细体会，自然会感觉到没有一丝缺陷。”》(摘自由 度阴山 撰写的《知行合一王阳明(1472-1529)</p>
<p>《王阳明心学认为人心中有个能分是非善恶的良知，所以人不必靠典籍，也不必靠其他外在的方面来证明，良知刹那间一发作，那就是正确答案。但千万不能有第二次发作，也就是在一件事上不要反复思考，记住你面对事情时脑海中的第一个解决方案，那就是最佳方案，这也就是真正的致良知。一个出色的军事家就应该致良知，相信自己良知的力量，按良知的指引做出决定，这样才不会疑虑和悔恨。》(摘自由 度阴山 撰写的《知行合一王阳明(1472-1529)</p>
<p>《一个拥有良知的人应该是在遇到压迫时，即使前面是刀山火海，即使屠刀架脖，即使不能成功，也要奋勇向前。这是为你的道、你的信仰、你的责任和你的良知必须付出的牺牲，这就是“杀身以成仁”和“无求生以害仁”》(摘自由 度阴山 撰写的《知行合一王阳明(1472-1529)</p>
<p>《一个人在忿怒时，就会感情用事，有时会怒得过分，就失去了心的本体。因此，有所忿怒，心必然不会中正》(摘自由 度阴山 撰写的《知行合一王阳明(1472-1529)</p>
<p>《我们最应该在根上操心，也就是光明良知，而光明良知的一个主要途径就是去事上磨炼。》(摘自由 度阴山 撰写的《知行合一王阳明(1472-1529)（读客熊猫君出品，讲述王阳明传奇，剖析知行合一无边威力。狂销50万！）》)</p>
<p>《ISO是感光度的意思，是指相机对光线的敏感程度，感光度值越高，画面越亮》(摘自由 京内网 撰写的《超简单！手机摄影技巧大全》</p>
<p>《快门速度控制着相机的进光量，快门速度越慢，进入相机的光线就越多，画面也就越亮，快门速度越快，进入相机的光线就越少，画面也就越暗。》(摘自由 京内网 撰写的《超简单！手机摄影技巧大全》)</p>
<p>《设计抽象模型和设计实现方案应该是两个独立的行为。但尽管如此，这并不意味着我们需要用不同的人手来分开处理这两部分，重要的是，开发人员必须知道自己在某个特定的时间时，自己到底是在负责抽象呢，还是负责实现？》(摘自由 Robert B. Murray, 王昕 撰写的《C++编程惯用法——高级程序员常用方法和技巧（异步图书） (C和C++实务精选)》</p>
<p>《设计抽象模型和设计实现细节应该是两个独立且相关的行为。 • 没有出现在抽象模型中的东西和出现在其中的东西一样重要。 • 如果存在疑问，先不要去考虑它。添加新的功能通常都不会有兼容性的问题，但是去除一个已有的功能则可能会导致代码失效。 • 彻底地检测和记录下设计中的关键点。 • 设计是一个迭代的过程。 • 请考虑边界条件。 • 在设计的初始阶段使用CRC卡片。》(摘自由 Robert B. Murray, 王昕 撰写的《C++编程惯用法——高级程序员常用方法和技巧（异步图书） (C和C++实务精选)》)</p>
<p>《对于缺省复制构造函数是否能够工作这个问题，我们并没有一个通用的规则。一种从经验中得到的方法就是：对那些包含指针的类要“另眼相待”。如果被指向的对象是“属于”该产生的对象，那么缺省的复制构造函数就有可能是错误的，因为它只是简单地复制了指针而不是指针所指向的对象。》(摘自由 Robert B. Murray, 王昕 撰写的《C++编程惯用法——高级程序员常用方法和技巧（异步图书） (C和C++实务精选)》)</p>
<p>《C++要求“对象的析构过程必须和其创建过程相反”》(摘自由 Robert B. Murray, 王昕 撰写的《C++编程惯用法——高级程序员常用方法和技巧（异步图书）</p>
<p>《如果确实因为某些原因，使得为类实现复制构造函数变得非常困难，那么请把它声明为私用的，并且不要为它提供任何的定义：》(摘自由 Robert B. Murray, 王昕 撰写的《C++编程惯用法——高级程序员常用方法和技巧（异步图书） (C和C++实务精选)》)</p>
<p>《批判性思维是建立在良好判断的基础上，使用恰当的评估标准对事物的真实价值进行判断和思考。》(摘自由 理查德·保罗, 琳达·埃尔德 撰写的《批判性思维工具(原书第3版)》)</p>
<p>《优秀的思考者可能是那些一直辛勤地工作、经常提问、追求重要观点、综合思考各种信息、区分地对待事物、试图在重要的思想观点之间建立联系的人》(摘自由 理查德·保罗, 琳达·埃尔德 撰写的《批判性思维工具(原书第3版)》)</p>
<p>《公正性需要我们没有偏见地对待所有相关的观点，排除个人、亲友、集体和国家的感受和利益的影响。它要求坚持良好的思维标准（如准确性、逻辑清晰、广度等），不受个人和团体利益的影响。》(摘自由 理查德·保罗, 琳达·埃尔德 撰写的《批判性思维工具(原书第3版)》)</p>
<p>《要具有思维勇气，要了解那些被社会认为是危险和荒谬的观点常常包含着一些真理，而群体普遍认同的观点也可能包含错误》(摘自由 理查德·保罗, 琳达·埃尔德 撰写的《批判性思维工具(原书第3版)》)</p>
<p>《我不会认同任何信念的内容。我只认同自己形成信念的过程。我是一个批判性思考者，我愿意检验我的信念，并且愿意放弃那些不能被证据和理性思考支持的信念。我会时刻跟随证据和推理的脚步。我的真实身份是一个批判性思考者、一个终生的学习者、一个通过建立更加合理的信念不停寻求提高自己思考水平的人。》(摘自由 理查德·保罗, 琳达·埃尔德 撰写的《批判性思维工具(原书第3版)》)</p>
<p>《当思想和行为一致的时候，我们就是思维正直的。我们做到了我们承诺的，没有表面说一套实际上却做另一套》(摘自由 理查德·保罗, 琳达·埃尔德 撰写的《批判性思维工具(原书第3版)》)</p>
<p>《当我们思维遵从的时候，我们仅仅能在“接受”的观点中进行思考；而要做到思考公正就是要拒绝不加判断的接受，没有亲自对这些观点的优缺点进行思考就不能接受这些观点。》(摘自由 理查德·保罗, 琳达·埃尔德 撰写的《批判性思维工具(原书第3版)》)</p>
<p>《你可以问自己下面的问题： ■今天哪些时候我的思维是最差的？ ■今天哪些时候我的思维是最好的？ ■我今天实际上在思考什么？ ■我解决了哪些问题？ ■我是否无谓地为一些消极的思维而感到沮丧？ ■如果我重新过这一天，我应该做出哪些改变？为什么？ ■我今天做了哪些对自己长期目标有益的事情？ ■我所做的事与自己的价值观相一致吗？ ■如果我以今天的方式生活10年，》(摘自由 理查德·保罗, 琳达·埃尔德 撰写的《批判性思维工具(原书第3版)》)</p>
<p>《每天通过回答下面的问题观察自己的自我中心：当我反思自己一天的行为时，我是否被细小的事情惹怒了？我是否说了一些失去理性的话来坚持自己的意见？我是否将自己的意愿强加给他人？当我对某种事物有强烈的情感的时候，我是否没能表达自己的意愿，以致后来愤恨自己？》(摘自由 理查德·保罗, 琳达·埃尔德 撰写的《批判性思维工具(原书第3版)》)</p>
]]></content>
      <categories>
        <category>随笔</category>
        <category>读书笔记</category>
      </categories>
  </entry>
  <entry>
    <title>Linux I/O模型</title>
    <url>/2024/07/22/linux%E7%BD%91%E7%BB%9CIO%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="I-O模型"><a href="#I-O模型" class="headerlink" title="I&#x2F;O模型"></a>I&#x2F;O模型</h1><h3 id="两种高效的事件处理模式"><a href="#两种高效的事件处理模式" class="headerlink" title="两种高效的事件处理模式"></a><strong>两种高效的事件处理模式</strong></h3><span id="more"></span>  

<ul>
<li><p><strong>Reactor 模式</strong></p>
<p>  Reactor 模式要求**<em>主线程</em>**(I&#x2F;O处理单元)只负责监听文件描述上是否有事件发生，有的话就立即将该事件通知工作线程，除此之外，主线程不负责其他任何实质性的工作。以<code>epoll_wait</code>为例实现的<code>Reactor</code>模式的工作流程</p>
<p>  NaN. 主线程往<code>epoll</code>内核事件表中注册<code>socket</code>上的读就绪事件</p>
<p>  NaN. 主线程调用<code>epoll_wait</code>等待<code>socket</code>上有数据可读</p>
<p>  NaN. 当<code>socket</code>上有数据可读时，<code>epoll_wait</code>通知主线程，主线程则将<code>socket</code>可读事件放入请求队列</p>
<p>  NaN. 睡眠在请求队列上的某个工作线程被唤醒，它从<code>socket</code>读取数据，并处理客户请求，然后往<code>epoll</code> 内核事件表中注册该<code>socket</code>上的写就绪事件</p>
<p>  NaN. 主线程调用<code>epoll_wait</code>等待socket可写</p>
<p>  NaN. 当<code>socket</code>可写时，<code>epoll_wait</code>通知主线程，主线程将<code>socket</code> 可写事件放入请求队列</p>
<p>  NaN. 睡眠在请求队列上的某个工作线程被唤醒，它往<code>socket</code>上写入服务器处理客户端请求的结果</p>
<pre><code>  ![](https://isrootblog-1251140236.cos.ap-beijing.myqcloud.com/uPic/Reactormoshi_R2Y4X6mes1.png)
  
  工作线程从请求队列取出事件后，将根据事件类型进行处理，因此没有必要区分 读工作线程 和 写工作线程。
  
</code></pre>
</li>
<li><p><strong>Proactor 模式</strong></p>
<p>  Proactor 模式将所有<code>I/O</code>操作都交给 <strong>主线程</strong>和 <strong>内核</strong> 来处理，工作线程仅负责业务逻辑，</p>
<p>  使用异步<code>I/O</code> 模型（<code>aio_read</code> 和 <code>aio_write</code>）为例实现的Proactor模式的工作流程</p>
<p>  NaN. 主线程调用<code>aio_read</code>函数向内核注册<code>socket</code>上的读完成事件，并告诉内核用户读缓冲区的地址，以及读操作完成时如何通知应用程序(可以使用信号)</p>
<p>  NaN. 主线程继续处理其他逻辑</p>
<p>  NaN. 当<code>socket</code>上的数据被读入用户缓冲区后，内核将向应用程序发送一个信号，以通知应用程序数据已经可用</p>
<p>  NaN. 应用程序预先定义好的信号处理函数选择一个工作线程来处理客户请求，工作线程处理完客户请求后，调用<code>aio_write</code>函数向内核注册<code>socket</code>上的写完成事件，并告诉内核用户写缓冲区的位置，以及写操作完成时如何通知应用程序(以信号为例)</p>
<p>  NaN. 主线程继续处理其他逻辑</p>
<p>  NaN. 当用户缓冲区的数据被写入<code>socket</code>之后，内核将向应用程序发送一个信号，以通知应用程序数据已经发送完毕</p>
<p>  NaN. 应用程序预先定义好的信号处理函数选择一个工作线程来做善后处理，比如决定是否关闭<code>socket</code> Proactor 模式工作流程： <img src="https://isrootblog-1251140236.cos.ap-beijing.myqcloud.com/uPic/Proactor%E6%A8%A1%E5%BC%8F_hxiBM0rNvF.png"></p>
<p>  上图中，<code>socket</code> 上的读写事件是通过调用<code>aio_read</code> &#x2F;<code>aio_write</code>向内核注册的，因此内核也应该通过信号来向应用程序报告<code>socket</code>上的读写事件，主线程中的<code>epoll_wait</code>调用仅能用来检测监听<code>socket</code>上的连接请求事件，而不能用来检测连接<code>socket</code>上的读写事件</p>
</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>c++</category>
        <category>网络编程</category>
      </categories>
  </entry>
  <entry>
    <title>Log4Qt for Qt5使用</title>
    <url>/2024/07/22/log4qt%20for%20Qt5%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="下载-log4qt"><a href="#下载-log4qt" class="headerlink" title="下载 log4qt"></a>下载 log4qt</h2><p>从github 上下载log4qt的最新源码，在下载的时候需要注意自己使用的Qt版本，如果Qt是低于5.3版本的，请下载这个 <a href="https://github.com/MEONMedical/Log4Qt/tree/master" title="qt低于5.3版本">qt低于5.3版本</a>如果高于5.3版本的请直接下载<a href="https://github.com/MEONMedical/Log4Qt/tree/1.4" title="地址">地址</a></p>
<span id="more"></span>  

<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>编译非常方便，我是直接使用qtCreator打开目录下Log4Qt&#x2F;log4qt.pro 进行编译的，如果编译过程中有版本判定的错误之类的，修改判断即可</p>
<p>使用qtCreator编译会将.lib和.dll的直接编译出来，我QtCreator配置的编译器msvc2013.生成的目录在Log4Qt&#x2F;bin 目录下</p>
<ul>
<li>在编译32位的库的时候,遇到了提示 <code>error C3861: “__builtin_popcount”: 找不到标识符</code>和<code>error C3861: “__builtin_popcountll”: 找不到标识符</code>.在那个错误的头文件添加</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#define __builtin_popcount __popcnt </span><br><span class="line">#define __builtin_popcountl __popcnt</span><br><span class="line">#define __builtin_popcountll __popcnt</span><br><span class="line">#define __builtin_popcountlll __popcnt</span><br></pre></td></tr></table></figure>

<h2 id="使用log4qt"><a href="#使用log4qt" class="headerlink" title="使用log4qt"></a>使用log4qt</h2><ul>
<li><p>在自己的工程中使用log4Qt,直接将Log4Qt&#x2F;src 目录拷贝到自己的工程目录，在自己工程目录的pro文件添加<code>INCLUDEPATH += ./src</code>，将Log4Qt&#x2F;bin下的log4qt.dll 和 log4qt.lib拷贝到自己工程目录下，载pro文件增加<code>unix|win32: LIBS += -L$$PWD/ -llog4qt</code>。</p>
</li>
<li><p>参考Log4Qt\examples\propertyconfigurator 中的使用方式，将<code>propertyconfigurator.exe.log4qt.properties</code> 文件拷贝自己程序生成目录中，将<code>propertyconfigurator.exe</code>修改成为自己的应用程序名称.</p>
</li>
<li><p>在工程文件中增加一个新的日志类，我这里为了方便将新的日志类写成了单例模式,具体代码参考</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">loggerFile.h</span><br><span class="line">#ifndef LOGGERFILE_H</span><br><span class="line">#define LOGGERFILE_H</span><br><span class="line"></span><br><span class="line">#include &lt;QObject&gt;</span><br><span class="line">#include &quot;log4qt/logger.h&quot;</span><br><span class="line"></span><br><span class="line">class loggerFile : public QObject</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line">public:</span><br><span class="line">    static loggerFile* getLoggerFile();</span><br><span class="line"></span><br><span class="line">    virtual ~loggerFile();</span><br><span class="line"></span><br><span class="line">    void initLoggerFile();</span><br><span class="line"></span><br><span class="line">    void loggerInfo(const QString&amp; string);</span><br><span class="line"></span><br><span class="line">    void loggerWarning(const QString&amp; string);</span><br><span class="line"></span><br><span class="line">    void loggerError(const QString&amp; string);</span><br><span class="line"></span><br><span class="line">    void loggerDebug(const QString&amp; string);</span><br><span class="line"></span><br><span class="line">    void loggerExit();</span><br><span class="line">signals:</span><br><span class="line"></span><br><span class="line">public slots:</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">    explicit loggerFile(QObject *parent = 0);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">#endif // LOGGERFILE_H</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">loggerFile.cpp</span><br><span class="line">#include &lt;QCoreApplication&gt;</span><br><span class="line">#include &quot;log4qt/propertyconfigurator.h&quot;</span><br><span class="line">#include &quot;log4qt/loggerrepository.h&quot;</span><br><span class="line">#include &lt;QScopedPointer&gt;</span><br><span class="line">#include &lt;QStringBuilder&gt;</span><br><span class="line">#include &lt;QString&gt;</span><br><span class="line">#include &lt;QFile&gt;</span><br><span class="line">#include &lt;QDebug&gt;</span><br><span class="line">#include &lt;QDateTime&gt;</span><br><span class="line">#include &quot;loggerFile.h&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">using namespace Log4Qt;</span><br><span class="line">loggerFile *loggerFile::getLoggerFile()</span><br><span class="line">&#123;</span><br><span class="line">    static loggerFile *m_loggerFile;</span><br><span class="line">    if(m_loggerFile == nullptr)</span><br><span class="line">    &#123;</span><br><span class="line">        m_loggerFile = new loggerFile();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return m_loggerFile;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">loggerFile::~loggerFile()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void loggerFile::initLoggerFile()</span><br><span class="line">&#123;</span><br><span class="line">    QString configFile = QCoreApplication::applicationFilePath() + QStringLiteral(&quot;.log4qt.properties&quot;);</span><br><span class="line">    if (QFile::exists(configFile))</span><br><span class="line">    &#123;</span><br><span class="line">        Log4Qt::PropertyConfigurator::configureAndWatch(configFile);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void loggerFile::loggerInfo(const QString &amp;string)</span><br><span class="line">&#123;</span><br><span class="line">    auto logger = Log4Qt::Logger::rootLogger();</span><br><span class="line"></span><br><span class="line">    logger-&gt;info(string);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void loggerFile::loggerWarning(const QString &amp;string)</span><br><span class="line">&#123;</span><br><span class="line">    auto logger = Log4Qt::Logger::rootLogger();</span><br><span class="line"></span><br><span class="line">    logger-&gt;warn(string);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void loggerFile::loggerError(const QString &amp;string)</span><br><span class="line">&#123;</span><br><span class="line">    auto logger = Log4Qt::Logger::rootLogger();</span><br><span class="line"></span><br><span class="line">    logger-&gt;error(string);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void loggerFile::loggerDebug(const QString &amp;string)</span><br><span class="line">&#123;</span><br><span class="line">    auto logger = Log4Qt::Logger::rootLogger();</span><br><span class="line"></span><br><span class="line">    logger-&gt;debug(string);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void loggerFile::loggerExit()</span><br><span class="line">&#123;</span><br><span class="line">        auto logger = Log4Qt::Logger::rootLogger();</span><br><span class="line"></span><br><span class="line">        logger-&gt;info(&quot;#####################################################################&quot;);</span><br><span class="line">        logger-&gt;info(QString(&quot;#                EXIT TIME=%1              #&quot;).arg(QDateTime::currentDateTime().toString()));</span><br><span class="line">        logger-&gt;info(&quot;#####################################################################&quot;);</span><br><span class="line">        logger-&gt;removeAllAppenders();</span><br><span class="line">        logger-&gt;loggerRepository()-&gt;shutdown();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">loggerFile::loggerFile(QObject *parent) :</span><br><span class="line">    QObject(parent)</span><br><span class="line">&#123;</span><br><span class="line">    initLoggerFile();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在别的模块中使用的时候包含<code>loggerFile.h</code> 头文件，然后直接调用即可<code>loggerFile::getLoggerFile()-&gt;loggerError(QString(&quot;error&quot;));</code></p>
<p>在main函数中调用<code>loggerFile::getLoggerFile()-&gt;loggerExit();</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">main.cpp</span><br><span class="line">int main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">    QApplication app(argc, argv);</span><br><span class="line"></span><br><span class="line">    int ret=app.exec();</span><br><span class="line">    loggerFile::getLoggerFile()-&gt;loggerExit();</span><br><span class="line">    return ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
        <category>c++</category>
        <category>Qt</category>
      </categories>
  </entry>
  <entry>
    <title>macos编译Boost库错误</title>
    <url>/2024/07/22/macos%20%E7%BC%96%E8%AF%91Boost%20%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<h2 id="相关版本"><a href="#相关版本" class="headerlink" title="相关版本"></a>相关版本</h2><ul>
<li>macos 10.15.7</li>
<li>boost 1.76.0</li>
<li>Homebrew 3.2.9<br>  boost 库是使用brew 安装的最新版本</li>
</ul>
<h2 id="编译时问题"><a href="#编译时问题" class="headerlink" title="编译时问题"></a>编译时问题</h2><p>在使用cmake 编译工程的时候，使用的是静态库链接，然后<code>regex</code>库无法进行链接，动态库是可以的。cmake文件如下</p>
<span id="more"></span>  

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 3.0)</span><br><span class="line">set(Boost_USE_STATIC_LIBS        ON)  # only find static libs</span><br><span class="line"></span><br><span class="line">project(test )</span><br><span class="line"></span><br><span class="line">set(BOOST_COMPONENTS date_time chrono  filesystem  regex system )</span><br><span class="line">find_package(Boost REQUIRED COMPONENTS $&#123;BOOST_COMPONENTS&#125;)</span><br><span class="line">if(Boost_FOUND )</span><br><span class="line">    MESSAGE(STATUS &quot;Boost_INCLUDE_DIRS = $&#123;Boost_INCLUDE_DIRS&#125;&quot;)</span><br><span class="line">    MESSAGE(STATUS &quot;Boost_LIBRARIES = $&#123;Boost_LIBRARIES&#125;&quot;)</span><br><span class="line">    MESSAGE(STATUS &quot;Boost_LIB_VERSION = $&#123;Boost_LIB_VERSION&#125;&quot;)</span><br><span class="line">    include_directories($&#123;Boost_INCLUDE_DIRS&#125;)</span><br><span class="line">endif()</span><br><span class="line">add_executable(test main.cpp)</span><br><span class="line">target_link_libraries(test $&#123;Boost_LIBRARIES&#125;)</span><br></pre></td></tr></table></figure>

<p>在<code>make</code>编译的时候，一直报一个链接错误。<br><a href="https://isrootblog-1251140236.cos.ap-beijing.myqcloud.com/uPic/ajScFH.png" title="编译错误"><img src="https://isrootblog-1251140236.cos.ap-beijing.myqcloud.com/uPic/ajScFH.png" alt="编译错误" title="编译错误"></a></p>
<p>这是在静态链接的时候找不到icudata库文件。</p>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>在cmake 文件中添加<code>set(CMAKE_CXX_FLAGS &quot;$&#123;CMAKE_CXX_FLAGS&#125; -L/usr/local/opt/icu4c/lib -I/usr/local/opt/icu4c/include&quot;)</code></p>
<p>重新编译，可以正常编译过。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>c++</category>
        <category>Boost</category>
      </categories>
  </entry>
  <entry>
    <title>netstatus命令使用</title>
    <url>/2024/07/22/netstatus%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="netstatus命令使用"><a href="#netstatus命令使用" class="headerlink" title="netstatus命令使用"></a>netstatus命令使用</h1><h2 id="netstatus-命令总结"><a href="#netstatus-命令总结" class="headerlink" title="netstatus 命令总结"></a>netstatus 命令总结</h2><p>netstatus 命令是一个用于查看网络连接状态的命令，主要用于诊断网络问题。以下是 netstatus 命令的一些常用选项和用法：</p>
<span id="more"></span>  
<p>NaN. netstat -a：显示所有连接和监听端口的状态。</p>
<p>NaN. netstat -n：以数字形式显示地址和端口号。</p>
<p>NaN. netstat -p：显示与每个连接关联的进程 ID 和名称。</p>
<p>NaN. netstat -r：显示路由表。</p>
<p>NaN. netstat -s：显示各种协议的统计信息。</p>
<p>NaN. netstat -t：显示 TCP 连接状态。</p>
<p>NaN. netstat -u：显示 UDP 连接状态。</p>
<p>NaN. netstat -c：连续显示连接状态。</p>
<p>NaN. netstat -l：显示正在监听的端口。</p>
<p>NaN. netstat -o：显示与每个连接关联的进程 ID 和名称，以及占用的 CPU 时间。</p>
<p>总之，netstatus 命令是一个非常有用的网络工具，可以帮助用户快速诊断网络问题，定位连接问题，并了解网络连接的状态。</p>
<h2 id="详细说明"><a href="#详细说明" class="headerlink" title="详细说明"></a>详细说明</h2><p>netstat（network statistics）是一个用于显示网络连接状态的命令行工具，可用于诊断网络问题。它可以显示当前正在运行的 TCP&#x2F;IP 协议的连接状态、路由表、网络接口和多播成员等信息。以下是 netstat 命令的一些常用选项和用法：</p>
<p>NaN. netstat -a：显示所有连接和监听端口的状态。这个选项可以列出所有正在运行的 TCP 和 UDP 连接，以及正在监听的端口。</p>
<p>NaN. netstat -n：以数字形式显示地址和端口号。这个选项将不会把地址和端口号解析为主机名和服务名，而是直接显示数字格式。</p>
<p>NaN. netstat -p：显示与每个连接关联的进程 ID 和名称。这个选项可以显示每个连接所属的进程 ID 和名称，以及该进程的状态。</p>
<p>NaN. netstat -r：显示路由表。这个选项可以显示当前系统的路由表，包括默认网关和直接连接的网络。</p>
<p>NaN. netstat -s：显示各种协议的统计信息。这个选项可以显示各种协议的统计信息，包括 TCP、UDP、ICMP 等。</p>
<p>NaN. netstat -t：显示 TCP 连接状态。这个选项可以显示当前所有 TCP 连接的状态，包括 ESTABLISHED、CLOSE_WAIT、TIME_WAIT 等。</p>
<p>NaN. netstat -u：显示 UDP 连接状态。这个选项可以显示当前所有 UDP 连接的状态，包括 LISTENING、CLOSED 等。</p>
<p>NaN. netstat -c：连续显示连接状态。这个选项可以连续显示连接状态，每隔一秒钟刷新一次。</p>
<p>NaN. netstat -l：显示正在监听的端口。这个选项可以显示当前系统中所有正在监听的端口。</p>
<p>NaN. netstat -o：显示与每个连接关联的进程 ID 和名称，以及占用的 CPU 时间。这个选项可以显示每个连接所属的进程 ID 和名称，以及该进程所占用的 CPU 时间。</p>
<p>总之，netstat 命令是一个非常有用的网络工具，可以帮助用户快速诊断网络问题，定位连接问题，并了解网络连接的状态。熟练掌握 netstat 命令的用法，可以更好地管理和维护网络系统。</p>
<h2 id="netstat-安装"><a href="#netstat-安装" class="headerlink" title="netstat 安装"></a>netstat 安装</h2><p>在大多数 Linux 发行版中，<code>netstat</code> 命令通常是预装的，无需手动安装。但是，在某些基于 Alpine Linux 的 Docker 镜像中可能需要手动安装。</p>
<p>如果你需要手动安装 <code>netstat</code> 命令，可以按照以下步骤进行：</p>
<p>NaN. 打开终端，以 root 用户身份登录系统。</p>
<p>NaN. 使用以下命令安装 <code>net-tools</code> 包：</p>
<pre><code>- Debian/Ubuntu 系统：
    
    <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install net-tools</span><br></pre></td></tr></table></figure>
    
- CentOS/RHEL 系统：
    
    <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum update</span><br><span class="line">yum install net-tools</span><br></pre></td></tr></table></figure>
    
</code></pre>
<p>NaN. 安装完成后，可以在终端中输入 <code>netstat -h</code> 命令来查看 <code>netstat</code> 命令的帮助文档，以确认安装是否成功。</p>
<p>注意，在一些新的 Linux 发行版中，<code>netstat</code> 命令已经被废弃，建议使用更现代化的 <code>ss</code> 命令来代替。<code>ss</code> 命令的用法与 <code>netstat</code> 类似，但是更加高效和准确。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>linux</category>
        <category>shell</category>
      </categories>
  </entry>
  <entry>
    <title>Scoop 使用</title>
    <url>/2024/07/22/%E4%BD%BF%E7%94%A8boost%E5%BA%93%E6%93%8D%E4%BD%9CC++%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<h6 id="字符串的查找与替换一直是-C-的弱势，运用-Boost-这个准标准库，将可以很好的弥补-C-的不足，使针对字符串的操作更加容易。"><a href="#字符串的查找与替换一直是-C-的弱势，运用-Boost-这个准标准库，将可以很好的弥补-C-的不足，使针对字符串的操作更加容易。" class="headerlink" title="字符串的查找与替换一直是 C++的弱势，运用 Boost 这个准标准库，将可以很好的弥补 C++的不足，使针对字符串的操作更加容易。"></a>字符串的查找与替换一直是 C++的弱势，运用 Boost 这个准标准库，将可以很好的弥补 C++的不足，使针对字符串的操作更加容易。</h6><span id="more"></span>  
<h4 id="字符串格式转换"><a href="#字符串格式转换" class="headerlink" title="字符串格式转换:"></a>字符串格式转换:</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;boost\lexical_cast.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> boost;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> * argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string str[<span class="number">3</span>] = &#123; <span class="string">&quot;100&quot;</span>, <span class="string">&quot;102&quot;</span>, <span class="string">&quot;3.14159&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 字符串转换为数值类型</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;字符串转为整数: &quot;</span> &lt;&lt; <span class="built_in">lexical_cast</span>&lt;<span class="type">int</span>&gt;(str[<span class="number">0</span>]) &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;字符串转为长整数: &quot;</span> &lt;&lt; <span class="built_in">lexical_cast</span>&lt;<span class="type">long</span>&gt;(str[<span class="number">1</span>]) &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;字符串转为浮点数: &quot;</span> &lt;&lt; <span class="built_in">lexical_cast</span>&lt;<span class="type">float</span>&gt;(str[<span class="number">2</span>]) &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数值类型转化为字符串</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;数值转为字符串: &quot;</span> &lt;&lt; <span class="built_in">lexical_cast</span>&lt;string&gt;(<span class="number">100</span>) &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;十六进制转为十进制: &quot;</span> &lt;&lt; <span class="built_in">lexical_cast</span>&lt;string&gt;(<span class="number">0x10</span>) &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="format格式化："><a href="#format格式化：" class="headerlink" title="format格式化："></a>format格式化：</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;boost\format.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> boost;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> * argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 第一种输出方式: 直接填充字符串</span></span><br><span class="line">    <span class="function">boost::format <span class="title">fmtA</span><span class="params">(<span class="string">&quot;姓名: %s -&gt; 年龄: %d -&gt; 性别: %s&quot;</span>)</span></span>;</span><br><span class="line">    fmtA %<span class="string">&quot;lyshark&quot;</span>;</span><br><span class="line">    fmtA % <span class="number">22</span>;</span><br><span class="line">    fmtA %<span class="string">&quot;男&quot;</span>;</span><br><span class="line"></span><br><span class="line">    std::string str = fmtA.<span class="built_in">str</span>();</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;格式化后: &quot;</span> &lt;&lt; str &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第二种方式: 拷贝的使用</span></span><br><span class="line">    <span class="function">boost::format <span class="title">fmtB</span><span class="params">(<span class="string">&quot;姓名: %s -&gt; 年龄: %d -&gt; 性别: %s&quot;</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; format(fmtB) % <span class="string">&quot;lyshark&quot;</span> % <span class="number">23</span> % <span class="string">&quot;男&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="string-algo-大小写转化函数"><a href="#string-algo-大小写转化函数" class="headerlink" title="string_algo 大小写转化函数"></a><code>string_algo</code> 大小写转化函数</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;boost\algorithm\string.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> boost;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> * argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">string <span class="title">str</span><span class="params">(<span class="string">&quot;readme.log&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">ends_with</span>(str, <span class="string">&quot;log&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;转化为大写: &quot;</span> &lt;&lt; <span class="built_in">to_upper_copy</span>(str) &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;转化为小写: &quot;</span> &lt;&lt; <span class="built_in">to_lower_copy</span>(str) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 替换开头</span></span><br><span class="line">    <span class="built_in">replace_first</span>(str, <span class="string">&quot;readme&quot;</span>, <span class="string">&quot;lyshark&quot;</span>);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;替换开头: &quot;</span> &lt;&lt; str &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行删除后缀</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">char</span>&gt; <span class="title">v</span><span class="params">(str.begin(), str.end())</span></span>;</span><br><span class="line">    vector&lt;<span class="type">char</span>&gt; v2 = <span class="built_in">to_upper_copy</span>(<span class="built_in">erase_first_copy</span>(v, <span class="string">&quot;.log&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x : v2)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; x ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="判断类"><a href="#判断类" class="headerlink" title="判断类"></a>判断类</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;boost\algorithm\string.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> boost;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> * argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    string str[<span class="number">6</span>] = &#123; <span class="string">&quot;hello lyshark&quot;</span>, <span class="string">&quot;hello LyShark&quot;</span>, <span class="string">&quot;ABC&quot;</span>, <span class="string">&quot;ABC&quot;</span>, <span class="string">&quot;FCE&quot;</span> ,<span class="string">&quot;lyshark&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;大小写不敏感判断后缀: &quot;</span> &lt;&lt; <span class="built_in">iends_with</span>(str[<span class="number">0</span>], <span class="string">&quot;lyshark&quot;</span>) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;大小写敏感判断前缀: &quot;</span> &lt;&lt; <span class="built_in">starts_with</span>(str[<span class="number">1</span>], <span class="string">&quot;Hello&quot;</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;测试包含关系: &quot;</span> &lt;&lt; <span class="built_in">contains</span>(str[<span class="number">0</span>], str[<span class="number">5</span>]) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;测试前5个字母是否为小写: &quot;</span> &lt;&lt; <span class="built_in">all</span>(str[<span class="number">0</span>].<span class="built_in">substr</span>(<span class="number">0</span>, <span class="number">5</span>), <span class="built_in">is_lower</span>()) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">is_any_of</span>()</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="修正"><a href="#修正" class="headerlink" title="修正"></a>修正</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;boost\format.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;boost\algorithm\string.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> boost;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> * argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    string str[<span class="number">3</span>] = &#123; <span class="string">&quot;hello LyShark&quot;</span>, <span class="string">&quot;hello LyShark&quot;</span>, <span class="string">&quot;lyshark&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;大小写不敏感判断后缀: &quot;</span> &lt;&lt; <span class="built_in">iends_with</span>(str[<span class="number">0</span>], <span class="string">&quot;lyshark&quot;</span>) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;大小写敏感判断前缀: &quot;</span> &lt;&lt; <span class="built_in">starts_with</span>(str[<span class="number">1</span>], <span class="string">&quot;Hello&quot;</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;测试包含关系: &quot;</span> &lt;&lt; <span class="built_in">contains</span>(str[<span class="number">0</span>], str[<span class="number">2</span>]) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;前5个字母是否为小写: &quot;</span> &lt;&lt; <span class="built_in">all</span>(str[<span class="number">0</span>].<span class="built_in">substr</span>(<span class="number">0</span>, <span class="number">5</span>), <span class="built_in">is_lower</span>()) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;前2个字符是否为字母: &quot;</span> &lt;&lt; <span class="built_in">all</span>(str[<span class="number">1</span>].<span class="built_in">substr</span>(<span class="number">0</span>,<span class="number">2</span>), <span class="built_in">is_alpha</span>()) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 字符串修剪 去空格</span></span><br><span class="line">    <span class="function">boost::format <span class="title">fmt</span><span class="params">(<span class="string">&quot;|%s|\n&quot;</span>)</span></span>;</span><br><span class="line">    std::string my_string = <span class="string">&quot;   hello  lyshark   &quot;</span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;删除两端空格: &quot;</span> &lt;&lt; fmt %<span class="built_in">trim_copy</span>(my_string) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;删除左端空格: &quot;</span> &lt;&lt; fmt %<span class="built_in">trim_left_copy</span>(my_string) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">trim_right</span>(my_string);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;原地删除右端空格: &quot;</span> &lt;&lt; fmt %my_string &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 字符串修建 去特殊符号</span></span><br><span class="line">    std::string my_stringa = <span class="string">&quot;2021 happy new Year !!!&quot;</span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;删除左端数字: &quot;</span> &lt;&lt; fmt %<span class="built_in">trim_left_copy_if</span>(my_stringa, <span class="built_in">is_digit</span>()) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;删除右端标点: &quot;</span> &lt;&lt; fmt %<span class="built_in">trim_right_copy_if</span>(my_stringa, <span class="built_in">is_punct</span>()) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;删除两端(标点|数字|空格): &quot;</span> &lt;&lt; <span class="built_in">trim_copy_if</span>(my_stringa, <span class="built_in">is_punct</span>() || <span class="built_in">is_digit</span>() || <span class="built_in">is_space</span>()) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="字符串查找"><a href="#字符串查找" class="headerlink" title="字符串查找"></a>字符串查找</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;boost\format.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;boost\algorithm\string.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> boost;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">boost::format <span class="title">fmt</span><span class="params">(<span class="string">&quot;|%s|. pos = %d\n&quot;</span>)</span></span>;</span><br><span class="line">    std::string my_string = <span class="string">&quot;Long long ago, there was Ago king as long.&quot;</span>;</span><br><span class="line"></span><br><span class="line">    iterator_range&lt;std::string::iterator&gt; reg;   <span class="comment">// 定义迭代区间</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 寻找第一次出现的位置(大小写敏感)</span></span><br><span class="line">    reg = <span class="built_in">find_first</span>(my_string, <span class="string">&quot;Ago&quot;</span>);</span><br><span class="line">    cout &lt;&lt; fmt %reg % (reg.<span class="built_in">begin</span>() - my_string.<span class="built_in">begin</span>()) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 寻找最后一次出现的位置(大小写不敏感)</span></span><br><span class="line">    reg = ifind_last(my_string, <span class="string">&quot;ago&quot;</span>);</span><br><span class="line">    cout &lt;&lt; fmt %reg % (reg.<span class="built_in">begin</span>() - my_string.<span class="built_in">begin</span>()) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 寻找第三次出现long的位置(大小写不敏感)</span></span><br><span class="line">    reg = ifind_nth(my_string, <span class="string">&quot;long&quot;</span>, <span class="number">2</span>);</span><br><span class="line">    cout &lt;&lt; fmt %reg % (reg.<span class="built_in">begin</span>() - my_string.<span class="built_in">begin</span>()) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取前四个字符和后四个字符</span></span><br><span class="line">    reg = <span class="built_in">find_head</span>(my_string, <span class="number">4</span>);</span><br><span class="line">    cout &lt;&lt; fmt %reg % (reg.<span class="built_in">begin</span>() - my_string.<span class="built_in">begin</span>()) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    reg = <span class="built_in">find_tail</span>(my_string, <span class="number">4</span>);</span><br><span class="line">    cout &lt;&lt; fmt %reg % (reg.<span class="built_in">begin</span>() - my_string.<span class="built_in">begin</span>()) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 找不到则输出</span></span><br><span class="line">    reg = <span class="built_in">find_first</span>(my_string, <span class="string">&quot;lyshark&quot;</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;flag = &quot;</span> &lt;&lt; (reg.<span class="built_in">empty</span>() &amp;&amp; !reg) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="替换与删除-注意带有-copy的为拷贝，代表可以使用string变量来接收，不带的直接操作原始字符串。"><a href="#替换与删除-注意带有-copy的为拷贝，代表可以使用string变量来接收，不带的直接操作原始字符串。" class="headerlink" title="替换与删除 注意带有_copy的为拷贝，代表可以使用string变量来接收，不带的直接操作原始字符串。"></a>替换与删除 注意带有_copy的为拷贝，代表可以使用string变量来接收，不带的直接操作原始字符串。</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;boost\format.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;boost\algorithm\string.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> boost;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">boost::format <span class="title">fmt</span><span class="params">(<span class="string">&quot;|%s|. pos = %d\n&quot;</span>)</span></span>;</span><br><span class="line">    std::string my_string = <span class="string">&quot;Long long ago, there was Ago king as long.&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 替换开头字符串(两种替换方式)</span></span><br><span class="line">    std::string str_copy = <span class="built_in">replace_first_copy</span>(my_string, <span class="string">&quot;long&quot;</span>, <span class="string">&quot;LONG&quot;</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;替换后返回字符串: &quot;</span> &lt;&lt; str_copy &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">replace_first</span>(my_string, <span class="string">&quot;ago&quot;</span>, <span class="string">&quot;AGO&quot;</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;直接替换在原始字符串上: &quot;</span> &lt;&lt; my_string &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 替换开头或结尾前后5个字符</span></span><br><span class="line">    <span class="built_in">replace_tail</span>(my_string, <span class="number">5</span>, <span class="string">&quot;lyshark&quot;</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;替换结尾5个字符: &quot;</span> &lt;&lt; my_string &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">replace_head</span>(my_string, <span class="number">5</span>, <span class="string">&quot;lyshark&quot;</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;替换开头5个字符: &quot;</span> &lt;&lt; my_string &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 替换第一次出现long的位置为AGES</span></span><br><span class="line">    <span class="built_in">replace_nth</span>(my_string, <span class="string">&quot;long&quot;</span>, <span class="number">0</span>, <span class="string">&quot;AGES&quot;</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;第一次出现位置: &quot;</span> &lt;&lt; my_string &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 替换所有出现过的位置</span></span><br><span class="line">    std::string str_copy_a = <span class="built_in">replace_all_copy</span>(my_string, <span class="string">&quot;lyshark&quot;</span>, <span class="string">&quot;LYSSHARK&quot;</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;替换所有位置: &quot;</span> &lt;&lt; str_copy_a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除第1次出现was位置的字符串</span></span><br><span class="line">    std::string del_str_copy = <span class="built_in">erase_nth_copy</span>(my_string, <span class="string">&quot;was&quot;</span>, <span class="number">0</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;删除后的字符串: &quot;</span> &lt;&lt; del_str_copy &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除字符串中所有的LYSSHARK</span></span><br><span class="line">    <span class="built_in">erase_all</span>(my_string, <span class="string">&quot;LYSSHARK&quot;</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;删除后的字符串: &quot;</span> &lt;&lt; my_string &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="切割合并字符串："><a href="#切割合并字符串：" class="headerlink" title="切割合并字符串："></a>切割合并字符串：</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;boost\algorithm\string.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;boost\assign.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> boost;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::string my_string = <span class="string">&quot;lyshark,Link.Zelda:Mario-Ligui+zelda,ZELDA&quot;</span>;</span><br><span class="line">    <span class="function">std::string <span class="title">my_string_b</span><span class="params">(<span class="string">&quot;hello||lyshark||welcome||link&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找字符串中的特定字符串</span></span><br><span class="line">    deque&lt;std::string&gt; deq;</span><br><span class="line"></span><br><span class="line">    ifind_all(deq, my_string, <span class="string">&quot;zelda&quot;</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;查找字符串个数(不区分大小写): &quot;</span> &lt;&lt; deq.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">if</span> (deq.<span class="built_in">size</span>() == <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> each : deq)</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;[ &quot;</span> &lt;&lt; each &lt;&lt; <span class="string">&quot; ]&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 切割字符串(1)</span></span><br><span class="line">    list&lt;iterator_range&lt;std::string::iterator&gt;&gt; ptr;</span><br><span class="line">    <span class="built_in">split</span>(ptr, my_string, <span class="built_in">is_any_of</span>(<span class="string">&quot;,.:-+&quot;</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> each : ptr)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;[ &quot;</span> &lt;&lt; each &lt;&lt; <span class="string">&quot; ]&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 切割字符串(2)</span></span><br><span class="line">    ptr.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="built_in">split</span>(ptr, my_string, <span class="built_in">is_any_of</span>(<span class="string">&quot;.:-&quot;</span>), token_compress_on);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> each : ptr)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;[ &quot;</span> &lt;&lt; each &lt;&lt; <span class="string">&quot; ]&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合并字符串</span></span><br><span class="line">    std::vector&lt;string&gt; vct;</span><br><span class="line"></span><br><span class="line">    vct.<span class="built_in">push_back</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    vct.<span class="built_in">push_back</span>(<span class="string">&quot;lyshark&quot;</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;用空格将其连接起来: &quot;</span> &lt;&lt; <span class="built_in">join</span>(vct, <span class="string">&quot; &quot;</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找迭代器的使用</span></span><br><span class="line">    <span class="keyword">typedef</span> find_iterator&lt;string::iterator&gt; string_find_iterator;</span><br><span class="line">    string_find_iterator pos, end;</span><br><span class="line">    <span class="keyword">for</span> (pos = <span class="built_in">make_find_iterator</span>(my_string_b, <span class="built_in">first_finder</span>(<span class="string">&quot;lyshark&quot;</span>, <span class="built_in">is_iequal</span>())); pos != end; ++pos)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;[ &quot;</span> &lt;&lt; *pos &lt;&lt; <span class="string">&quot; ]&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分割迭代器的使用</span></span><br><span class="line">    <span class="keyword">typedef</span> split_iterator&lt;string::iterator&gt; string_split_iterator;</span><br><span class="line">    string_split_iterator p, endp;</span><br><span class="line">    <span class="keyword">for</span> (p = <span class="built_in">make_split_iterator</span>(my_string_b, <span class="built_in">first_finder</span>(<span class="string">&quot;||&quot;</span>, <span class="built_in">is_iequal</span>())); p != endp; ++p)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;[ &quot;</span> &lt;&lt; *p &lt;&lt; <span class="string">&quot; ]&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="正则模块的使用"><a href="#正则模块的使用" class="headerlink" title="正则模块的使用:"></a>正则模块的使用:</h4><ul>
<li>正则匹配</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;boost\algorithm\string.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;boost\xpressive\xpressive.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> boost;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> boost::xpressive;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 简单匹配字符串</span></span><br><span class="line">    cregex regxA = cregex::<span class="built_in">compile</span>(<span class="string">&quot;a.c&quot;</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;匹配字符串: &quot;</span> &lt;&lt; <span class="built_in">regex_match</span>(<span class="string">&quot;abd&quot;</span>, regxA) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    std::string StringA = <span class="string">&quot;hello lyshark a.c&quot;</span>;</span><br><span class="line">    cregex regxD = cregex::<span class="built_in">compile</span>(<span class="string">&quot;a.c&quot;</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;匹配字符串: &quot;</span> &lt;&lt; <span class="built_in">regex_match</span>((<span class="type">char</span> *)&amp;StringA, regxD) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数组方式引用正则</span></span><br><span class="line">    cregex_compiler regc;</span><br><span class="line"></span><br><span class="line">    regc[<span class="string">&quot;regxA&quot;</span>] = regc.<span class="built_in">compile</span>(<span class="string">&quot;a|b|c&quot;</span>);</span><br><span class="line">    regc[<span class="string">&quot;regxB&quot;</span>] = regc.<span class="built_in">compile</span>(<span class="string">&quot;\d*&quot;</span>);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="built_in">regex_match</span>(<span class="string">&quot;abcdefg&quot;</span>, regc[<span class="string">&quot;regxA&quot;</span>]) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">regex_match</span>(<span class="string">&quot;123123&quot;</span>, regc[<span class="string">&quot;regxB&quot;</span>]) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用C++ 11 匹配身份证</span></span><br><span class="line">    cregex regxB = cregex::<span class="built_in">compile</span>(<span class="string">R&quot;---(\d&#123;6&#125;(1|2)\d&#123;3&#125;(0|1)\d[0-3]\d\d&#123;3&#125;(X|\d))---&quot;</span>, icase);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;验证身份证: &quot;</span> &lt;&lt; <span class="built_in">regex_match</span>(<span class="string">&quot;513436200002247099&quot;</span>, regxB) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用C++ 98 匹配身份证</span></span><br><span class="line">    cregex regxC = cregex::<span class="built_in">compile</span>(<span class="string">&quot;\d&#123;6&#125;((1|2)\d&#123;3&#125;)((0|1)\d)([0-3]\d)(\d&#123;3&#125;(X|\d))&quot;</span>, icase);</span><br><span class="line">    cmatch what;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">regex_match</span>(<span class="string">&quot;513436200002247099&quot;</span>, what, regxC);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;each : what)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;[ &quot;</span> &lt;&lt; each &lt;&lt; <span class="string">&quot; ]&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;生日为: &quot;</span> &lt;&lt; what[<span class="number">1</span>] &lt;&lt; what[<span class="number">3</span>] &lt;&lt; what[<span class="number">5</span>] &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 正则匹配开头结尾</span></span><br><span class="line">    <span class="function">string <span class="title">StringB</span><span class="params">(<span class="string">&quot;lyshark.log&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    sregex start_regx = sregex::<span class="built_in">compile</span>(<span class="string">&quot;^ly.*&quot;</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;匹配开头: &quot;</span> &lt;&lt; <span class="built_in">regex_match</span>(StringB, start_regx) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    sregex end_regx = sregex::<span class="built_in">compile</span>(<span class="string">&quot;.*log$&quot;</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;匹配结尾: &quot;</span> &lt;&lt; <span class="built_in">regex_match</span>(StringB, end_regx) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>正则查找替换</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;boost\algorithm\string.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;boost\xpressive\xpressive.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> boost;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> boost::xpressive;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 正则查找特定字符串</span></span><br><span class="line">    <span class="type">char</span> my_stringA[] = <span class="string">&quot;This is power-studio territory&quot;</span>;</span><br><span class="line"></span><br><span class="line">    cregex regx = cregex::<span class="built_in">compile</span>(<span class="string">&quot;(power)-(.&#123;6&#125;)&quot;</span>, icase);</span><br><span class="line">    cmatch what;</span><br><span class="line">    <span class="built_in">regex_search</span>(my_stringA, what, regx);</span><br><span class="line">    <span class="keyword">if</span> (what.<span class="built_in">size</span>() != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x = <span class="number">0</span>; x &lt; what.<span class="built_in">size</span>(); x++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; what[x] &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 正则替换特定字符串</span></span><br><span class="line">    std::string my_stringB = <span class="string">&quot;2020 Happy New Year !!!&quot;</span>;</span><br><span class="line"></span><br><span class="line">    sregex regxA = sregex::<span class="built_in">compile</span>(<span class="string">&quot;^(\d| )*&quot;</span>);    <span class="comment">// 匹配开头数字</span></span><br><span class="line">    sregex regxB = sregex::<span class="built_in">compile</span>(<span class="string">&quot;!*$&quot;</span>);         <span class="comment">// 匹配末尾标点符号</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="built_in">regex_replace</span>(my_stringB, regxA, <span class="string">&quot;2021&quot;</span>) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">regex_replace</span>(my_stringB, regxB, <span class="string">&quot;&quot;</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>正则迭代与分词</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;boost\algorithm\string.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;boost\xpressive\xpressive.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;boost\xpressive\regex_iterator.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> boost;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> boost::xpressive;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 正则迭代输出</span></span><br><span class="line">    std::string my_string_a = <span class="string">&quot;power-shell, power-studio,power-engine,super-user&quot;</span>;</span><br><span class="line"></span><br><span class="line">    sregex regxA = sregex::<span class="built_in">compile</span>(<span class="string">&quot;power-(\w&#123;5&#125;)&quot;</span>, icase);</span><br><span class="line"></span><br><span class="line">    <span class="function">sregex_iterator <span class="title">start_ptr</span><span class="params">(my_string_a.begin(), my_string_a.end(), regxA)</span></span>;</span><br><span class="line">    sregex_iterator end_ptr;</span><br><span class="line">    <span class="keyword">for</span> (; start_ptr != end_ptr; ++start_ptr)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;[ &quot;</span> &lt;&lt; (*start_ptr)[<span class="number">0</span>] &lt;&lt; <span class="string">&quot; ]&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 正则分词</span></span><br><span class="line">    <span class="type">char</span> my_string_b[] = <span class="string">&quot;*lyshark*||+administrator+||root!!||metaper&quot;</span>;</span><br><span class="line"></span><br><span class="line">    cregex regxB = cregex::<span class="built_in">compile</span>(<span class="string">&quot;\w+&quot;</span>, icase);   <span class="comment">// 过滤出所有的字母</span></span><br><span class="line">    <span class="function">cregex_token_iterator <span class="title">pos</span><span class="params">(my_string_b, my_string_b + strlen(my_string_b), regxB)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (; pos != <span class="built_in">cregex_token_iterator</span>(); ++pos)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;[ &quot;</span> &lt;&lt; *pos &lt;&lt; <span class="string">&quot; ]&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 正则切割</span></span><br><span class="line">    cregex split_regx = cregex::<span class="built_in">compile</span>(<span class="string">&quot;\|\|&quot;</span>);</span><br><span class="line">    pos = <span class="built_in">cregex_token_iterator</span>(my_string_b, my_string_b + <span class="built_in">strlen</span>(my_string_b), split_regx, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (; pos != <span class="built_in">cregex_token_iterator</span>(); ++pos)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;[ &quot;</span> &lt;&lt; *pos &lt;&lt; <span class="string">&quot; ]&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 正则格式化(小写转大写)</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">formater</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">string <span class="title">operator</span><span class="params">()</span><span class="params">(cmatch <span class="type">const</span> &amp;m)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> boost::<span class="built_in">to_upper_copy</span>(m[<span class="number">0</span>].<span class="built_in">str</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> my_string_c[] = <span class="string">&quot;*lyshark*||+administrator+||root!!||metaper&quot;</span>;</span><br><span class="line">    cregex regxC = cregex::<span class="built_in">compile</span>(<span class="string">&quot;\w+&quot;</span>, icase);</span><br><span class="line">    cout &lt;&lt; <span class="built_in">regex_replace</span>(my_string_c, regxC, formater()) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>分词器使用:</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;boost/tokenizer.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> boost;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    std::string strTag = <span class="string">&quot;explorer.exe,1024&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义分割符号为逗号与空格 定义分词器</span></span><br><span class="line">    <span class="function">boost::char_separator&lt;<span class="type">char</span>&gt; <span class="title">sep</span><span class="params">(<span class="string">&quot;, &quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">typedef</span> boost::tokenizer&lt;boost::char_separator&lt;<span class="type">char</span>&gt;&gt; CustonTokenizer;</span><br><span class="line">    <span class="function">CustonTokenizer <span class="title">tok</span><span class="params">(strTag, sep)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将分词结果放入vector链表</span></span><br><span class="line">    std::vector&lt;std::string&gt; vecSegTag;</span><br><span class="line">    <span class="keyword">for</span> (CustonTokenizer::iterator beg = tok.<span class="built_in">begin</span>(); beg != tok.<span class="built_in">end</span>(); ++beg)</span><br><span class="line">    &#123;</span><br><span class="line">        vecSegTag.<span class="built_in">push_back</span>(*beg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// const_case 将string转换为char 8</span></span><br><span class="line">    std::string ref_string = <span class="built_in">const_cast</span>&lt;<span class="type">char</span> *&gt;(vecSegTag[<span class="number">0</span>].<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt;<span class="string">&quot;进程名: &quot;</span> &lt;&lt; ref_string &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;分词数: &quot;</span> &lt;&lt; vecSegTag.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
        <category>c++</category>
        <category>boost</category>
      </categories>
  </entry>
  <entry>
    <title>单例模式</title>
    <url>/2024/07/22/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="单例模式-Singleton"><a href="#单例模式-Singleton" class="headerlink" title="单例模式(Singleton)"></a>单例模式(Singleton)</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a><strong>目录</strong></h2><ul>
<li><p><a href="#%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AE%9A%E4%B9%89">单例模式的定义</a></p>
</li>
<li><p><a href="#%E6%87%92%E6%B1%89%E5%92%8C%E9%A5%BF%E6%B1%89%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%8C%BA%E5%88%AB">懒汉和饿汉模式的区别</a></p>
</li>
</ul>
<h3 id="单例模式的定义"><a href="#单例模式的定义" class="headerlink" title="单例模式的定义"></a><strong>单例模式的定义</strong></h3><p>单例模式保证一个类仅有一个实例，并且提供一个访问它的全局访问点,</p>
<p>单例模式分为饿汉模式和懒汉模式，从字面来理解，饿汉模式为一开始就创建好对象的实例，懒汉模式为使用的时候再去创建对象的实例</p>
<span id="more"></span>  

<h3 id="懒汉和饿汉模式的区别"><a href="#懒汉和饿汉模式的区别" class="headerlink" title="懒汉和饿汉模式的区别"></a><strong>懒汉和饿汉模式的区别</strong></h3><p>NaN. 时间和空间</p>
<pre><code>懒汉式是典型的时间换空间，也就是每次获取实例都会进行判断，看是否需要创建实例，浪费判断的时间

饿汉式是典型的空间换时间。当类装载的时候就会创建类实例，不管你用不用，先创建出来，然后每次调用的时候就不需要再次判断了，节省了运行时间
</code></pre>
<p>NaN. 线程安全</p>
<pre><code>从线程安全性上讲，不同步加载的懒汉模式是线程不安全的。
</code></pre>
]]></content>
      <categories>
        <category>技术</category>
        <category>c++</category>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>原型模式</title>
    <url>/2024/07/22/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="原型模式-Prototype"><a href="#原型模式-Prototype" class="headerlink" title="原型模式(Prototype)"></a>原型模式(Prototype)</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a><strong>目录</strong></h2><ul>
<li><p><a href="#%E5%AE%9A%E4%B9%89">定义</a></p>
</li>
<li><p><a href="#%E7%BB%93%E6%9E%84%E5%92%8C%E8%AF%B4%E6%98%8E">结构和说明</a></p>
</li>
<li><p><a href="#%E6%B3%A8%E6%84%8F">注意</a></p>
</li>
</ul>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a><strong>定义</strong></h3><p>用原型示例指定创建对象的种类。并通过拷贝这些原型创建新的对象，即重新创建一个拷贝对象的副本，而无需去执行拷贝对象的构造函数</p>
<span id="more"></span>  
<h3 id="结构和说明"><a href="#结构和说明" class="headerlink" title="结构和说明"></a><strong>结构和说明</strong></h3><p><img src="https://isrootblog-1251140236.cos.ap-beijing.myqcloud.com/uPic/202309121953363.png" alt="image.png"></p>
<ul>
<li><p>Prototype : 声明一个克隆自身的接口，用来约束想要克隆自己的类，要求它们都要实现这里定义的克隆方法</p>
</li>
<li><p>ConcretePrototype: 实现 Prototype 接口的类，这些类真正实现了克隆自身的功能</p>
</li>
<li><p>Client : 使用原型的客户端，首先要获取到原型实例对象，然后通过原型实例克隆自身来创建新的对象实例</p>
</li>
</ul>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a><strong>注意</strong></h3><h4 id="原型实例和克隆的实例"><a href="#原型实例和克隆的实例" class="headerlink" title="原型实例和克隆的实例"></a>原型实例和克隆的实例</h4><p><strong>原型实例和克隆出来的实例，本质上是不同的实例，克隆完成后，他们之间是没有关联的，如果克隆出来的实例属性值发生了改变，是不会影响到原型实例的</strong></p>
<h4 id="深度克隆和浅度克隆"><a href="#深度克隆和浅度克隆" class="headerlink" title="深度克隆和浅度克隆"></a>深度克隆和浅度克隆</h4><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a><strong>代码实现</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using std::string;</span><br><span class="line">// 原型的类型</span><br><span class="line">enum Type &#123;</span><br><span class="line">  PROTOTYPE_1 = 0,</span><br><span class="line">  PROTOTYPE_2</span><br><span class="line">&#125;;</span><br><span class="line">​</span><br><span class="line">// 原型接口类</span><br><span class="line">class Prototype &#123;</span><br><span class="line"> protected:</span><br><span class="line">  string prototype_name_;</span><br><span class="line">  float prototype_field_;</span><br><span class="line">​</span><br><span class="line"> public:</span><br><span class="line">  Prototype() &#123;&#125;</span><br><span class="line">  Prototype(string prototype_name)</span><br><span class="line">      : prototype_name_(prototype_name) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  virtual ~Prototype() &#123;&#125;</span><br><span class="line">  virtual Prototype *Clone() const = 0;</span><br><span class="line">  virtual void Method(float prototype_field) &#123;</span><br><span class="line">    this-&gt;prototype_field_ = prototype_field;</span><br><span class="line">    std::cout &lt;&lt; &quot;Call Method from &quot; &lt;&lt; prototype_name_ &lt;&lt; &quot; with field : &quot; &lt;&lt; prototype_field &lt;&lt; std::endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">​</span><br><span class="line"># 具体的原型类</span><br><span class="line">class ConcretePrototype1 : public Prototype &#123;</span><br><span class="line"> private:</span><br><span class="line">  float concrete_prototype_field1_;</span><br><span class="line">​</span><br><span class="line"> public:</span><br><span class="line">  ConcretePrototype1(string prototype_name, float concrete_prototype_field)</span><br><span class="line">      : Prototype(prototype_name), concrete_prototype_field1_(concrete_prototype_field) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  # 实现自我复制  这里使用的浅拷贝</span><br><span class="line">  Prototype *Clone() const override &#123;</span><br><span class="line">    return new ConcretePrototype1(*this);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">​</span><br><span class="line">class ConcretePrototype2 : public Prototype &#123;</span><br><span class="line"> private:</span><br><span class="line">  float concrete_prototype_field2_;</span><br><span class="line">​</span><br><span class="line"> public:</span><br><span class="line">  ConcretePrototype2(string prototype_name, float concrete_prototype_field)</span><br><span class="line">      : Prototype(prototype_name), concrete_prototype_field2_(concrete_prototype_field) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  Prototype *Clone() const override &#123;</span><br><span class="line">    return new ConcretePrototype2(*this);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">​</span><br><span class="line">​</span><br><span class="line">class PrototypeFactory &#123;</span><br><span class="line"> private:</span><br><span class="line">  std::unordered_map&lt;Type, Prototype *, std::hash&lt;int&gt;&gt; prototypes_;</span><br><span class="line">​</span><br><span class="line"> public:</span><br><span class="line">  PrototypeFactory() &#123;</span><br><span class="line">    prototypes_[Type::PROTOTYPE_1] = new ConcretePrototype1(&quot;PROTOTYPE_1 &quot;, 50.f);</span><br><span class="line">    prototypes_[Type::PROTOTYPE_2] = new ConcretePrototype2(&quot;PROTOTYPE_2 &quot;, 60.f);</span><br><span class="line">  &#125;</span><br><span class="line">​</span><br><span class="line">  ~PrototypeFactory() &#123;</span><br><span class="line">    delete prototypes_[Type::PROTOTYPE_1];</span><br><span class="line">    delete prototypes_[Type::PROTOTYPE_2];</span><br><span class="line">  &#125;</span><br><span class="line">​</span><br><span class="line">  Prototype *CreatePrototype(Type type) &#123;</span><br><span class="line">    return prototypes_[type]-&gt;Clone();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">​</span><br><span class="line">void Client(PrototypeFactory &amp;prototype_factory) &#123;</span><br><span class="line">  std::cout &lt;&lt; &quot;Let&#x27;s create a Prototype 1\n&quot;;</span><br><span class="line">  # 这里通过原型创建复制的w类</span><br><span class="line">  Prototype *prototype = prototype_factory.CreatePrototype(Type::PROTOTYPE_1);</span><br><span class="line">  prototype-&gt;Method(90);</span><br><span class="line">  delete prototype;</span><br><span class="line">​</span><br><span class="line">  std::cout &lt;&lt; &quot;\n&quot;;</span><br><span class="line">​</span><br><span class="line">  std::cout &lt;&lt; &quot;Let&#x27;s create a Prototype 2 \n&quot;;</span><br><span class="line">​</span><br><span class="line">  prototype = prototype_factory.CreatePrototype(Type::PROTOTYPE_2);</span><br><span class="line">  prototype-&gt;Method(10);</span><br><span class="line">​</span><br><span class="line">  delete prototype;</span><br><span class="line">&#125;</span><br><span class="line">​</span><br><span class="line">int main() &#123;</span><br><span class="line">  PrototypeFactory *prototype_factory = new PrototypeFactory();</span><br><span class="line">  Client(*prototype_factory);</span><br><span class="line">  delete prototype_factory;</span><br><span class="line">​</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
        <category>c++</category>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>外观模式</title>
    <url>/2024/07/22/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="外观模式-Facade"><a href="#外观模式-Facade" class="headerlink" title="外观模式(Facade)"></a>外观模式(Facade)</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a><strong>目录</strong></h2><ul>
<li><p><a href="#%E8%A7%A3%E6%9E%84%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F">解构外观模式</a></p>
</li>
<li><p><a href="#%E5%A4%96%E8%A7%82%E7%B1%BB%E7%9A%84%E5%AE%9E%E7%8E%B0">外观类的实现</a></p>
</li>
<li><p><a href="#%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F%E4%BC%98%E7%BC%BA%E7%82%B9">外观模式优缺点</a></p>
</li>
<li><p><a href="#%E4%BD%95%E6%97%B6%E9%80%89%E7%94%A8%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F">何时选用外观模式</a></p>
</li>
<li><p><a href="#%E7%9B%B8%E5%85%B3%E6%A8%A1%E5%BC%8F">相关模式</a></p>
</li>
<li><p><a href="#%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0">具体实现</a></p>
</li>
</ul>
<p><strong>外观模式本质是封装交互。简化调用</strong></p>
<p>在设计模式中界面指从一个组件外部来看这个组件，public部分的内容就是这个组件的界面，即所谓的外观</p>
<p>外观模式通过引入一个外观类，在这个类里面定义客户端想要的简单方法，然后在这些方法的 实现里面，由外观类再去分别调用内部的多个模块来实现功能，从而让客户端变得简单。这样一来，客户端只需要和外观类交互就可以了。</p>
<span id="more"></span>  
<ul>
<li><p>外观模式结构图</p>
<p>  <img src="https://isrootblog-1251140236.cos.ap-beijing.myqcloud.com/uPic/image_Uo8GqZbLg-.png"></p>
</li>
<li><p>外观模式整体示意结构图</p>
<p>  <img src="https://isrootblog-1251140236.cos.ap-beijing.myqcloud.com/uPic/image_npQKyuBeJ6.png"></p>
</li>
<li><p>外观模式调用顺序示意图</p>
<p>  <img src="https://isrootblog-1251140236.cos.ap-beijing.myqcloud.com/uPic/image_XZDXBKU8kk.png"></p>
</li>
</ul>
<h4 id="解构外观模式"><a href="#解构外观模式" class="headerlink" title="解构外观模式"></a>解构外观模式</h4><p>外观模式不是为了给子系统增加新的功能接口，而是为了让外部减少与子系统内多个模块交互。松散耦合。从而让外部能够更加简单的使用子系统，外观是当作子系统对外接口出现的。外观类中应该包装已经有的功能，它主要负责组合已有的功能来实现客户端的需要，不要去添加新的功能。</p>
<p>**<em>外观模式的本质</em>**：封装交互，简化调用</p>
<h4 id="外观类的实现"><a href="#外观类的实现" class="headerlink" title="外观类的实现"></a>外观类的实现</h4><p>对于一个子系统来说，外观类不需要很多，通常可以实现成为一个单例，也可以直接把外观中的方法实现成为静态的方法。</p>
<h4 id="外观模式优缺点"><a href="#外观模式优缺点" class="headerlink" title="外观模式优缺点"></a>外观模式优缺点</h4><ul>
<li><p>松散耦合</p>
<p>  外观模式松散了客户端与子系统的耦合关系，让子系统内部的模块能够更容易扩展和维护</p>
</li>
<li><p>简单易用</p>
<p>  外观模式让子系统更加易用，客户端不再需要了解子系统内部的实现，也不需要跟众多子系统内部的模块进行交互，只需要跟外观交互就可以了</p>
</li>
<li><p>更好的划分访问层次</p>
<p>  通过合理的使用Facade，可以帮助我们更好的划分访问的层次</p>
</li>
</ul>
<p>外观模式有如下缺点</p>
<p>过多的或者不太合理的Facade容易让人迷惑。</p>
<h4 id="何时选用外观模式"><a href="#何时选用外观模式" class="headerlink" title="何时选用外观模式"></a>何时选用外观模式</h4><ul>
<li><p>为复杂的子程序提供简单的访问接口。</p>
</li>
<li><p>让客户程序和抽象类的实现部分松散耦合</p>
</li>
<li><p>构建多层结构的系统</p>
</li>
</ul>
<h4 id="相关模式"><a href="#相关模式" class="headerlink" title="相关模式"></a>相关模式</h4><ul>
<li><p><strong>外观和中介模式</strong></p>
<p>  中介模式主要用来封装多个对象之间的相互交互。多用在系统内部的多个模块之间，外观模式封装的是单向交互，是从客户端到访问系统的调用</p>
<p>  在中介模式的实现里面，是需要实现具体的交互功能的；而外观模式的实现里面，一般是组合调用或者转调内部实现的功能。</p>
<p>  中介模式的目的主要是松散多个模块之间的耦合，把这些耦合关系全部放到中介者中去实现，而外观模式是简化客户端的调用。</p>
</li>
</ul>
<h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a><strong>具体实现</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * The Subsystem can accept requests either from the facade or client directly.</span><br><span class="line"> * In any case, to the Subsystem, the Facade is yet another client, and it&#x27;s not</span><br><span class="line"> * a part of the Subsystem.</span><br><span class="line"> */</span><br><span class="line">class Subsystem1 &#123;</span><br><span class="line"> public:</span><br><span class="line">  std::string Operation1() const &#123;</span><br><span class="line">    return &quot;Subsystem1: Ready!\n&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">  // ...</span><br><span class="line">  std::string OperationN() const &#123;</span><br><span class="line">    return &quot;Subsystem1: Go!\n&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">/**</span><br><span class="line"> * Some facades can work with multiple subsystems at the same time.</span><br><span class="line"> */</span><br><span class="line">class Subsystem2 &#123;</span><br><span class="line"> public:</span><br><span class="line">  std::string Operation1() const &#123;</span><br><span class="line">    return &quot;Subsystem2: Get ready!\n&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">  // ...</span><br><span class="line">  std::string OperationZ() const &#123;</span><br><span class="line">    return &quot;Subsystem2: Fire!\n&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">​</span><br><span class="line">/**</span><br><span class="line"> * The Facade class provides a simple interface to the complex logic of one or</span><br><span class="line"> * several subsystems. The Facade delegates the client requests to the</span><br><span class="line"> * appropriate objects within the subsystem. The Facade is also responsible for</span><br><span class="line"> * managing their lifecycle. All of this shields the client from the undesired</span><br><span class="line"> * complexity of the subsystem.</span><br><span class="line"> */</span><br><span class="line">class Facade &#123;</span><br><span class="line"> protected:</span><br><span class="line">  Subsystem1 *subsystem1_;</span><br><span class="line">  Subsystem2 *subsystem2_;</span><br><span class="line">  /**</span><br><span class="line">   * Depending on your application&#x27;s needs, you can provide the Facade with</span><br><span class="line">   * existing subsystem objects or force the Facade to create them on its own.</span><br><span class="line">   */</span><br><span class="line"> public:</span><br><span class="line">  /**</span><br><span class="line">   * In this case we will delegate the memory ownership to Facade Class</span><br><span class="line">   */</span><br><span class="line">  Facade(</span><br><span class="line">      Subsystem1 *subsystem1 = nullptr,</span><br><span class="line">      Subsystem2 *subsystem2 = nullptr) &#123;</span><br><span class="line">    this-&gt;subsystem1_ = subsystem1 ?: new Subsystem1;</span><br><span class="line">    this-&gt;subsystem2_ = subsystem2 ?: new Subsystem2;</span><br><span class="line">  &#125;</span><br><span class="line">  ~Facade() &#123;</span><br><span class="line">    delete subsystem1_;</span><br><span class="line">    delete subsystem2_;</span><br><span class="line">  &#125;</span><br><span class="line">  /**</span><br><span class="line">   * The Facade&#x27;s methods are convenient shortcuts to the sophisticated</span><br><span class="line">   * functionality of the subsystems. However, clients get only to a fraction of</span><br><span class="line">   * a subsystem&#x27;s capabilities.</span><br><span class="line">   */</span><br><span class="line">  std::string Operation() &#123;</span><br><span class="line">    std::string result = &quot;Facade initializes subsystems:\n&quot;;</span><br><span class="line">    result += this-&gt;subsystem1_-&gt;Operation1();</span><br><span class="line">    result += this-&gt;subsystem2_-&gt;Operation1();</span><br><span class="line">    result += &quot;Facade orders subsystems to perform the action:\n&quot;;</span><br><span class="line">    result += this-&gt;subsystem1_-&gt;OperationN();</span><br><span class="line">    result += this-&gt;subsystem2_-&gt;OperationZ();</span><br><span class="line">    return result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">​</span><br><span class="line">/**</span><br><span class="line"> * The client code works with complex subsystems through a simple interface</span><br><span class="line"> * provided by the Facade. When a facade manages the lifecycle of the subsystem,</span><br><span class="line"> * the client might not even know about the existence of the subsystem. This</span><br><span class="line"> * approach lets you keep the complexity under control.</span><br><span class="line"> */</span><br><span class="line">void ClientCode(Facade *facade) &#123;</span><br><span class="line">  // ...</span><br><span class="line">  std::cout &lt;&lt; facade-&gt;Operation();</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * The client code may have some of the subsystem&#x27;s objects already created. In</span><br><span class="line"> * this case, it might be worthwhile to initialize the Facade with these objects</span><br><span class="line"> * instead of letting the Facade create new instances.</span><br><span class="line"> */</span><br><span class="line">​</span><br><span class="line">int main() &#123;</span><br><span class="line">  Subsystem1 *subsystem1 = new Subsystem1;</span><br><span class="line">  Subsystem2 *subsystem2 = new Subsystem2;</span><br><span class="line">  Facade *facade = new Facade(subsystem1, subsystem2);</span><br><span class="line">  ClientCode(facade);</span><br><span class="line">​</span><br><span class="line">  delete facade;</span><br><span class="line">​</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
        <category>c++</category>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>工厂方法</title>
    <url>/2024/07/22/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="工厂方法-Factory"><a href="#工厂方法-Factory" class="headerlink" title="工厂方法(Factory)"></a>工厂方法(Factory)</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a><strong>目录</strong></h2><ul>
<li><p><a href="#%E5%AE%9A%E4%B9%89">定义</a></p>
</li>
<li><p><a href="#%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%E9%A1%BA%E5%BA%8F">工厂方法调用顺序</a></p>
</li>
<li><p><a href="#%E8%A7%A3%E6%9E%84%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F">解构工厂方法模式</a></p>
</li>
<li><p><a href="#%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E7%BB%93%E6%9E%84%E5%9B%BE">工厂方法结构图</a></p>
</li>
<li><p><a href="#%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E7%9A%84%E5%AE%9E%E7%8E%B0">工厂方法的实现</a></p>
</li>
<li><p><a href="#%E8%B0%81%E6%9D%A5%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1">谁来使用工厂方法创建对象</a></p>
</li>
<li><p><a href="#%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9">工厂方法模式的优缺点</a></p>
</li>
<li><p><a href="#%E4%BD%95%E6%97%B6%E9%80%89%E7%94%A8%E5%B7%A5%E7%A8%8B%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F">何时选用工程方法模式</a></p>
</li>
<li><p><a href="#code">code</a></p>
</li>
</ul>
<span id="more"></span>  

<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a><strong>定义</strong></h3><p>定义一个用于创建对象的接口，让子类决定实例化哪一个类，Factiry Methos 使一个类的实例化延迟到其子类</p>
<h3 id="工厂方法调用顺序"><a href="#工厂方法调用顺序" class="headerlink" title="工厂方法调用顺序"></a><strong>工厂方法调用顺序</strong></h3><p><img src="https://isrootblog-1251140236.cos.ap-beijing.myqcloud.com/uPic/image_os9Z3Pj932.png"></p>
<h3 id="解构工厂方法模式"><a href="#解构工厂方法模式" class="headerlink" title="解构工厂方法模式"></a><strong>解构工厂方法模式</strong></h3><p>工厂方法模式的本质是延迟到子类来选择实现。工厂方法模式很好的提现了”依赖倒置原则”，依赖倒置原则告诉我们，<strong>要依赖抽象，不要依赖于具体的类</strong>，简单点说就是不能让高层组件依赖于底层组件，而且不管高层组件还是底层组件，都应该依赖于抽象。</p>
<h3 id="工厂方法结构图"><a href="#工厂方法结构图" class="headerlink" title="工厂方法结构图"></a><strong>工厂方法结构图</strong></h3><p><img src="https://isrootblog-1251140236.cos.ap-beijing.myqcloud.com/uPic/image_iOs06-LoSA.png"></p>
<h3 id="工厂方法的实现"><a href="#工厂方法的实现" class="headerlink" title="工厂方法的实现"></a><strong>工厂方法的实现</strong></h3><p>在工厂方法模式里面，客户端要么使用Creator对象，要么使用Creator创建的对象，一般客户端不直接使用工厂方法。</p>
<ul>
<li><p>让所有产品都遵循同一接口，该接口必须声明对所有产品有意义的方法</p>
</li>
<li><p>在创建类中添加一个空的工厂方法，该方法的返回类型必须遵循通用的产品接口</p>
</li>
<li><p>在创建者代码中找到对于产品构造函数的所有引用，将他们依次替换为对于工厂方法的调用，同时将创建产品的代码移入到工厂方法。</p>
</li>
<li><p>为工厂中的每种产品编写一个创建者子类，然后再子类中重写工厂方法，并将基本方法中的相关创建代码移动到工厂方法中。</p>
</li>
<li><p>如果应用中产品类型太多，那么为每个产品创建子类并无太大的必要，这时你也可以在子类中复用基类中的控制参数</p>
<p>  例如， 设想你有以下一些层次结构的类。 基类 <code>邮件</code>及其子类 <code>航空邮件</code>和 <code>陆路邮件</code> ； ​ <code>运输</code>及其子类 <code>飞机</code>, <code>卡车</code>和 <code>火车</code> 。 ​ <code>航空邮件</code>仅使用 <code>飞机</code>对象， 而 <code>陆路邮件</code>则会同时使用 <code>卡车</code>和 <code>火车</code>对象。 你可以编写一个新的子类 （例如 <code>火车邮件</code> ） 来处理这两种情况， 但是还有其他可选的方案。 客户端代码可以给 <code>陆路邮件</code>类传递一个参数， 用于控制其希望获得的产品。</p>
</li>
<li><p>如果代码经过上述移动后，基础工厂中已经没有任何代码，你可以将其转变为抽象类。</p>
</li>
</ul>
<h3 id="谁来使用工厂方法创建对象"><a href="#谁来使用工厂方法创建对象" class="headerlink" title="谁来使用工厂方法创建对象"></a><strong>谁来使用工厂方法创建对象</strong></h3><p>在工厂方法模式里面，应该是Creator中的其他方法在使用工厂方法创建的对象，虽然也可以把工厂方法创建的对象直接提供给Creator外部使用，但工厂方法模式的本意是有Creator对象内部的方法来使用工厂方法创建的对象，也就是说，工厂方法一般不提供给Creator外部使用</p>
<p>客户端应该使用Creator对象，或者使用由Creator创建出来的对象，对于客户端使用Creator对象，这个时候工厂方法创建的对象，是由Creator中的某些方法使用，对于使用那些由Creator创建出来的对象，这个时候工厂方法创建的对象，是构成客户端需要的对象一部分。</p>
<h3 id="工厂方法模式的优缺点"><a href="#工厂方法模式的优缺点" class="headerlink" title="工厂方法模式的优缺点"></a><strong>工厂方法模式的优缺点</strong></h3><ul>
<li><p>可以在不知具体实现的情况下编程</p>
<p>  工厂方法模式可以让你在实现功能的时候，如果需要某个产品对象，只需要使用产品接口即可。而无需关心具体的实现，具体实现的任务延迟到子类去完成。</p>
</li>
<li><p>方便新的功能接口扩展</p>
</li>
</ul>
<h3 id="何时选用工程方法模式"><a href="#何时选用工程方法模式" class="headerlink" title="何时选用工程方法模式"></a><strong>何时选用工程方法模式</strong></h3><p>如果一类需要创建某个接口的对象，但是又不知道具体的实现，这种情况可以选用工厂方法模式，把创建对象的工作延迟到子类中去实现</p>
<p>如果一个类本身就希望由它的子类来创建所需的对象时候，应该使用工厂方法模式</p>
<h3 id="code"><a href="#code" class="headerlink" title="code"></a><strong>code</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * The Product interface declares the operations that all concrete products must</span><br><span class="line"> * implement. product 接口声明了所有具体产品必须实现的接口</span><br><span class="line"> */</span><br><span class="line"> class Product&#123;</span><br><span class="line">   public:</span><br><span class="line">   // 可以定义product的属性和方法</span><br><span class="line">    virtual ~Product()&#123;&#125;;</span><br><span class="line">    virtual std::string Operator() const = 0;</span><br><span class="line"> &#125;</span><br><span class="line">/**</span><br><span class="line"> * Concrete Products provide various implementations of the Product interface.</span><br><span class="line"> 具体的产品提供了多样实现产品的接口</span><br><span class="line"> */ </span><br><span class="line"> class ConcreteProduct1:public Product&#123;</span><br><span class="line">   // 具体的procduct</span><br><span class="line">   public:</span><br><span class="line">    std::string Operation() const override&#123;</span><br><span class="line">      return &quot;&#123;Result of the ConcreteProduct1&#125;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> class ConcreteProduct2:public Product&#123;</span><br><span class="line">   public:</span><br><span class="line">    std::string Operation() const override&#123;</span><br><span class="line">      return &quot;&#123;Result of the ConcreteProduct2&#125;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> /**</span><br><span class="line"> * The Creator class declares the factory method that is supposed to return an</span><br><span class="line"> * object of a Product class. The Creator&#x27;s subclasses usually provide the</span><br><span class="line"> * implementation of this method.</span><br><span class="line"> */</span><br><span class="line"> class Creator&#123;</span><br><span class="line">   /**</span><br><span class="line">   * Note that the Creator may also provide some default implementation of the</span><br><span class="line">   * factory method.</span><br><span class="line">   */</span><br><span class="line">   // 创建器，声明工厂方法</span><br><span class="line">   public:</span><br><span class="line">     virtual ~Creator()&#123;&#125;;</span><br><span class="line">     // 创建创建生产者的接口</span><br><span class="line">     virtual Product* productFactor() const = 0;</span><br><span class="line">   /**</span><br><span class="line">   * Also note that, despite its name, the Creator&#x27;s primary responsibility is</span><br><span class="line">   * not creating products. Usually, it contains some core business logic that</span><br><span class="line">   * relies on Product objects, returned by the factory method. Subclasses can</span><br><span class="line">   * indirectly change that business logic by overriding the factory method and</span><br><span class="line">   * returning a different type of product from it.</span><br><span class="line">   */</span><br><span class="line">   // 示意方法，实现某些具体的功能</span><br><span class="line">   std::string SomeOperation() const &#123;</span><br><span class="line">      Product* product = this-&gt;productFactor();</span><br><span class="line">      std::string result = &quot;Creator: The same creator&#x27;s code has just worked with &quot; + product-&gt;Operation();</span><br><span class="line">   &#125;</span><br><span class="line">      delete product;</span><br><span class="line">      return result;</span><br><span class="line">     </span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> // 具体的创建器的实现</span><br><span class="line"> class concreteCreator1:public Creator&#123;</span><br><span class="line">   public:</span><br><span class="line">     Product* productFactory() &#123;</span><br><span class="line">       return new ConcreteProduct1()</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> class concreteCreator2:public Creator&#123;</span><br><span class="line">   public:</span><br><span class="line">    Product* productFactory()&#123;</span><br><span class="line">      return new ConcreteProduct2()</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> void ClientCode(const Creator&amp; creator) &#123;</span><br><span class="line">  // ...</span><br><span class="line">  std::cout &lt;&lt; &quot;Client: I&#x27;m not aware of the creator&#x27;s class, but it still works.\n&quot;</span><br><span class="line">            &lt;&lt; creator.SomeOperation() &lt;&lt; std::endl;</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> int main()&#123;</span><br><span class="line">   std::cout &lt;&lt; &quot;App: Launched with the ConcreteCreator1.\n&quot;;</span><br><span class="line">   Creator* creator1 = new ConcreteCreator1()</span><br><span class="line">   clientCode(creator1)</span><br><span class="line">   std::cout &lt;&lt; std::endl;</span><br><span class="line">   std::cout &lt;&lt; &quot;App: Launched with the ConcreteCreator2.\n&quot;;</span><br><span class="line">   Creator* creator2 = new ConcreteCreator2();</span><br><span class="line">   ClientCode(*creator2);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
        <category>c++</category>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>抽象工厂</title>
    <url>/2024/07/22/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82/</url>
    <content><![CDATA[<h1 id="抽象工厂方法-Abstract-Factory"><a href="#抽象工厂方法-Abstract-Factory" class="headerlink" title="抽象工厂方法(Abstract Factory)"></a>抽象工厂方法(Abstract Factory)</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a><strong>目录</strong></h2><ul>
<li><p><a href="#%E5%AE%9A%E4%B9%89">定义</a></p>
</li>
<li><p><a href="#%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%E9%A1%BA%E5%BA%8F">抽象工厂方法调用顺序</a></p>
</li>
<li><p><a href="#%E8%A7%A3%E6%9E%84%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F">解构抽象工厂方法模式</a></p>
</li>
<li><p><a href="#%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E7%BB%93%E6%9E%84%E5%9B%BE">工厂方法结构图</a></p>
</li>
<li><p><a href="#%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E7%9A%84%E5%AE%9E%E7%8E%B0">抽象工厂方法的实现</a></p>
</li>
<li><p><a href="#%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9">工厂方法模式的优缺点</a></p>
</li>
<li><p><a href="#%E4%BD%95%E6%97%B6%E9%80%89%E7%94%A8%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F">何时选用抽象工厂方法模式</a></p>
</li>
</ul>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a><strong>定义</strong></h3><p>提供一个创建一系列相关或相互依赖对象的接口，而无需指定他们具体的类</p>
<p>本质</p>
<p>抽象工厂的本质：选择产品簇的实现</p>
<span id="more"></span>  
<h3 id="抽象工厂方法调用顺序"><a href="#抽象工厂方法调用顺序" class="headerlink" title="抽象工厂方法调用顺序"></a><strong>抽象工厂方法调用顺序</strong></h3><p><img src="https://isrootblog-1251140236.cos.ap-beijing.myqcloud.com/uPic/image_b424Se6z9T.png"></p>
<h3 id="解构抽象工厂方法模式"><a href="#解构抽象工厂方法模式" class="headerlink" title="解构抽象工厂方法模式"></a><strong>解构抽象工厂方法模式</strong></h3><p>工厂方法模式的本质定义一系列产品族的接口，工厂方法选择单个产品的实现，虽然一个类里面可以有多个工厂方法，但是这些方法之间一般是没有联系的。</p>
<p>但是抽象工厂着重的就是为一个产品族选择实现，定义在抽象工厂里面的方法通常是有联系的。</p>
<h3 id="工厂方法结构图"><a href="#工厂方法结构图" class="headerlink" title="工厂方法结构图"></a><strong>工厂方法结构图</strong></h3><p><img src="https://isrootblog-1251140236.cos.ap-beijing.myqcloud.com/uPic/image_6OBXO_9wVH.png"></p>
<ul>
<li><p>Abstract Factory: 抽象工厂，定义创建一系列产品对象的操作接口</p>
</li>
<li><p>Concrete Factory: 具体的工厂，实现抽象工厂定义的方法，具体实现一系列产品对象的创建</p>
</li>
<li><p>Abstract Product：定义一类产品对象的接口</p>
</li>
<li><p>Concrete Product: 具体的产品实现对象，通常在具体工厂里面，会选择具体的产品实现对象，来创建符合抽象工厂定义的方法返回的产品类型的对象</p>
</li>
<li><p>Client: 客户端，主要使用抽象工厂来获取一系列所需要的产品对象。</p>
</li>
</ul>
<h3 id="抽象工厂方法的实现"><a href="#抽象工厂方法的实现" class="headerlink" title="抽象工厂方法的实现"></a><strong>抽象工厂方法的实现</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 抽象工厂的接口，声明创建抽象产品的操作</span><br><span class="line">class AbstractFactory&#123;</span><br><span class="line">  public:</span><br><span class="line">    virtual ~AbstractFactory();</span><br><span class="line">    virtual AbstractProductA* createProductA()const =0;</span><br><span class="line">   </span><br><span class="line">    virtual AbstractProductB* createProductB()const=0;</span><br><span class="line">&#125;</span><br><span class="line">​</span><br><span class="line">class AbstractProductA:&#123;</span><br><span class="line">  // 定义A类产品抽象操作</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">​</span><br><span class="line">class AbstractProductB:&#123;</span><br><span class="line">  // 定义B类产品的抽象操作</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">​</span><br><span class="line">// 产品A的具体实现</span><br><span class="line">class ProductA1:public AbstractProductA&#123;</span><br><span class="line">  // 实现A 产品中定义的接口</span><br><span class="line">&#125;</span><br><span class="line">​</span><br><span class="line">class ProductA2:public AbstractProductA&#123;</span><br><span class="line">  // 实现A 产品中定义的接口</span><br><span class="line">&#125;</span><br><span class="line">​</span><br><span class="line">class ProductB1:public AbstractProductB&#123;</span><br><span class="line">  // 实现b 产品中定义的接口</span><br><span class="line">&#125;</span><br><span class="line">​</span><br><span class="line">class ProductB2:public AbstractProductB&#123;</span><br><span class="line">  // 实现b 产品中定义的接口</span><br><span class="line">&#125;</span><br><span class="line">​</span><br><span class="line">class ConcreteFactory1 : public AbstractFactory&#123;</span><br><span class="line">  public:</span><br><span class="line">    AbstractProductA* createProductA()&#123;</span><br><span class="line">      return new ProductA1()</span><br><span class="line">    &#125;</span><br><span class="line">    AbstractProductB* createProductB()&#123;</span><br><span class="line">      return new ProductB1()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">​</span><br><span class="line">class ConcreteFactory2 : public AbstractFactory&#123;</span><br><span class="line">  public:</span><br><span class="line">    AbstractProductA* createProductA()&#123;</span><br><span class="line">      return new ProductA2()</span><br><span class="line">    &#125;</span><br><span class="line">    AbstractProductB* createProductB()&#123;</span><br><span class="line">      return new ProductB2()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">​</span><br><span class="line">​</span><br><span class="line">int main()&#123;</span><br><span class="line">  // 创建抽象工厂对象</span><br><span class="line">  AbstractFactory* af = new ConcreFactory1();</span><br><span class="line">  </span><br><span class="line">  // 通过抽象工厂来获取一系列的对象，例如产品A和B</span><br><span class="line">  af-&gt;createProductA()</span><br><span class="line">  af-&gt;createProductB()</span><br><span class="line">&#125;</span><br><span class="line">​</span><br></pre></td></tr></table></figure>

<h3 id="工厂方法模式的优缺点"><a href="#工厂方法模式的优缺点" class="headerlink" title="工厂方法模式的优缺点"></a><strong>工厂方法模式的优缺点</strong></h3><ul>
<li><p>优点</p>
<ul>
<li><p>分离接口和实现</p>
<p>  客户端使用抽象工厂来创建需要的对象，而客户端根本就不知道具体的实现是谁，客户端只是面向产品的接口编程而已，也就是说，客户端从具体的产品实现中解耦</p>
</li>
<li><p>使得切换产品族变得容易</p>
<p>  因为一个具体的工厂实现代表的是一个产品族。客户端选用不同的工厂实现，就相当于是在切换不同的产品族</p>
</li>
</ul>
</li>
<li><p>缺点</p>
<ul>
<li><p>不太容易扩展新的产品</p>
<p>  如果需要给整个产品簇添加一个新的产品，那么就需要修改抽象工厂，这样就会导致修改所有的工厂实现类，</p>
</li>
<li><p>在使用抽象工厂模式的时候，如果需要选择的层次过多，那么会造成整个类层次变得复杂。</p>
</li>
</ul>
</li>
</ul>
<h3 id="何时选用抽象工厂方法模式"><a href="#何时选用抽象工厂方法模式" class="headerlink" title="何时选用抽象工厂方法模式"></a><strong>何时选用抽象工厂方法模式</strong></h3><p>如果希望一个系统独立于它的产品的创建，组合和表示的时候，换句话说，希望一个系统只是知道产品的接口，而不关心实现的时候</p>
<p>如果一个系统要由多个产品系列中的一个来配置的时候，换句话说，就是可以动态的切换产品族的时候</p>
<p>如果要强调一系列相关产品的接口，以便联合使用他们的时候</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>c++</category>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>适配器模式</title>
    <url>/2024/07/22/%E6%A0%91%E8%8E%93%E6%B4%BE%E6%91%84%E5%83%8F%E5%A4%B4/</url>
    <content><![CDATA[<h1 id="树莓派官方摄像头模块-V3-的配置及-libcamera-的使用教程"><a href="#树莓派官方摄像头模块-V3-的配置及-libcamera-的使用教程" class="headerlink" title="树莓派官方摄像头模块 V3 的配置及 libcamera 的使用教程"></a>树莓派官方摄像头模块 V3 的配置及 libcamera 的使用教程</h1><p>树莓派官方<a href="https://shumeipai.nxez.com/2023/01/18/raspberry-pi-camera-modules-v3-released.html">摄像头模块 Camera Module 3</a> 发布之后，有些朋友使用 libcamera 软件库来拍摄会发现报错：</p>
<span id="more"></span>  

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[0:11:48.500378214] [2153]  INFO Camera camera_manager.cpp:299 libcamera v0.0.4+22-923f5d70</span><br><span class="line">ERROR: *** no cameras available ***</span><br></pre></td></tr></table></figure>

<p>假设你已经在断电状态下正确连接好了摄像头和树莓派主板的 CSI 接口。下面我们介绍在树莓派官方系统 Raspberry Pi OS 下使用 V3 版摄像头（IMX708 传感器）的正确方法。</p>
<p>给树莓派上电进入系统，首先依然需要运行 sudo raspi-config 命令进入系统配置工具，选择 Interfacing Options – Legacy Camera 菜单禁用 Legacy 摄像头。</p>
<p>然后运行下面的命令修改配置文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nano /boot/config.txt</span><br></pre></td></tr></table></figure>

<p>找到下面几行配置，修改后面的数值如下。如果某行没有找到，可在文件末尾添加一行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">camera_auto_detect=0</span><br><span class="line">gpu_mem=128</span><br></pre></td></tr></table></figure>

<p>在最后面再加一行，手动配置摄像头传感器型号：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dtoverlay=imx708</span><br></pre></td></tr></table></figure>

<p>CTRL+X 后键入 Y 回车保存。</p>
<p>运行下面的命令修改 &#x2F;etc&#x2F;modules 内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/modules</span><br></pre></td></tr></table></figure>

<p>在文件末尾添加一行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bcm2835-v4l2</span><br></pre></td></tr></table></figure>

<p>同样 CTRL+X 后键入 Y 回车保存。</p>
<p>运行命令 sudo reboot 重启树莓派。</p>
<p>然后就可以使用 libcamera 工具中的命令来拍摄了。</p>
<p>libcamera-hello 命令相当于相机的 “hello world” 应用程序。它启动相机，显示预览窗口，而不执行任何其他操作。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">libcamera-hello</span><br></pre></td></tr></table></figure>

<p>应显示预览窗口约 5 秒钟。-t 选项允许用户选择窗口的显示时间长度，其中 以毫秒为单位。若要无限期运行预览，请使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">libcamera-hello -t 0</span><br></pre></td></tr></table></figure>

<p>可以通过单击窗口的关闭按钮或在终端中使用 Ctrl-C 来停止预览。</p>
<h4 id="libcamera-jpeg"><a href="#libcamera-jpeg" class="headerlink" title="libcamera-jpeg"></a>libcamera-jpeg</h4><p>libcamera-jpeg 命令是一个简单的静止图像捕获应用程序。它故意避免了 libcamera-still 的一些附加功能，它试图更充分地模仿 raspistill。因此，代码明显更容易理解，并且在实践中仍然提供许多相同的功能。</p>
<p>要捕获全分辨率 JPEG 图像，请使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">libcamera-jpeg -o test.jpg</span><br></pre></td></tr></table></figure>

<p>这将显示大约 5 秒的预览，然后捕获全分辨率 JPEG 图像到文件 test.jpg。</p>
<p>-t 选项 可用于更改预览显示的时间长度，而 –width 和 –height 选项将更改捕获的静止图像的分辨率。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">libcamera-jpeg -o test.jpg -t 2000 --width 640 --height 480</span><br></pre></td></tr></table></figure>

<p>将捕获 VGA 大小的图像。</p>
<h4 id="libcamera-still"><a href="#libcamera-still" class="headerlink" title="libcamera-still"></a>libcamera-still</h4><p>libcamera-still 与 libcamera-jpeg 非常相似，但支持更多的 raspistill 选项。和以前一样，可以使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">libcamera-still -o test.jpg</span><br></pre></td></tr></table></figure>

<p><strong>编码</strong> libcamera-still 允许以多种不同的格式保存文件。它支持 png 和 bmp 编码。它还允许将文件另存为 RGB 或 YUV 像素的二进制转储，完全没有编码或文件格式。在后一种情况下，读取文件的应用程序必须自行了解像素排列。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">libcamera-still -e png -o test.png</span><br><span class="line">libcamera-still -e bmp -o test.bmp</span><br><span class="line">libcamera-still -e rgb -o test.data</span><br><span class="line">libcamera-still -e yuv420 -o test.data</span><br></pre></td></tr></table></figure>

<p>请注意，保存图像的格式取决于 -e（等效的 –encoding）选项，并且不会根据输出文件名自动选择。</p>
<h4 id="原始图像（Raw）捕获"><a href="#原始图像（Raw）捕获" class="headerlink" title="原始图像（Raw）捕获"></a>原始图像（Raw）捕获</h4><p>原始图像是由图像传感器直接生成的图像，在ISP（图像信号处理器）或任何 CPU 内核对其应用任何处理之前。对于彩色图像传感器，这些通常是拜耳格式的图像。请注意，原始图像与我们之前看到的已处理但未编码的 RGB 或 YUV 图像有很大不同。</p>
<p>捕获原始图像使用下面的命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">libcamera-still -r -o test.jpg</span><br></pre></td></tr></table></figure>

<p>在这里，-r 选项（也称为 –raw）表示捕获原始图像以及 JPEG。实际上，原始图像是生成JPEG的确切图像。原始图像以 DNG（Adobe Digital Negative）格式保存，并与许多标准应用程序兼容，例如 dcraw 或 RawTherapee。原始图像将保存到具有相同名称但扩展名为 .dng 的文件中，因此在本例中为 test.dng。</p>
<h4 id="libcamera-vid"><a href="#libcamera-vid" class="headerlink" title="libcamera-vid"></a>libcamera-vid</h4><p>Libcamera-vid 是视频捕获应用程序。默认情况下，它使用树莓派的硬件 H.264 编码器。它将显示一个预览窗口，并将编码的比特流写入指定的输出。例如，要将 10 秒的视频写入文件，请使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">libcamera-vid -t 10000 -o test.h264</span><br></pre></td></tr></table></figure>

<p>生成的文件可以使用 vlc 播放（以及其他应用程序）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vlc test.h264</span><br></pre></td></tr></table></figure>

<p>请注意，这是一个未打包的视频比特流，它没有包装在任何类型的容器格式（例如 mp4 文件）中。–save-pts 选项可用于输出帧时间戳，以便随后可以使用 mkvmerge 等工具将比特流转换为适当的格式。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">libcamera-vid -o test.h264 --save-pts timestamps.txt</span><br></pre></td></tr></table></figure>

<p>然后，如果你想要一个 MKV 文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkvmerge -o test.mkv --timecodes 0:timestamps.txt test.h264</span><br></pre></td></tr></table></figure>

<p>有关 libcamera 的更多使用方法可以参考<a href="https://www.raspberrypi.com/documentation/computers/camera_software.html#libcamera-and-libcamera-apps">官方文档</a>。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>linux</category>
        <category>树莓派</category>
      </categories>
  </entry>
  <entry>
    <title>生成器模式</title>
    <url>/2024/07/22/%E7%94%9F%E6%88%90%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="生成器模式-Builder"><a href="#生成器模式-Builder" class="headerlink" title="生成器模式(Builder)"></a>生成器模式(Builder)</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a><strong>目录</strong></h2><ul>
<li><p><a href="#%E5%AE%9A%E4%B9%89">定义</a></p>
</li>
<li><p><a href="#%E7%94%9F%E6%88%90%E5%99%A8%E6%A8%A1%E5%BC%8F%E5%8A%9F%E8%83%BD">生成器模式功能</a></p>
</li>
<li><p><a href="#%E7%94%9F%E6%88%90%E5%99%A8%E6%A8%A1%E5%BC%8F%E8%B0%83%E7%94%A8%E9%A1%BA%E5%BA%8F">生成器模式调用顺序</a></p>
</li>
<li><p><a href="#%E8%A7%A3%E6%9E%84%E7%94%9F%E6%88%90%E5%99%A8%E6%A8%A1%E5%BC%8F">解构生成器模式</a></p>
</li>
<li><p><a href="#%E7%94%9F%E6%88%90%E5%99%A8%E6%A8%A1%E5%BC%8F%E9%87%8D%E8%A6%81%E7%9A%84%E6%9E%84%E6%88%90">生成器模式重要的构成</a></p>
</li>
<li><p><a href="#%E7%94%9F%E6%88%90%E5%99%A8%E6%A8%A1%E5%BC%8F%E7%BB%93%E6%9E%84%E5%9B%BE">生成器模式结构图</a></p>
</li>
<li><p><a href="#%E7%94%9F%E6%88%90%E5%99%A8%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AE%9E%E7%8E%B0">生成器模式的实现</a></p>
</li>
<li><p><a href="#%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81">示例代码</a></p>
</li>
<li><p><a href="#%E7%94%9F%E6%88%90%E5%99%A8%E6%A8%A1%E5%BC%8F%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9">生成器模式的优缺点</a></p>
</li>
<li><p><a href="#%E4%BD%95%E6%97%B6%E9%80%89%E7%94%A8%E5%B7%A5%E7%A8%8B%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F">何时选用工程方法模式</a></p>
</li>
<li><p><a href="#%E5%85%B7%E4%BD%93%E7%9A%84%E5%AE%9E%E7%8E%B0">具体的实现</a></p>
</li>
</ul>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a><strong>定义</strong></h3><p>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p>
<span id="more"></span>  
<h3 id="生成器模式功能"><a href="#生成器模式功能" class="headerlink" title="生成器模式功能"></a><strong>生成器模式功能</strong></h3><p>生成器模式的主要功能是构建复杂的产品，而且是细化的，分步骤的构建产品。也就是生成器模式重在一步一步解决构造复杂对象的问题。更为重要的是，这个构建的过程是统一的，固定不变得，变化的部分放到生成器部分了，只要配置不同的生成器，那么同样的构建过程，就能构建出不同的产品来。</p>
<p>生成器模式的重心在于分离建构算法和具体的构造实现，从而使得构建算法可以重用。</p>
<h3 id="生成器模式调用顺序"><a href="#生成器模式调用顺序" class="headerlink" title="生成器模式调用顺序"></a><strong>生成器模式调用顺序</strong></h3><p><img src="https://isrootblog-1251140236.cos.ap-beijing.myqcloud.com/uPic/image_D4bbQgGmFw.png"></p>
<h3 id="解构生成器模式"><a href="#解构生成器模式" class="headerlink" title="解构生成器模式"></a><strong>解构生成器模式</strong></h3><p>生成器模式的本质：分离整体构建算法和部件构造。</p>
<p>构建一个复杂的对象，本来就有构建的过程，以及构建过程中具体的实现，生成器模式就是用来分离这两个部分，从而使得程序结构更松散，扩展更容易，复杂性更好。</p>
<p>生成器模式的重心在于分离构建算法和具体的构造实现，从而使得构建算法可以重用。具体的构造实现可以很方便的扩展和切换，从而可以灵活的组合来构造出不同的产品对象</p>
<h3 id="生成器模式重要的构成"><a href="#生成器模式重要的构成" class="headerlink" title="生成器模式重要的构成"></a><strong>生成器模式重要的构成</strong></h3><ul>
<li><p>一个部分是Builder接口，这里是定义了如何构建各个部件，也就是知道每个部件的功能是如何实现，以及如何装配这些部件到产品中取</p>
</li>
<li><p>另外一个部分是Director，Director是知道如何组合来构建产品，也就是说Director负责整体的构建算法，而且通常是分步骤地来执行</p>
</li>
</ul>
<h3 id="生成器模式结构图"><a href="#生成器模式结构图" class="headerlink" title="生成器模式结构图"></a><strong>生成器模式结构图</strong></h3><p><img src="https://isrootblog-1251140236.cos.ap-beijing.myqcloud.com/uPic/image_b8HTIiJ8_A.png"></p>
<ul>
<li><p>Builder: 生成器接口，定义创建一个Product对象所需的各个部件的操作。</p>
</li>
<li><p>ConcreteBuilder:具体的生成器实现，实现各个部件的创建，并负责组装Product对象的各个部件，同时还提供一个让用户获取组装完成后的产品对象的方法。</p>
</li>
<li><p>Director：指导者，也被称为导向者，主要用来使用Builder接口，以一个统一的过程来构建所需要的Product对象。</p>
</li>
<li><p>Product: 产品，表示被生成器构建的负责对象，包含多个部件。</p>
</li>
</ul>
<h3 id="生成器模式的实现"><a href="#生成器模式的实现" class="headerlink" title="生成器模式的实现"></a><strong>生成器模式的实现</strong></h3><p>先把构建过程独立出来，在生成器模式中把它称为指导者，由它来指导装配过程，但是不负责每步具体的实现。光有指导者是不够的，必须要有能具体实现每步的对象，在生成器模式中称这些实现对象为生成器。</p>
<h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a><strong>示例代码</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 生成器接口，定义创建一个产品对象所需的各个部件的操作</span><br><span class="line">class Builder&#123;</span><br><span class="line">// 示意方法，构建某个部件</span><br><span class="line">  public:</span><br><span class="line">    // 以下函数代表具体的构建过程</span><br><span class="line">    virtual void buildPartA()const =0;</span><br><span class="line">    virtual void buildPartB()const =0;</span><br><span class="line">&#125;</span><br><span class="line">​</span><br><span class="line">​</span><br><span class="line">//具体的生成器实现对象 所有的产品使用相同的步骤</span><br><span class="line">// 一辆汽车可能配备有 GPS 设备、行车电脑和几个座位。不同型号的汽车（</span><br><span class="line">// 运动型轿车、SUV 和敞篷车）可能会安装或启用不同的功能。</span><br><span class="line">class ConcreteBuilder1:public Builder&#123;</span><br><span class="line">  public:</span><br><span class="line">    </span><br><span class="line">    Product* getProduct()&#123;</span><br><span class="line">      return resultProduct;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    void buildPartA()&#123;</span><br><span class="line">      // 构建某个部件的功能处理</span><br><span class="line">      print(&#x27;A&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    void buildPartB()&#123;</span><br><span class="line">      // 构建某个部件的功能处理</span><br><span class="line">      print(&#x27;B&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">​</span><br><span class="line">   private:</span><br><span class="line">     //生成器最终构建的产品对象</span><br><span class="line">     Product* resultProduct;</span><br><span class="line">&#125;</span><br><span class="line">​</span><br><span class="line">// 生成器与其他创建型模式的不同之处在于：它让你能创建不遵循相同接口的产品。</span><br><span class="line">// 比如这个是汽车手册</span><br><span class="line">class ConcreteBuilder2:public Builder&#123;</span><br><span class="line">  public:</span><br><span class="line">    </span><br><span class="line">    Product* getProduct()&#123;</span><br><span class="line">      return resultProduct;</span><br><span class="line">    &#125;</span><br><span class="line">    void buildPartA()&#123;</span><br><span class="line">      // 构建某个部件的功能处理</span><br><span class="line">      print(&#x27;A1&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    void buildPartB()&#123;</span><br><span class="line">      // 构建某个部件的功能处理</span><br><span class="line">      print(&#x27;B1&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">​</span><br><span class="line">   private:</span><br><span class="line">     //生成器最终构建的产品对象</span><br><span class="line">     Product* resultProduct;</span><br><span class="line">&#125;</span><br><span class="line">​</span><br><span class="line">// 被构建的产品对象接口 </span><br><span class="line">class Product&#123;</span><br><span class="line">  public:</span><br><span class="line">    virtual createProduct()const=0;</span><br><span class="line">&#125;</span><br><span class="line">​</span><br><span class="line">// 比如这是构建房子过程中的房顶</span><br><span class="line">class Product1:public Product&#123;</span><br><span class="line">  public:</span><br><span class="line">    void createProduct()&#123;</span><br><span class="line">      </span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line">​</span><br><span class="line">// 比如这是构建房子过程的墙壁</span><br><span class="line">class Product2:public Product&#123;</span><br><span class="line">  public:</span><br><span class="line">    void createProduct()&#123;</span><br><span class="line">      </span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line">​</span><br><span class="line">// 指导者，指导使用生成器的接口来构建产品对象</span><br><span class="line">class Director&#123;</span><br><span class="line">  public:</span><br><span class="line">    Director(Builder* builder)&#123;</span><br><span class="line">      this-&gt;builder = builder;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    void construct()&#123;</span><br><span class="line">      builder-&gt;buildPartA()</span><br><span class="line">      builder-&gt;buildPartB()</span><br><span class="line">    &#125;</span><br><span class="line">    void construct1()&#123;</span><br><span class="line">      builder-&gt;buildPartB()</span><br><span class="line">      builder-&gt;buildPartA()</span><br><span class="line">    &#125;</span><br><span class="line">  private:</span><br><span class="line">    Builder* builder;</span><br><span class="line">&#125;</span><br><span class="line">​</span><br><span class="line">int main()&#123;</span><br><span class="line">  ConcreteBuilder1* concreteBuilder = new ConcreteBuilder1();</span><br><span class="line">  Director* director = new Director(concreteBuilder);</span><br><span class="line">  director-&gt;construct();</span><br><span class="line">  // 获取最终创建好的产品</span><br><span class="line">  concreteBuilder-&gt;getProduct()</span><br><span class="line"> </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="生成器模式的优缺点"><a href="#生成器模式的优缺点" class="headerlink" title="生成器模式的优缺点"></a><strong>生成器模式的优缺点</strong></h3><ul>
<li><p>优点</p>
<ul>
<li><p>分离接口和实现</p>
<p>  客户端使用抽象工厂来创建需要的对象，而客户端根本就不知道具体的实现是谁，客户端只是面向产品的接口编程而已，也就是说，客户端从具体的产品实现中解耦</p>
</li>
<li><p>使得切换产品族变得容易</p>
<p>  因为一个具体的工厂实现代表的是一个产品族。客户端选用不同的工厂实现，就相当于是在切换不同的产品族</p>
</li>
</ul>
</li>
<li><p>缺点</p>
<ul>
<li>在使用抽象工厂模式的时候，如果需要选择的层次过多，那么会造成整个类层次变得复杂。</li>
</ul>
</li>
</ul>
<h3 id="何时选用工程方法模式"><a href="#何时选用工程方法模式" class="headerlink" title="何时选用工程方法模式"></a><strong>何时选用工程方法模式</strong></h3><ul>
<li><p>如果创建对象的算法，应该独立于该对象的组成部分以及他们的装配方式时</p>
</li>
<li><p>如果同一个构建过程有着不同的表示时</p>
</li>
</ul>
<h3 id="具体的实现"><a href="#具体的实现" class="headerlink" title="具体的实现"></a><strong>具体的实现</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * It makes sense to use the Builder pattern only when your products are quite</span><br><span class="line"> * complex and require extensive configuration.</span><br><span class="line"> *</span><br><span class="line"> * Unlike in other creational patterns, different concrete builders can produce</span><br><span class="line"> * unrelated products. In other words, results of various builders may not</span><br><span class="line"> * always follow the same interface.</span><br><span class="line"> */</span><br><span class="line">​</span><br><span class="line">class Product1&#123;</span><br><span class="line">    public:</span><br><span class="line">    std::vector&lt;std::string&gt; parts_;</span><br><span class="line">    void ListParts()const&#123;</span><br><span class="line">        std::cout &lt;&lt; &quot;Product parts: &quot;;</span><br><span class="line">        for (size_t i=0;i&lt;parts_.size();i++)&#123;</span><br><span class="line">            if(parts_[i]== parts_.back())&#123;</span><br><span class="line">                std::cout &lt;&lt; parts_[i];</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                std::cout &lt;&lt; parts_[i] &lt;&lt; &quot;, &quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        std::cout &lt;&lt; &quot;\n\n&quot;; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">​</span><br><span class="line">​</span><br><span class="line">/**</span><br><span class="line"> * The Builder interface specifies methods for creating the different parts of</span><br><span class="line"> * the Product objects.</span><br><span class="line"> * 创建者接口 指定了为不同的对象创建不同的部件的方法</span><br><span class="line"> */</span><br><span class="line">class Builder&#123;</span><br><span class="line">    public:</span><br><span class="line">    virtual ~Builder()&#123;&#125;</span><br><span class="line">    virtual void ProducePartA() const =0;</span><br><span class="line">    virtual void ProducePartB() const =0;</span><br><span class="line">    virtual void ProducePartC() const =0;</span><br><span class="line">&#125;;</span><br><span class="line">/**</span><br><span class="line"> * The Concrete Builder classes follow the Builder interface and provide</span><br><span class="line"> * specific implementations of the building steps. Your program may have several</span><br><span class="line"> * variations of Builders, implemented differently.</span><br><span class="line"> */</span><br><span class="line">class ConcreteBuilder1 : public Builder&#123;</span><br><span class="line">    private:</span><br><span class="line">​</span><br><span class="line">    Product1* product;</span><br><span class="line">​</span><br><span class="line">    /**</span><br><span class="line">     * A fresh builder instance should contain a blank product object, which is</span><br><span class="line">     * used in further assembly.</span><br><span class="line">     */</span><br><span class="line">    public:</span><br><span class="line">​</span><br><span class="line">    ConcreteBuilder1()&#123;</span><br><span class="line">        this-&gt;Reset();</span><br><span class="line">    &#125;</span><br><span class="line">​</span><br><span class="line">    ~ConcreteBuilder1()&#123;</span><br><span class="line">        delete product;</span><br><span class="line">    &#125;</span><br><span class="line">​</span><br><span class="line">    void Reset()&#123;</span><br><span class="line">        this-&gt;product= new Product1();</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * All production steps work with the same product instance.</span><br><span class="line">     */</span><br><span class="line">​</span><br><span class="line">    void ProducePartA()const override&#123;</span><br><span class="line">        this-&gt;product-&gt;parts_.push_back(&quot;PartA1&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">​</span><br><span class="line">    void ProducePartB()const override&#123;</span><br><span class="line">        this-&gt;product-&gt;parts_.push_back(&quot;PartB1&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">​</span><br><span class="line">    void ProducePartC()const override&#123;</span><br><span class="line">        this-&gt;product-&gt;parts_.push_back(&quot;PartC1&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">​</span><br><span class="line">    Product1* GetProduct() &#123;</span><br><span class="line">        Product1* result= this-&gt;product;</span><br><span class="line">        this-&gt;Reset();</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">​</span><br><span class="line">/**</span><br><span class="line"> * The Director is only responsible for executing the building steps in a</span><br><span class="line"> * particular sequence. It is helpful when producing products according to a</span><br><span class="line"> * specific order or configuration. Strictly speaking, the Director class is</span><br><span class="line"> * optional, since the client can control builders directly.</span><br><span class="line"> */</span><br><span class="line">class Director&#123;</span><br><span class="line">    /**</span><br><span class="line">     * @var Builder</span><br><span class="line">     */</span><br><span class="line">    private:</span><br><span class="line">    Builder* builder;</span><br><span class="line">    /**</span><br><span class="line">     * The Director works with any builder instance that the client code passes</span><br><span class="line">     * to it. This way, the client code may alter the final type of the newly</span><br><span class="line">     * assembled product.</span><br><span class="line">     */</span><br><span class="line">​</span><br><span class="line">    public:</span><br><span class="line">​</span><br><span class="line">    void set_builder(Builder* builder)&#123;</span><br><span class="line">        this-&gt;builder=builder;</span><br><span class="line">    &#125;</span><br><span class="line">​</span><br><span class="line">    /**</span><br><span class="line">     * The Director can construct several product variations using the same</span><br><span class="line">     * building steps.</span><br><span class="line">     */</span><br><span class="line">​</span><br><span class="line">    void BuildMinimalViableProduct()&#123;</span><br><span class="line">        this-&gt;builder-&gt;ProducePartA();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    void BuildFullFeaturedProduct()&#123;</span><br><span class="line">        this-&gt;builder-&gt;ProducePartA();</span><br><span class="line">        this-&gt;builder-&gt;ProducePartB();</span><br><span class="line">        this-&gt;builder-&gt;ProducePartC();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">/**</span><br><span class="line"> * The client code creates a builder object, passes it to the director and then</span><br><span class="line"> * initiates the construction process. The end result is retrieved from the</span><br><span class="line"> * builder object.</span><br><span class="line"> */</span><br><span class="line">/**</span><br><span class="line"> * I used raw pointers for simplicity however you may prefer to use smart</span><br><span class="line"> * pointers here</span><br><span class="line"> */</span><br><span class="line">void ClientCode(Director&amp; director)</span><br><span class="line">&#123;</span><br><span class="line">    ConcreteBuilder1* builder = new ConcreteBuilder1();</span><br><span class="line">    director.set_builder(builder);</span><br><span class="line">    std::cout &lt;&lt; &quot;Standard basic product:\n&quot;; </span><br><span class="line">    director.BuildMinimalViableProduct();</span><br><span class="line">    </span><br><span class="line">    Product1* p= builder-&gt;GetProduct();</span><br><span class="line">    p-&gt;ListParts();</span><br><span class="line">    delete p;</span><br><span class="line">​</span><br><span class="line">    std::cout &lt;&lt; &quot;Standard full featured product:\n&quot;; </span><br><span class="line">    director.BuildFullFeaturedProduct();</span><br><span class="line">​</span><br><span class="line">    p= builder-&gt;GetProduct();</span><br><span class="line">    p-&gt;ListParts();</span><br><span class="line">    delete p;</span><br><span class="line">​</span><br><span class="line">    // Remember, the Builder pattern can be used without a Director class.</span><br><span class="line">    std::cout &lt;&lt; &quot;Custom product:\n&quot;;</span><br><span class="line">    builder-&gt;ProducePartA();</span><br><span class="line">    builder-&gt;ProducePartC();</span><br><span class="line">    p=builder-&gt;GetProduct();</span><br><span class="line">    p-&gt;ListParts();</span><br><span class="line">    delete p;</span><br><span class="line">​</span><br><span class="line">    delete builder;</span><br><span class="line">&#125;</span><br><span class="line">​</span><br><span class="line">int main()&#123;</span><br><span class="line">    Director* director= new Director();</span><br><span class="line">    ClientCode(*director);</span><br><span class="line">    delete director;</span><br><span class="line">    return 0;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
        <category>c++</category>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>适配器模式</title>
    <url>/2024/07/22/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="适配器模式-adapter"><a href="#适配器模式-adapter" class="headerlink" title="适配器模式(adapter)"></a>适配器模式(adapter)</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a><strong>目录</strong></h2><ul>
<li><p><a href="#%E5%AE%9A%E4%B9%89">定义</a></p>
<ul>
<li><p><a href="#%E9%80%82%E9%85%8D%E5%99%A8%E8%B0%83%E7%94%A8%E9%A1%BA%E5%BA%8F">适配器调用顺序</a></p>
</li>
<li><p><a href="#%E8%A7%A3%E6%9E%84%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F">解构适配器模式</a></p>
</li>
</ul>
</li>
<li><p><a href="#%E9%80%82%E9%85%8D%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0">适配器的实现</a></p>
</li>
<li><p><a href="#%E7%B1%BB%E9%80%82%E9%85%8D%E5%99%A8">类适配器</a></p>
</li>
<li><p><a href="#%E5%AF%B9%E8%B1%A1%E9%80%82%E9%85%8D%E5%99%A8">对象适配器</a></p>
</li>
<li><p><a href="#%E4%BD%95%E6%97%B6%E9%80%89%E7%94%A8%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F">何时选用适配器模式</a></p>
</li>
</ul>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a><strong>定义</strong></h3><p>将一个类的接口转化成客户希望的另一个接口，适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作</p>
<p>适配器模式的主要功能是进行转化匹配，目的是复用已有的功能，而不是来实现新的接口。也就是说客户端需要的功能是已经实现的，不需要适配器来实现，适配器模式的主要功能是把不兼容的接口转化成客户端期望的样子就可以了，适配器中也可以实现功能，称这种适配器为智能适配器模式</p>
<span id="more"></span>  
<h4 id="适配器调用顺序"><a href="#适配器调用顺序" class="headerlink" title="适配器调用顺序"></a>适配器调用顺序</h4><p><img src="https://isrootblog-1251140236.cos.ap-beijing.myqcloud.com/uPic/image_xPhwP28EC4.png"></p>
<h4 id="解构适配器模式"><a href="#解构适配器模式" class="headerlink" title="解构适配器模式"></a>解构适配器模式</h4><p>适配器的的主要功能是进行转化匹配，目的是复用已有的功能。而不是来实现新的接口。适配器模式的本质是：转化匹配，复用功能</p>
<h3 id="适配器的实现"><a href="#适配器的实现" class="headerlink" title="适配器的实现"></a><strong>适配器的实现</strong></h3><p>在实现适配器的时候，适配器通常是一个类，一般会让适配器类去实现Target接口，然后在适配器的具体实现里面调用Adaptee，适配器通常是一个Target类型。</p>
<h3 id="类适配器"><a href="#类适配器" class="headerlink" title="类适配器"></a><strong>类适配器</strong></h3><p>适配器模式结构图</p>
<p><img src="https://isrootblog-1251140236.cos.ap-beijing.myqcloud.com/uPic/image_k2YqNJ73kS.png"></p>
<p>采用多重继承对一个接口与另一个接口进行匹配</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * The Target defines the domain-specific interface used by the client code.</span><br><span class="line"> */</span><br><span class="line">class Target &#123;</span><br><span class="line"> public:</span><br><span class="line">  virtual ~Target() = default;</span><br><span class="line">  # 要实现的目标接口</span><br><span class="line">  virtual std::string Request() const &#123;</span><br><span class="line">    return &quot;Target: The default target&#x27;s behavior.&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">​</span><br><span class="line">/**</span><br><span class="line"> * The Adaptee contains some useful behavior, but its interface is incompatible</span><br><span class="line"> * with the existing client code. The Adaptee needs some adaptation before the</span><br><span class="line"> * client code can use it.</span><br><span class="line"> */</span><br><span class="line">class Adaptee &#123;</span><br><span class="line"> public:</span><br><span class="line"> # 不兼容的接口</span><br><span class="line">  std::string SpecificRequest() const &#123;</span><br><span class="line">    return &quot;.eetpadA eht fo roivaheb laicepS&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">​</span><br><span class="line">/**</span><br><span class="line"> * The Adapter makes the Adaptee&#x27;s interface compatible with the Target&#x27;s</span><br><span class="line"> * interface using multiple inheritance.</span><br><span class="line"> */</span><br><span class="line">class Adapter : public Target, public Adaptee &#123;</span><br><span class="line"> public:</span><br><span class="line">  Adapter() &#123;&#125;</span><br><span class="line">  # 在适配器中兼容不兼容的接口</span><br><span class="line">  std::string Request() const override &#123;</span><br><span class="line">    std::string to_reverse = SpecificRequest();</span><br><span class="line">    std::reverse(to_reverse.begin(), to_reverse.end());</span><br><span class="line">    return &quot;Adapter: (TRANSLATED) &quot; + to_reverse;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">​</span><br><span class="line">/**</span><br><span class="line"> * The client code supports all classes that follow the Target interface.</span><br><span class="line"> */</span><br><span class="line">void ClientCode(const Target *target) &#123;</span><br><span class="line">  std::cout &lt;&lt; target-&gt;Request();</span><br><span class="line">&#125;</span><br><span class="line">​</span><br><span class="line">int main() &#123;</span><br><span class="line">  std::cout &lt;&lt; &quot;Client: I can work just fine with the Target objects:\n&quot;;</span><br><span class="line">  Target *target = new Target;</span><br><span class="line">  ClientCode(target);</span><br><span class="line">  std::cout &lt;&lt; &quot;\n\n&quot;;</span><br><span class="line">  Adaptee *adaptee = new Adaptee;</span><br><span class="line">  std::cout &lt;&lt; &quot;Client: The Adaptee class has a weird interface. See, I don&#x27;t understand it:\n&quot;;</span><br><span class="line">  std::cout &lt;&lt; &quot;Adaptee: &quot; &lt;&lt; adaptee-&gt;SpecificRequest();</span><br><span class="line">  std::cout &lt;&lt; &quot;\n\n&quot;;</span><br><span class="line">  std::cout &lt;&lt; &quot;Client: But I can work with it via the Adapter:\n&quot;;</span><br><span class="line">  Adapter *adapter = new Adapter;</span><br><span class="line">  ClientCode(adapter);</span><br><span class="line">  std::cout &lt;&lt; &quot;\n&quot;;</span><br><span class="line">​</span><br><span class="line">  delete target;</span><br><span class="line">  delete adaptee;</span><br><span class="line">  delete adapter;</span><br><span class="line">​</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="对象适配器"><a href="#对象适配器" class="headerlink" title="对象适配器"></a><strong>对象适配器</strong></h3><ul>
<li><p>适配器模式结构图</p>
<p>  <img src="https://isrootblog-1251140236.cos.ap-beijing.myqcloud.com/uPic/image_H5AnJF6_iF.png"></p>
<p>  对象适配器依赖于对象组合。</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * The Target defines the domain-specific interface used by the client code.</span><br><span class="line"> */</span><br><span class="line">class Target &#123;</span><br><span class="line"> public:</span><br><span class="line">  virtual ~Target() = default;</span><br><span class="line">​</span><br><span class="line">  virtual std::string Request() const &#123;</span><br><span class="line">    return &quot;Target: The default target&#x27;s behavior.&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">​</span><br><span class="line">/**</span><br><span class="line"> * The Adaptee contains some useful behavior, but its interface is incompatible</span><br><span class="line"> * with the existing client code. The Adaptee needs some adaptation before the</span><br><span class="line"> * client code can use it.</span><br><span class="line"> */</span><br><span class="line">class Adaptee &#123;</span><br><span class="line"> public:</span><br><span class="line">  std::string SpecificRequest() const &#123;</span><br><span class="line">    return &quot;.eetpadA eht fo roivaheb laicepS&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">​</span><br><span class="line">/**</span><br><span class="line"> * The Adapter makes the Adaptee&#x27;s interface compatible with the Target&#x27;s</span><br><span class="line"> * interface.</span><br><span class="line"> */</span><br><span class="line">class Adapter : public Target &#123;</span><br><span class="line"> private:</span><br><span class="line">  Adaptee *adaptee_;</span><br><span class="line">​</span><br><span class="line"> public:</span><br><span class="line">  Adapter(Adaptee *adaptee) : adaptee_(adaptee) &#123;&#125;</span><br><span class="line">  std::string Request() const override &#123;</span><br><span class="line">    std::string to_reverse = this-&gt;adaptee_-&gt;SpecificRequest();</span><br><span class="line">    std::reverse(to_reverse.begin(), to_reverse.end());</span><br><span class="line">    return &quot;Adapter: (TRANSLATED) &quot; + to_reverse;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">​</span><br><span class="line">/**</span><br><span class="line"> * The client code supports all classes that follow the Target interface.</span><br><span class="line"> */</span><br><span class="line">void ClientCode(const Target *target) &#123;</span><br><span class="line">  std::cout &lt;&lt; target-&gt;Request();</span><br><span class="line">&#125;</span><br><span class="line">​</span><br><span class="line">int main() &#123;</span><br><span class="line">  std::cout &lt;&lt; &quot;Client: I can work just fine with the Target objects:\n&quot;;</span><br><span class="line">  Target *target = new Target;</span><br><span class="line">  ClientCode(target);</span><br><span class="line">  std::cout &lt;&lt; &quot;\n\n&quot;;</span><br><span class="line">  Adaptee *adaptee = new Adaptee;</span><br><span class="line">  std::cout &lt;&lt; &quot;Client: The Adaptee class has a weird interface. See, I don&#x27;t understand it:\n&quot;;</span><br><span class="line">  std::cout &lt;&lt; &quot;Adaptee: &quot; &lt;&lt; adaptee-&gt;SpecificRequest();</span><br><span class="line">  std::cout &lt;&lt; &quot;\n\n&quot;;</span><br><span class="line">  std::cout &lt;&lt; &quot;Client: But I can work with it via the Adapter:\n&quot;;</span><br><span class="line">  Adapter *adapter = new Adapter(adaptee);</span><br><span class="line">  ClientCode(adapter);</span><br><span class="line">  std::cout &lt;&lt; &quot;\n&quot;;</span><br><span class="line">​</span><br><span class="line">  delete target;</span><br><span class="line">  delete adaptee;</span><br><span class="line">  delete adapter;</span><br><span class="line">​</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="何时选用适配器模式"><a href="#何时选用适配器模式" class="headerlink" title="何时选用适配器模式"></a><strong>何时选用适配器模式</strong></h3><ul>
<li><p>如果想使用一个已经存在的类，但它的接口不符合你的需求，这种情况可以使用适配器模式，来把已有的实现转化成适用你的接口</p>
</li>
<li><p>如果你想创建一个可以复用的类，这个类可能和一些不兼容的类一起工作，这种时候可以使用适配器模式，到时候需要什么就适配什么</p>
</li>
<li><p>如果你想使用一个已经存在的类，但是不可能对每一个类都进行适配，这种情况可以选择对象适配器，直接适配这些子类的父类就可以</p>
</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>c++</category>
        <category>设计模式</category>
      </categories>
  </entry>
</search>
